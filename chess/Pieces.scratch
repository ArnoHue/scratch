//----- Green flag events ---------------------------------------------------------------------------------------------

WhenGreenFlagClicked()
{
    Looks.Hide();
    Looks.SwitchCostumeTo(NoPiece);
    Pieces_MovePieceFromIdx = -1;
    Pieces_MovePieceToIdx = -1;
    Idx = 1;
    Repeat (64)
    {
        PieceSquareIdx = Idx;
        PieceValue = 0;
        Control.CreateCloneOf(_myself_);
        Idx += 1;
    }
    PieceSquareIdx = 0;
    PieceValue = 0;
    Pieces_ClickHandlerRunningCount = 0;
    IsInputEnabled = 1;
}


//----- Sprite clicked events -----------------------------------------------------------------------------------------

WhenThisSpriteClicked()
{
    If (IsInputEnabled == 0)
    {
        Stop(this script);
    }
    If (GoK_IsGameSuspended == 1)
    {
        Stop(this script);
    }
    If (Sensing.Timer() > (Stg_ClickedTimer + 0.25))
    {
        Event.BroadcastAndWait("Stg_StageClickedRouted");
        If (Pieces_ClickHandlerRunningCount == 0)
        {
            Pieces_ClickHandlerRunningCount += 1;
            Costume.GoToFrontBack(front);
            X = Sensing.MouseX();
            Y = Sensing.MouseY();
            If (PieceValue < 0)
            {
                Repeat Until (Not (Sensing.MouseDown()))
                {
                    If (Sensing.MouseX() < 120)
                    {
                        Motion.GoToXY(Sensing.MouseX(), Sensing.MouseY());
                    }
                    Else
                    {
                        Motion.GoToXY(120, Sensing.MouseY());
                    }
                    X = (floor(((Sensing.MouseX() + 230) / 42.2)) + 1);
                    Y = (floor(((Sensing.MouseY() + 168) / 42.2)) + 1);
                }
                If (((X > 0) And (X < 9)) And ((Y > 0) And (Y < 9)))
                {
                    Idx = (((8 - Y) * 8) + X);
                    Motion.GoToXY((-208 + (((Idx - 1) % 8) * 42.2)), (148 - ((((Idx - 1) - ((Idx - 1) % 8)) / 8) * 42.2)));
                    If (Not ((PieceSquareIdx == Idx)))
                    {
                        Event.BroadcastAndWait("Stg_StageClickedRouted");
                    }
                }
                Else
                {
                    Motion.GoToXY((-208 + (((PieceSquareIdx - 1) % 8) * 42.2)), (148 - ((((PieceSquareIdx - 1) - ((PieceSquareIdx - 1) % 8)) / 8) * 42.2)));
                    Event.BroadcastAndWait("Stg_StageClickedRouted");
                }
                Event.BroadcastAndWait("Pieces_DrawPiece");
            }
            Pieces_ClickHandlerRunningCount += -1;
        }
    }
}


//----- Broadcast received events -------------------------------------------------------------------------------------

WhenBroadcastReceived(GoK_ModeBusy)
{
    IsInputEnabled = 0;
}

WhenBroadcastReceived(GoK_ModeInput)
{
    IsInputEnabled = 1;
}

WhenBroadcastReceived(Pieces_DrawBoard)
{
    If (PieceSquareIdx == 0)
    {
        Call DrawBoard;
    }
}

WhenBroadcastReceived(Pieces_DrawPiece)
{
    If (PieceSquareIdx > 0)
    {
        PieceValue = Board[PieceSquareIdx];
        If (PieceValue == 0)
        {
            Looks.SwitchCostumeTo(NoPiece);
            Looks.Hide();
        }
        Else
        {
            If (PieceValue > 0)
            {
                If (GoK_IsPlayerBlack == 0)
                {
                    PiecePrefix = "Black";
                }
                Else
                {
                    PiecePrefix = "White";
                }
            }
            Else
            {
                If (GoK_IsPlayerBlack == 0)
                {
                    PiecePrefix = "White";
                }
                Else
                {
                    PiecePrefix = "Black";
                }
            }
            If (abs(PieceValue) == GoK_BlackKing)
            {
                Looks.SwitchCostumeTo(Operator.Join(PiecePrefix, "King"));
                Looks.SetSizeTo(55);
            }
            If (abs(PieceValue) == GoK_BlackQueen)
            {
                Looks.SwitchCostumeTo(Operator.Join(PiecePrefix, "Queen"));
                Looks.SetSizeTo(55);
            }
            If (abs(PieceValue) == GoK_BlackRook)
            {
                Looks.SwitchCostumeTo(Operator.Join(PiecePrefix, "Rook"));
                Looks.SetSizeTo(55);
            }
            If (abs(PieceValue) == GoK_BlackBishop)
            {
                Looks.SwitchCostumeTo(Operator.Join(PiecePrefix, "Bishop"));
                Looks.SetSizeTo(55);
            }
            If (abs(PieceValue) == GoK_BlackKnight)
            {
                Looks.SwitchCostumeTo(Operator.Join(PiecePrefix, "Knight"));
                Looks.SetSizeTo(55);
            }
            If (abs(PieceValue) == GoK_BlackPawn)
            {
                Looks.SwitchCostumeTo(Operator.Join(PiecePrefix, "Pawn"));
                Looks.SetSizeTo(60);
            }
            Motion.SetX((-208 + (((PieceSquareIdx - 1) % 8) * 42.2)));
            Motion.SetY((148 - ((((PieceSquareIdx - 1) - ((PieceSquareIdx - 1) % 8)) / 8) * 42.2)));
            Looks.Show();
        }
    }
}

WhenBroadcastReceived(Pieces_MovePiece)
{
    If (PieceSquareIdx == 0)
    {
        Pieces_ClickHandlerRunningCount += 1;
        Call DrawBoard;
        If (Pieces_MovePieceSpecial == "")
        {
            Call MovePieceImpl(Pieces_MovePieceFromIdx)(Pieces_MovePieceToIdx);
        }
        Else
        {
            If (Pieces_MovePieceSpecial == GoK_WhiteKingsideCastling)
            {
                Call MovePieceImpl(VirtualBoard[61])(VirtualBoard[63]);
                Call MovePieceImpl(VirtualBoard[64])(VirtualBoard[62]);
            }
            If (Pieces_MovePieceSpecial == GoK_WhiteQueensideCastling)
            {
                Call MovePieceImpl(VirtualBoard[61])(VirtualBoard[59]);
                Call MovePieceImpl(VirtualBoard[57])(VirtualBoard[60]);
            }
            If (Pieces_MovePieceSpecial == GoK_BlackKingsideCastling)
            {
                Call MovePieceImpl(VirtualBoard[5])(VirtualBoard[7]);
                Call MovePieceImpl(VirtualBoard[8])(VirtualBoard[6]);
            }
            If (Pieces_MovePieceSpecial == GoK_BlackQueensideCastling)
            {
                Call MovePieceImpl(VirtualBoard[5])(VirtualBoard[3]);
                Call MovePieceImpl(VirtualBoard[1])(VirtualBoard[4]);
            }
        }
        Pieces_MovePieceFromIdx = -1;
        Pieces_MovePieceToIdx = -1;
        MoveFromIdx = -1;
        MoveToIdx = -1;
        Pieces_ClickHandlerRunningCount += -1;
    }
}

WhenBroadcastReceived(Pieces_MovePieceInternal)
{
    If (PieceSquareIdx == Pieces_MovePieceInternalFromIdx)
    {
        Costume.GoToFrontBack(front);
        Motion.GlideTo((-208 + (((Pieces_MovePieceInternalToIdx - 1) % 8) * 42.2)), (148 - ((((Pieces_MovePieceInternalToIdx - 1) - ((Pieces_MovePieceInternalToIdx - 1) % 8)) / 8) * 42.2)), 0.5);
    }
}

WhenBroadcastReceived(Pieces_SelectPromotionPiece)
{
    If (((PieceSquareIdx == 27) Or (PieceSquareIdx == 28)) Or ((PieceSquareIdx == 29) Or (PieceSquareIdx == 30)))
    {
        Looks.Hide();
    }
    If (PieceSquareIdx == 0)
    {
        GoK_IsGameSuspended = 1;
        Event.BroadcastAndWait("Stg_ModalDialogBegin");
        Looks.SwitchCostumeTo(Panel);
        Looks.SetSizeTo(100);
        Motion.GoToXY(-60, 21);
        Pen.Stamp();
        If (GoK_IsPlayerBlack == 0)
        {
            Motion.GoToXY(-120, 20);
            Looks.SwitchCostumeTo(WhiteQueen);
            Looks.SetSizeTo(55);
            Pen.Stamp();
            Motion.GoToXY(-80, 20);
            Looks.SwitchCostumeTo(WhiteRook);
            Looks.SetSizeTo(55);
            Pen.Stamp();
            Motion.GoToXY(-40, 20);
            Looks.SwitchCostumeTo(WhiteBishop);
            Looks.SetSizeTo(55);
            Pen.Stamp();
            Motion.GoToXY(0, 20);
            Looks.SwitchCostumeTo(WhiteKnight);
            Looks.SetSizeTo(55);
            Pen.Stamp();
        }
        Else
        {
            Motion.GoToXY(-120, 20);
            Looks.SwitchCostumeTo(BlackQueen);
            Looks.SetSizeTo(55);
            Pen.Stamp();
            Motion.GoToXY(-80, 20);
            Looks.SwitchCostumeTo(BlackRook);
            Looks.SetSizeTo(55);
            Pen.Stamp();
            Motion.GoToXY(-40, 20);
            Looks.SwitchCostumeTo(BlackBishop);
            Looks.SetSizeTo(55);
            Pen.Stamp();
            Motion.GoToXY(0, 20);
            Looks.SwitchCostumeTo(BlackKnight);
            Looks.SetSizeTo(55);
            Pen.Stamp();
        }
        Repeat Until (Sensing.MouseDown() And (((Sensing.MouseX() > -140) And (Sensing.MouseX() < 20)) And ((Sensing.MouseY() > 0) And (Sensing.MouseY() < 40))))
        {
            Control.Wait(0.1);
        }
        If (Sensing.MouseX() < -100)
        {
            Pieces_SelectedPromotionPiece = GoK_WhiteQueen;
        }
        Else
        {
            If (Sensing.MouseX() < -60)
            {
                Pieces_SelectedPromotionPiece = GoK_WhiteRook;
            }
            Else
            {
                If (Sensing.MouseX() < -20)
                {
                    Pieces_SelectedPromotionPiece = GoK_WhiteBishop;
                }
                Else
                {
                    Pieces_SelectedPromotionPiece = GoK_WhiteKnight;
                }
            }
        }
        Call DrawBoard;
        Event.BroadcastAndWait("Stg_ModalDialogEnd");
        GoK_IsGameSuspended = 0;
    }
}

WhenBroadcastReceived(Stg_ToSquareSelected)
{
    If (PieceSquareIdx == Stg_FromSquareIdx)
    {
        Pieces_ClickHandlerRunningCount += 1;
        X = (-208 + (((Stg_ToSquareIdx - 1) % 8) * 42.2));
        Y = (148 - ((((Stg_ToSquareIdx - 1) - ((Stg_ToSquareIdx - 1) % 8)) / 8) * 42.2));
        If ((abs((X - Motion.XPosition())) < 40) And (abs((Y - Motion.YPosition())) < 40))
        {
            Motion.GoToXY(X, Y);
        }
        Else
        {
            Motion.GlideTo(X, Y, 0.5);
        }
        Pieces_ClickHandlerRunningCount += -1;
    }
}

WhenBroadcastReceived(Stg_TriggerRestart)
{
    If (PieceSquareIdx == 0)
    {
        Pen.Clear();
    }
    Else
    {
        Looks.Hide();
        Looks.SwitchCostumeTo(NoPiece);
    }
}


//----- Custom blocks -------------------------------------------------------------------------------------------------

Define DrawBoard (warp=false)
{
    If Operator.Contains(Sensing.Of(backdrop name, _stage_), "Board")
    {
        Pen.Clear();
        Event.Broadcast("GoK_ProgressValueChanged");
        Event.Broadcast("GoK_EvaluationValueChanged");
        Event.BroadcastAndWait("Pieces_DrawPiece");
    }
}

Define MovePieceImpl(string FromIdx)(string ToIdx) (warp=false)
{
    If Operator.Contains(Sensing.Of(backdrop name, _stage_), "Board")
    {
        Pieces_MovePieceInternalFromIdx = FromIdx;
        Pieces_MovePieceInternalToIdx = ToIdx;
        Event.BroadcastAndWait("Pieces_MovePieceInternal");
    }
}
