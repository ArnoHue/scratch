define QuickSortImpl(string Lo)(string Hi) (warp=true)
{
    QSPivot = SortedList[floor(((Lo + Hi) / 2))];
    QSLower = Lo;
    QSUpper = Hi;
    repeat until((QSLower > QSUpper))
    {
        repeat until(not((SortedList[QSLower] < QSPivot)))
        {
            QSLower += 1;
        }
        repeat until(not((SortedList[QSUpper] > QSPivot)))
        {
            QSUpper += -1;
        }
        if (not((QSLower > QSUpper)))
        {
            QSSwap = SortedList[QSLower];
            Data.ReplaceItem(SortedList, QSLower, SortedList[QSUpper]);
            Data.ReplaceItem(SortedList, QSUpper, QSSwap);
            QSSwap = SortedList2[QSLower];
            Data.ReplaceItem(SortedList2, QSLower, SortedList2[QSUpper]);
            Data.ReplaceItem(SortedList2, QSUpper, QSSwap);
            QSLower += 1;
            QSUpper += -1;
        }
    }
    if ((Lo < QSUpper))
    {
        List.Add(QSPartStack, QSLower);
        call QuickSortImpl(Lo)(QSUpper);
        QSLower = QSPartStack[List.Length(QSPartStack)];
        Data.DeleteItem(QSPartStack, List.Length(QSPartStack));
    }
    if ((QSLower < Hi))
    {
        call QuickSortImpl(QSLower)(Hi);
    }
}

define InitMovePosLookup (warp=true)
{
    MetaState = Operator.Join(IsBlackCastlingPossible, Operator.Join(IsWhiteCastlingPossible, IsEndgame));
    if ((BlackQueenCount = "0"))
    {
        MetaState = Operator.Join(MetaState, "0");
    }
    else
    {
        MetaState = Operator.Join(MetaState, "1");
    }
    if ((WhiteQueenCount = "0"))
    {
        MetaState = Operator.Join(MetaState, "0");
    }
    else
    {
        MetaState = Operator.Join(MetaState, "1");
    }
    if ((BlackMinorCount = "0"))
    {
        MetaState = Operator.Join(MetaState, "0");
    }
    else
    {
        MetaState = Operator.Join(MetaState, "1");
    }
    if ((WhiteMinorCount = "0"))
    {
        MetaState = Operator.Join(MetaState, "0");
    }
    else
    {
        MetaState = Operator.Join(MetaState, "1");
    }
    if ((BlackPawnCount = "0"))
    {
        MetaState = Operator.Join(MetaState, "0");
    }
    else
    {
        MetaState = Operator.Join(MetaState, "1");
    }
    if ((WhitePawnCount = "0"))
    {
        MetaState = Operator.Join(MetaState, "0");
    }
    else
    {
        MetaState = Operator.Join(MetaState, "1");
    }
    if (not((MetaState = PrevMetaState)))
    {
        PrevMetaState = MetaState;
        IdxOuter = "1";
        repeat (List.Length(TTNodeScore))
        {
            Data.ReplaceItem(TTNodeScore, IdxOuter, "");
            IdxOuter += 1;
        }
        IdxOuter = "1";
        repeat (List.Length(TTBoardScore1))
        {
            Data.ReplaceItem(TTBoardScore1, IdxOuter, "");
            Data.ReplaceItem(TTBoardScore2, IdxOuter, "");
            Data.ReplaceItem(TTBoardScore3, IdxOuter, "");
            IdxOuter += 1;
        }
        if (((not((List.Length(MovePosLookupBlack) = "100000")) OR not((List.Length(MovePosLookupWhite) = "100000"))) OR (not((List.Length(MoveHashLookupBlack) = "100000")) OR not((List.Length(MoveHashLookupWhite) = "100000")))))
        {
            List.DeleteAll(MovePosLookupBlack);
            List.DeleteAll(MovePosLookupWhite);
            List.DeleteAll(MoveHashLookupBlack);
            List.DeleteAll(MoveHashLookupWhite);
            repeat (100000)
            {
                List.Add(MovePosLookupBlack, "");
                List.Add(MovePosLookupWhite, "");
                List.Add(MoveHashLookupBlack, "");
                List.Add(MoveHashLookupWhite, "");
            }
        }
        List.DeleteAll(Pieces);
        List.Add(Pieces, BlackKing);
        List.Add(Pieces, BlackQueen);
        List.Add(Pieces, BlackRook);
        List.Add(Pieces, BlackBishop);
        List.Add(Pieces, BlackKnight);
        List.Add(Pieces, BlackPawn);
        List.Add(Pieces, WhiteKing);
        List.Add(Pieces, WhiteQueen);
        List.Add(Pieces, WhiteRook);
        List.Add(Pieces, WhiteBishop);
        List.Add(Pieces, WhiteKnight);
        List.Add(Pieces, WhitePawn);
        IdxOuter = "1";
        repeat (List.Length(Pieces))
        {
            SourcePiece = Pieces[IdxOuter];
            SourceIdx = "0";
            repeat (65)
            {
                call GetPiecePosScore(SourcePiece)(SourceIdx);
                PosScoreRes2 = PosScoreRes;
                call GetPiecePosHash(SourcePiece)(SourceIdx);
                PiecePosHash2 = PiecePosHash;
                TargetIdx = "0";
                repeat (65)
                {
                    IsLegalMove = "0";
                    if ((SourcePiece = WhitePawn))
                    {
                        if ((((abs((IdxToFile[TargetIdx] - IdxToFile[SourceIdx])) < "2") AND ((IdxToRank[TargetIdx] - IdxToRank[SourceIdx]) > "-3")) AND ((IdxToRank[TargetIdx] - IdxToRank[SourceIdx]) < "0")))
                        {
                            IsLegalMove = "1";
                        }
                    }
                    else
                    {
                        if ((SourcePiece = BlackPawn))
                        {
                            if ((((abs((IdxToFile[TargetIdx] - IdxToFile[SourceIdx])) < "2") AND ((IdxToRank[TargetIdx] - IdxToRank[SourceIdx]) < "3")) AND ((IdxToRank[TargetIdx] - IdxToRank[SourceIdx]) > "0")))
                            {
                                IsLegalMove = "1";
                            }
                        }
                        else
                        {
                            if ((abs(SourcePiece) = BlackKing))
                            {
                                if (((abs((IdxToRank[TargetIdx] - IdxToRank[SourceIdx])) < "2") AND (abs((IdxToFile[TargetIdx] - IdxToFile[SourceIdx])) < "2")))
                                {
                                    IsLegalMove = "1";
                                }
                            }
                            else
                            {
                                if ((abs(SourcePiece) = BlackKnight))
                                {
                                    if (((abs((IdxToRank[TargetIdx] - IdxToRank[SourceIdx])) < "3") AND (abs((IdxToFile[TargetIdx] - IdxToFile[SourceIdx])) < "3")))
                                    {
                                        IsLegalMove = "1";
                                    }
                                }
                                else
                                {
                                    if (((abs(SourcePiece) = BlackQueen) OR (abs(SourcePiece) = BlackRook)))
                                    {
                                        if ((((IdxToRank[TargetIdx] - IdxToRank[SourceIdx]) = "0") OR ((IdxToFile[TargetIdx] - IdxToFile[SourceIdx]) = "0")))
                                        {
                                            IsLegalMove = "1";
                                        }
                                    }
                                    if (((abs(SourcePiece) = BlackQueen) OR (abs(SourcePiece) = BlackBishop)))
                                    {
                                        if ((abs((IdxToRank[TargetIdx] - IdxToRank[SourceIdx])) = abs((IdxToFile[TargetIdx] - IdxToFile[SourceIdx]))))
                                        {
                                            IsLegalMove = "1";
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (((IsLegalMove = "1") OR ((SourceIdx = "0") OR (TargetIdx = "0"))))
                    {
                        call GetPiecePosScore(SourcePiece)(TargetIdx);
                        call GetPiecePosHash(SourcePiece)(TargetIdx);
                        if ((SourcePiece > "0"))
                        {
                            IdxOuter2 = ((PieceIdxLookup[SourcePiece] * 10000) + ((SourceIdx * 100) + TargetIdx));
                            Data.ReplaceItem(MovePosLookupBlack, IdxOuter2, (PosScoreRes - PosScoreRes2));
                            Data.ReplaceItem(MoveHashLookupBlack, IdxOuter2, (PiecePosHash - PiecePosHash2));
                        }
                        else
                        {
                            IdxOuter2 = ((PieceIdxLookup[(0 - SourcePiece)] * 10000) + ((SourceIdx * 100) + TargetIdx));
                            Data.ReplaceItem(MovePosLookupWhite, IdxOuter2, (PosScoreRes - PosScoreRes2));
                            Data.ReplaceItem(MoveHashLookupWhite, IdxOuter2, (PiecePosHash - PiecePosHash2));
                        }
                    }
                    TargetIdx += 1;
                }
                SourceIdx += 1;
            }
            IdxOuter += 1;
        }
    }
}

define InvalidateMovePosLookup (warp=true)
{
    PrevMetaState = "";
}

WhenKeyPressed(k)
{
    list.Hide(Logfile);
}

WhenKeyPressed(l)
{
    list.Show(Logfile);
}

WhenKeyPressed(m)
{
    List.DeleteAll(Logfile);
}

define TTStoreBoard(string BoardHash)(string BoardScore1)(string BoardScore2)(string BoardScore3) (warp=true)
{
    HashBucket = ((BoardHash % List.Length(TTBoardHash)) + 1);
    CurrentIdx = "1";
    repeat until(((TTBoardHash[HashBucket] = BoardHash) OR (CurrentIdx > "5")))
    {
        HashBucket += 1;
        if ((HashBucket > List.Length(TTBoardHash)))
        {
            HashBucket = "1";
        }
        CurrentIdx += 1;
    }
    if (not((TTBoardHash[HashBucket] = BoardHash)))
    {
        HashBucket = ((BoardHash % List.Length(TTBoardHash)) + 1);
        CurrentIdx = "1";
        repeat until(((TTBoardHash[HashBucket] = "") OR (TTBoardAge[HashBucket] < (TTProbeCurrentAge - 2))))
        {
            HashBucket += 1;
            if ((HashBucket > List.Length(TTBoardHash)))
            {
                HashBucket = "1";
            }
            CurrentIdx += 1;
            if ((CurrentIdx > "5"))
            {
                Stop(this script);
            }
        }
    }
    Data.ReplaceItem(TTBoardAge, HashBucket, TTProbeCurrentAge);
    if (not((TTBoardHash[HashBucket] = BoardHash)))
    {
        Data.ReplaceItem(TTBoardHash, HashBucket, BoardHash);
        Data.ReplaceItem(TTBoardScore1, HashBucket, BoardScore1);
        Data.ReplaceItem(TTBoardScore2, HashBucket, BoardScore2);
        Data.ReplaceItem(TTBoardScore3, HashBucket, BoardScore3);
    }
    else
    {
        if (not((BoardScore1 = "")))
        {
            Data.ReplaceItem(TTBoardScore1, HashBucket, BoardScore1);
        }
        if (not((BoardScore2 = "")))
        {
            Data.ReplaceItem(TTBoardScore2, HashBucket, BoardScore2);
        }
        if (not((BoardScore3 = "")))
        {
            Data.ReplaceItem(TTBoardScore3, HashBucket, BoardScore3);
        }
    }
}

define TTProbeBoard(string BoardHash) (warp=true)
{
    TTProbeBoardScore1Res = "";
    CurrentIdx = "1";
    HashBucket = ((BoardHash % List.Length(TTBoardHash)) + 1);
    repeat until((TTBoardHash[HashBucket] = BoardHash))
    {
        HashBucket += 1;
        if ((HashBucket > List.Length(TTBoardHash)))
        {
            HashBucket = "1";
        }
        CurrentIdx += 1;
        if ((CurrentIdx > "5"))
        {
            TTProbeRes = "0";
            Stop(this script);
        }
    }
    Data.ReplaceItem(TTBoardAge, HashBucket, TTProbeCurrentAge);
    TTProbeRes = "1";
    TTProbeBoardScore1Res = TTBoardScore1[HashBucket];
    TTProbeBoardScore2Res = TTBoardScore2[HashBucket];
    TTProbeBoardScore3Res = TTBoardScore3[HashBucket];
}

define InitBoard (warp=true)
{
    True = "1";
    False = "0";
    IsInUndo = "0";
    ExecutionDepth = "0";
    IsExecutionRunning = "0";
    IsProfilerEnabled = "0";
    IsDebugMode = "0";
    IsEndgame = "0";
    IsEndgame2 = "0";
    IsImportedBoard = "0";
    BlackKingsideCastling = "0090";
    WhiteKingsideCastling = "0092";
    BlackQueensideCastling = "0091";
    WhiteQueensideCastling = "0093";
    HasBlackCastled = "0";
    HasWhiteKingMoved = "0";
    HasWhiteCastled = "0";
    HasBlackKingMoved = "0";
    HasWhiteRookKSMoved = "0";
    HasWhiteRookQSMoved = "0";
    HasBlackRookKSMoved = "0";
    HasBlackRookQSMoved = "0";
    GameMoves = "";
    LineMoveTypeStraight = "1";
    LineMoveTypeCross = "2";
    LookupMoveTypeKnight = "1";
    LookupMoveTypeKing = "2";
    IsGameSuspended = "0";
    PrevProgressUpdate = "0";
    Empty = "0";
    WhiteKing = "-20000";
    WhiteQueen = "-900";
    WhiteRook = "-500";
    WhiteBishop = "-330";
    WhiteKnight = "-310";
    WhitePawn = "-100";
    BlackKing = "20000";
    BlackQueen = "900";
    BlackRook = "500";
    BlackBishop = "330";
    BlackKnight = "310";
    BlackPawn = "100";
    Data.DeleteItem(PieceIdxLookup, all);
    Idx = "1";
    repeat (20000)
    {
        List.Add(PieceIdxLookup, "");
        Idx += 1;
    }
    Data.ReplaceItem(PieceIdxLookup, BlackPawn, "1");
    Data.ReplaceItem(PieceIdxLookup, BlackKnight, "2");
    Data.ReplaceItem(PieceIdxLookup, BlackBishop, "3");
    Data.ReplaceItem(PieceIdxLookup, BlackRook, "4");
    Data.ReplaceItem(PieceIdxLookup, BlackQueen, "5");
    Data.ReplaceItem(PieceIdxLookup, BlackKing, "6");
    call InitKingSafety;
    call InitMobilityBonusLookup;
    call InitCoordLookup;
    call InitHashLookup;
    call InitMoveLookup;
    call InitKnightSquare;
    call InitPawnSquare;
    call InitPawnSquareEndgame;
    call InitBishopSquare;
    call InitRookSquare;
    call InitQueenSquare;
    call InitKingSquare;
    call InitKingSquareEndgame;
    call InitPawnSquarePreCastling;
    call FillBoard;
    call InitOpeningBook;
    list.Hide(BoardHistory);
    list.Hide(GameMovesAN);
    list.Hide(ExportData);
    list.Hide(ExportMoves);
    CharsUpperCase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    Data.DeleteItem(CharsUpperCaseList, all);
    Idx = "1";
    repeat (List.Length(CharsUpperCaseList))
    {
        List.Add(CharsUpperCaseList, Operator.LetterOf(CharsUpperCase, Idx));
        Idx += 1;
    }
    Data.DeleteItem(BoardHistory, all);
    Data.DeleteItem(BoardHistoryHash, all);
    Data.DeleteItem(GameMovesAN, all);
    Data.DeleteItem(BoardAttackedByWhite, all);
    Data.DeleteItem(BoardAttackedByBlack, all);
    Data.DeleteItem(PieceMobility, all);
    Data.DeleteItem(BoardAttackedByWhitePiece, all);
    Data.DeleteItem(BoardAttackedByBlackPiece, all);
    repeat (64)
    {
        List.Add(BoardAttackedByWhite, "0");
        List.Add(BoardAttackedByBlack, "0");
        List.Add(PieceMobility, "0");
        List.Add(BoardAttackedByWhitePiece, "0");
        List.Add(BoardAttackedByBlackPiece, "0");
    }
    Data.DeleteItem(Alphas, all);
    Data.DeleteItem(Betas, all);
    Data.DeleteItem(AlphasOld, all);
    Data.DeleteItem(BetasOld, all);
    Data.DeleteItem(BestValues, all);
    Data.DeleteItem(MinMaxResults, all);
    Data.DeleteItem(MovesCount, all);
    Data.DeleteItem(MovesIdx, all);
    Data.DeleteItem(TargetPieces, all);
    Data.DeleteItem(PreviousBoardHash, all);
    Data.DeleteItem(MaxDepthL, all);
    Data.DeleteItem(ScoreTypes, all);
    Data.DeleteItem(PickMoveRes, all);
    Data.DeleteItem(PickPhase, all);
    Data.DeleteItem(PickedMove, all);
    Data.DeleteItem(BestMoves, all);
    Data.DeleteItem(CheckedState, all);
    Data.DeleteItem(PromotionPieces, all);
    Data.DeleteItem(TargetPiecesIdx, all);
    Data.DeleteItem(PosScoreDelta, all);
    Data.DeleteItem(BoardAttackedCalculated, all);
    Data.DeleteItem(PutsInCheck, all);
    Data.DeleteItem(PawnPromotionFile, all);
    Data.DeleteItem(EvalExtended1, all);
    Data.DeleteItem(PlyExtension, all);
    Data.DeleteItem(SourcePieces, all);
    Data.DeleteItem(EvalExtended2, all);
    Data.DeleteItem(EvalExtended3, all);
    Data.DeleteItem(BlackMobBonus, all);
    Data.DeleteItem(WhiteMobBonus, all);
    Data.DeleteItem(AppliedMove, all);
    Data.DeleteItem(CapturesDeltaSum, all);
    Data.DeleteItem(PosScoreDeltaSum, all);
    Data.DeleteItem(PutsInFork, all);
    Data.DeleteItem(BoardAttackedByBlackPieceSnapshot, all);
    Data.DeleteItem(BoardAttackedByBlackSnapshot, all);
    Data.DeleteItem(BoardAttackedByWhitePieceSnapshot, all);
    Data.DeleteItem(BoardAttackedByWhiteSnapshot, all);
    repeat (30)
    {
        List.Add(Alphas, "");
        List.Add(Betas, "");
        List.Add(AlphasOld, "");
        List.Add(BetasOld, "");
        List.Add(BestValues, "");
        List.Add(MinMaxResults, "");
        List.Add(MovesCount, "");
        List.Add(MovesIdx, "");
        List.Add(TargetPieces, "");
        List.Add(PreviousBoardHash, "");
        List.Add(ScoreTypes, "");
        List.Add(PickMoveRes, "");
        List.Add(PickPhase, "");
        List.Add(PickedMove, "");
        List.Add(BestMoves, "");
        List.Add(MaxDepthL, "");
        List.Add(CheckedState, "");
        List.Add(PromotionPieces, "");
        List.Add(TargetPiecesIdx, "");
        List.Add(PosScoreDelta, "");
        List.Add(BoardAttackedCalculated, "");
        List.Add(PutsInCheck, "");
        List.Add(PawnPromotionFile, "");
        List.Add(EvalExtended1, "");
        List.Add(PlyExtension, "");
        List.Add(SourcePieces, "");
        List.Add(EvalExtended2, "");
        List.Add(EvalExtended3, "");
        List.Add(BlackMobBonus, "");
        List.Add(WhiteMobBonus, "");
        List.Add(AppliedMove, "");
        List.Add(CapturesDeltaSum, "");
        List.Add(PosScoreDeltaSum, "");
        List.Add(PutsInFork, "");
        List.Add(BoardAttackedByBlackPieceSnapshot, "");
        List.Add(BoardAttackedByBlackSnapshot, "");
        List.Add(BoardAttackedByWhitePieceSnapshot, "");
        List.Add(BoardAttackedByWhiteSnapshot, "");
    }
    Data.DeleteItem(BlackPawnCount, all);
    Data.DeleteItem(WhitePawnCount, all);
    repeat (8)
    {
        List.Add(BlackPawnCount, "0");
        List.Add(WhitePawnCount, "0");
    }
    call InvalidateMovePosLookup;
    call AddBoardToHistory;
}

define InitBishopSquare (warp=true)
{
    Data.DeleteItem(BishopPieceSquare, all);
    call LoadList("-20, -18, -16, -14, -14, -16, -18, -20,-10, 11, 1, 1, 1, 1, 11, -10, 1, 11, 21, 26, 26, 21, 11, 1, 1, 21, 21, 26, 26, 21, 21, 1, 1, 1, 16, 21, 21, 16, 1, 1, -25, 6, 16, 11, 11, 16, 6, -25, -28, 11, 6, 1, 1, 6, 11, -28, -30, -25, -20, -20, -20, -20, -25, -30")("BishopPieceSquare");
}

define InitKingSquare (warp=true)
{
    Data.DeleteItem(KingPieceSquare, all);
    call LoadList("-55, -55, -60, -70, -70, -60, -55, -55, -55, -55, -60, -70, -70, -60, -55, -55, -55, -55, -60, -70, -70, -60, -55, -55, -55, -55, -60, -70, -70, -60, -55, -55,-50, -50, -55, -60, -60, -55, -50, -50, -40, -40, -45, -50, -50, -45, -40, -40, -30, -30, -30, -35, -35, -30, -30, -30, -20, 0, 0, -10, -10, 0, 0, -20")("KingPieceSquare");
}

define InitRookSquare (warp=true)
{
    Data.DeleteItem(RookPieceSquare, all);
    call LoadList("-8, -6, 2, 7, 7, 2, -6, -8,2, 2, 7, 12, 12, 7, 2, 2, -8, -6, 6, 10, 10, 6, -6, -8, -8, -6, 6, 8, 8, 6, -6, -8, -8, -6, 6, 7, 7, 6, -6, -8, -8, -6, 6, 7, 7, 6, -6, -8, -8, -6, 2, 7, 7, 2, -6, -8, -8, -6, 2, 7, 7, 2, -6, -8")("RookPieceSquare");
}

WhenBroadCastReceived(squareclicked)
{
    if (((IsExecutionRunning = "0") AND (IsGameSuspended = "0")))
    {
        if ((MoveFromIdx = "-1"))
        {
            if ((Board[SquareClickedIdx] < "0"))
            {
                MoveFromIdx = SquareClickedIdx;
                FromSquareIdx = SquareClickedIdx;
                Event.BroadcastAndWait("fromsquareselected");
            }
        }
        else
        {
            if ((MoveToIdx = "-1"))
            {
                MoveToIdx = SquareClickedIdx;
                ToSquareIdx = SquareClickedIdx;
                Event.BroadcastAndWait("tosquareselected");
                Event.Broadcast("usermove");
            }
            else
            {
                MoveFromIdx = "-1";
                MoveToIdx = "-1";
            }
            if ((IsModeJunior = "1"))
            {
                call DrawBoardAndWait;
            }
        }
    }
}

define InitPawnSquare (warp=true)
{
    Data.DeleteItem(PawnPieceSquare, all);
    call LoadList("0, 0, 0, 0, 0, 0, 0, 0, 7, 11, 23, 39, 39, 23, 11, 7,  -5, 1, 14, 29, 29, 14, 1, -5,  -14, -8, 6, 22, 22, 6, -8, -14,  -21, -16, -1, 14, 14, -1, -16, -21,  -26, -21, -6, 4, 4, -6, -21, -26,  -31, -26, -11, -1, -1, -11, -26, -31,  0, 0, 0, 0, 0, 0, 0, 0")("PawnPieceSquare");
}

define AddBoardToHistory (warp=true)
{
    call GetBoardString;
    List.Add(BoardHistory, GetBoardStringRes);
    call GetCurrentBoardHash;
    List.Add(BoardHistoryHash, CurrentBoardHash);
}

define RevertMove(num Depth) (warp=true)
{
    CurrentMove = AppliedMove[Depth];
    SourceIdx = floor((CurrentMove / 100));
    if ((SourceIdx > "0"))
    {
        TargetIdx = floor((CurrentMove % 100));
        Data.ReplaceItem(Board, SourceIdx, Board[TargetIdx]);
        Data.ReplaceItem(Board, TargetIdx, "0");
        Data.ReplaceItem(Board, TargetPiecesIdx[Depth], TargetPieces[Depth]);
        if ((PromotionPieces[Depth] > "0"))
        {
            Data.ReplaceItem(Board, SourceIdx, BlackPawn);
        }
        else
        {
            if ((PromotionPieces[Depth] < "0"))
            {
                Data.ReplaceItem(Board, SourceIdx, WhitePawn);
            }
        }
        if ((Board[SourceIdx] > "0"))
        {
            if ((Board[SourceIdx] = BlackPawn))
            {
                Data.ReplaceItem(BlackPawnCount, IdxToFile[SourceIdx], (BlackPawnCount[IdxToFile[SourceIdx]] + 1));
                Data.ReplaceItem(BlackPawnCount, IdxToFile[TargetIdx], (BlackPawnCount[IdxToFile[TargetIdx]] - 1));
            }
            else
            {
                if ((Board[SourceIdx] = BlackKing))
                {
                    BlackKingIdx = SourceIdx;
                }
            }
        }
        else
        {
            if ((Board[SourceIdx] = WhitePawn))
            {
                Data.ReplaceItem(WhitePawnCount, IdxToFile[SourceIdx], (WhitePawnCount[IdxToFile[SourceIdx]] + 1));
                Data.ReplaceItem(WhitePawnCount, IdxToFile[TargetIdx], (WhitePawnCount[IdxToFile[TargetIdx]] - 1));
            }
            else
            {
                if ((Board[SourceIdx] = WhiteKing))
                {
                    WhiteKingIdx = SourceIdx;
                }
            }
        }
        if ((TargetPieces[Depth] = BlackPawn))
        {
            Data.ReplaceItem(BlackPawnCount, IdxToFile[TargetPiecesIdx[Depth]], (BlackPawnCount[IdxToFile[TargetPiecesIdx[Depth]]] + 1));
        }
        else
        {
            if ((TargetPieces[Depth] = WhitePawn))
            {
                Data.ReplaceItem(WhitePawnCount, IdxToFile[TargetPiecesIdx[Depth]], (WhitePawnCount[IdxToFile[TargetPiecesIdx[Depth]]] + 1));
            }
        }
    }
    else
    {
        if ((CurrentMove = WhiteKingsideCastling))
        {
            Data.ReplaceItem(Board, VirtualBoard[61], WhiteKing);
            Data.ReplaceItem(Board, VirtualBoard[62], Empty);
            Data.ReplaceItem(Board, VirtualBoard[63], Empty);
            Data.ReplaceItem(Board, VirtualBoard[64], WhiteRook);
            WhiteKingIdx = VirtualBoard[61];
        }
        else
        {
            if ((CurrentMove = WhiteQueensideCastling))
            {
                Data.ReplaceItem(Board, VirtualBoard[57], WhiteRook);
                Data.ReplaceItem(Board, VirtualBoard[59], Empty);
                Data.ReplaceItem(Board, VirtualBoard[60], Empty);
                Data.ReplaceItem(Board, VirtualBoard[61], WhiteKing);
                WhiteKingIdx = VirtualBoard[61];
            }
            else
            {
                if ((CurrentMove = BlackKingsideCastling))
                {
                    Data.ReplaceItem(Board, VirtualBoard[5], BlackKing);
                    Data.ReplaceItem(Board, VirtualBoard[6], Empty);
                    Data.ReplaceItem(Board, VirtualBoard[7], Empty);
                    Data.ReplaceItem(Board, VirtualBoard[8], BlackRook);
                    BlackKingIdx = VirtualBoard[5];
                }
                else
                {
                    if ((CurrentMove = BlackQueensideCastling))
                    {
                        Data.ReplaceItem(Board, VirtualBoard[1], BlackRook);
                        Data.ReplaceItem(Board, VirtualBoard[4], Empty);
                        Data.ReplaceItem(Board, VirtualBoard[3], Empty);
                        Data.ReplaceItem(Board, VirtualBoard[5], BlackKing);
                        BlackKingIdx = VirtualBoard[5];
                    }
                }
            }
        }
    }
    CurrentBoardHash = PreviousBoardHash[Depth];
    Data.ReplaceItem(AppliedMove, Depth, "");
    Data.ReplaceItem(SourcePieces, Depth, "");
    Data.ReplaceItem(TargetPieces, Depth, "");
}

define GetSubstringRight(string Text)(num Count) (warp=true)
{
    call GetSubstring(Text)(((Variable.Length(Text) - Count) + 1))(Variable.Length(Text));
}

define InitQueenSquare (warp=true)
{
    Data.DeleteItem(QueenPieceSquare, all);
    call LoadList("4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,-6, -6, -1, 4, 4, -1, -6, -6, -16, -11, -1, 4, 4, -1, -11, -16, -26, -16, -6, 4, 4, -6, -16, -26")("QueenPieceSquare");
}

define InitOpeningBook (warp=true)
{
    Data.DeleteItem(OpeningMoves, all);
    List.Add(OpeningMoves, "533711276346122052362736463607225843021962531321");
    List.Add(OpeningMoves, "533711276346122062260312");
    List.Add(OpeningMoves, "5337112763460219523627364636072258431220");
    List.Add(OpeningMoves, "5337112751430722372922285236273643361220");
    List.Add(OpeningMoves, "5337112758430219554715236255061552441220");
    List.Add(OpeningMoves, "5337112758430219634612206226031200920722");
    List.Add(OpeningMoves, "533711276235132163460917");
    List.Add(OpeningMoves, "533711276235132158430917");
    List.Add(OpeningMoves, "533711275236273660360219");
    List.Add(OpeningMoves, "533711195236122837290330");
    List.Add(OpeningMoves, "53371119523612285843283743370330");
    List.Add(OpeningMoves, "533713296032021962351523");
    List.Add(OpeningMoves, "5337132960460722");
    List.Add(OpeningMoves, "5337132962350722");
    List.Add(OpeningMoves, "533713296346021962260917263307220092061362610090");
    List.Add(OpeningMoves, "533713296346021962260917263307226053102633420613");
    List.Add(OpeningMoves, "533713296346021962260917263307225236293600920613");
    List.Add(OpeningMoves, "533713296346021962260917263307225843061300921026");
    List.Add(OpeningMoves, "5337132963460219622609172619121946290436");
    List.Add(OpeningMoves, "533713296346021962260917261912190092033956481632523639466046");
    List.Add(OpeningMoves, "533713296346021962260917261912195843142252362936");
    List.Add(OpeningMoves, "533713296346021962260917261912195236293660360436");
    List.Add(OpeningMoves, "5337132963460219523629364636062759450422");
    List.Add(OpeningMoves, "533713296346021962350722463112283728102635260428");
    List.Add(OpeningMoves, "53371329634602196235072246311228372819253526111928191019");
    List.Add(OpeningMoves, "5337132963460219584307226226063400920090");
    List.Add(OpeningMoves, "5337132954382938634615316235313946290440");
    List.Add(OpeningMoves, "533713295438293863461531564031394629072252361220");
    List.Add(OpeningMoves, "5337132954382938623504406162062752362718");
    List.Add(OpeningMoves, "53371329543829386346061362350722");
    List.Add(OpeningMoves, "53371329543829386235072258431119");
    List.Add(OpeningMoves, "53371329543829385236044061531220634603395648394653464032");
    List.Add(OpeningMoves, "53371329543806276346122062350722");
    List.Add(OpeningMoves, "53371329543802196346122062350339");
    List.Add(OpeningMoves, "533702195236122837280428");
    List.Add(OpeningMoves, "533715235236061562351220");
    List.Add(OpeningMoves, "53371523523606156346122062350722");
    List.Add(OpeningMoves, "53371523523606155843072263460090");
    List.Add(OpeningMoves, "533713215236122837291127514302195438273643360418");
    List.Add(OpeningMoves, "5337132152361228372911275143021963460418");
    List.Add(OpeningMoves, "53371321523612285843063460442837");
    List.Add(OpeningMoves, "53371321523612285843063437291127");
    List.Add(OpeningMoves, "5337132152361228584306343728212859520722");
    List.Add(OpeningMoves, "5337132163461228372821285236072258431119");
    List.Add(OpeningMoves, "533712205236072258430212634613296253061300921119");
    List.Add(OpeningMoves, "533712205236072258430212634613296235162400921119");
    List.Add(OpeningMoves, "533712205236072258430212634613296235061300920090");
    List.Add(OpeningMoves, "5337122052360722584315235945061554460090");
    List.Add(OpeningMoves, "5337122052360722584315236235061563460219");
    List.Add(OpeningMoves, "523612286346072259312237");
    List.Add(OpeningMoves, "523612286346072253451127");
    List.Add(OpeningMoves, "523612286346021958431321533707223729221259310613");
    List.Add(OpeningMoves, "523612286346021959380339");
    List.Add(OpeningMoves, "523612286346072251351119");
    List.Add(OpeningMoves, "52361228634613215843072253450219");
    List.Add(OpeningMoves, "52361228634613215843072253372837");
    List.Add(OpeningMoves, "523612285135132158430722534509176244283544350634");
    List.Add(OpeningMoves, "5236122851351321584307225931021253450634");
    List.Add(OpeningMoves, "523612285345072262441321");
    List.Add(OpeningMoves, "523612285135111958430722");
    List.Add(OpeningMoves, "5236122851351119634607225843132159312835");
    List.Add(OpeningMoves, "523612285938072253451321");
    List.Add(OpeningMoves, "52360722513515235843061563460090");
    List.Add(OpeningMoves, "52360722513515236346061555470090");
    List.Add(OpeningMoves, "52360722513515236346061558430090");
    List.Add(OpeningMoves, "52360722513513215843063453450090");
    List.Add(OpeningMoves, "523607225135122063460339");
    List.Add(OpeningMoves, "523607225135152358430615533712206346009062531329");
    List.Add(OpeningMoves, "52360722634613215135101858430310");
    List.Add(OpeningMoves, "52361430513507225843132153450634");
    List.Add(OpeningMoves, "5236143055470722625515236346061500920090");
    List.Add(OpeningMoves, "523614306346072255471321");
    List.Add(OpeningMoves, "5236132151350722634610185547031062550613");
    List.Add(OpeningMoves, "52361321513507225843063460510090");
    List.Add(OpeningMoves, "523613215135122858430722");
    List.Add(OpeningMoves, "494113295345122851350722");
    List.Add(OpeningMoves, "4933132953370722");
    List.Add(OpeningMoves, "493313293325122856401127");
    List.Add(OpeningMoves, "504213295950021951350722");
    List.Add(OpeningMoves, "503413295950122051350722");
    List.Add(OpeningMoves, "514313295337072252440219");
    List.Add(OpeningMoves, "513513295843072255471228");
    List.Add(OpeningMoves, "513513296346021958430722");
    List.Add(OpeningMoves, "5446132955390440");
    List.Add(OpeningMoves, "5438132155390440");
    List.Add(OpeningMoves, "543812286346152355470615");
    List.Add(OpeningMoves, "5539132954380440");
    List.Add(OpeningMoves, "554712286255132951352836");
    List.Add(OpeningMoves, "5648132953370722");
    List.Add(OpeningMoves, "5648132949411228");
    List.Add(OpeningMoves, "564013295337072252440627");
    List.Add(OpeningMoves, "5640072251351127");
    List.Add(OpeningMoves, "5640072263460219");
    List.Add(OpeningMoves, "6346072251351523554706156255009000921220");
    List.Add(OpeningMoves, "634612285236072251351321");
    List.Add(OpeningMoves, "6346122858431321");
    Count = List.Length(OpeningMoves);
    Idx = "1";
    repeat (Count)
    {
        List.Add(OpeningMoves, "");
        if (((Variable.Length(OpeningMoves[Idx]) / 4) > "4"))
        {
            IdxSub = "1";
            repeat ((Variable.Length(OpeningMoves[Idx]) / 4))
            {
                call GetVirtualMove(Operator.Join(Operator.Join(Operator.LetterOf(OpeningMoves[Idx], IdxSub), Operator.LetterOf(OpeningMoves[Idx], (IdxSub + 1))), Operator.Join(Operator.LetterOf(OpeningMoves[Idx], (IdxSub + 2)), Operator.LetterOf(OpeningMoves[Idx], (IdxSub + 3)))));
                Data.ReplaceItem(OpeningMoves, last, Operator.Join(OpeningMoves[last], VirtualMove));
                IdxSub += 4;
            }
        }
        Idx += 1;
    }
}

define InitKnightSquare (warp=true)
{
    Data.DeleteItem(KnightPieceSquare, all);
    call LoadList("-30, -20, -15, -15, -15, -15, -20, -30,-20, 15, 20, 20, 20, 20, 15, -20,-20, 22, 30, 35, 35, 30, 22, -20,-20, 20, 25, 25, 25, 25, 20, -20,-20,  5, 20, 18, 18, 20,  5, -20,-20,  0, 15, 10, 10, 15,  0, -20, -15, -15, -5, 5,  5, -5, -15, -15, -35, -10,-12,-7, -7,-12, -10, -35")("KnightPieceSquare");
}

define EvaluateBoardExtended1(string Depth) (warp=true)
{
    if ((IsProfilerEnabled > "0"))
    {
        call Profile_MethodEnter((240 + Depth));
    }
    call TTProbeBoard(CurrentBoardHash);
    if (((TTProbeRes = "1") AND not((TTProbeBoardScore1Res = ""))))
    {
        EvalExtendedResult1 = TTProbeBoardScore1Res;
        if ((IsProfilerEnabled > "0"))
        {
            call Profile_MethodExit((240 + Depth));
        }
        Stop(this script);
    }
    BlackKingEndgameTargetIdx = "0";
    WhiteKingEndgameTargetIdx = "0";
    EvalExtendedResult1 = "0";
    Data.DeleteItem(PawnAdvancePerFile, all);
    repeat (32)
    {
        List.Add(PawnAdvancePerFile, "0");
    }
    Data.DeleteItem(BlackRookForwardRank, all);
    Data.DeleteItem(WhiteRookForwardRank, all);
    repeat (8)
    {
        List.Add(BlackRookForwardRank, "0");
        List.Add(WhiteRookForwardRank, "0");
    }
    Idx = "1";
    repeat (64)
    {
        CurrentPiece = Board[Idx];
        if ((CurrentPiece = BlackPawn))
        {
            File = IdxToFile[Idx];
            Rank = IdxToRank[Idx];
            if ((Idx > "16"))
            {
                IsProtected = "0";
                if (((File > "1") AND (Board[(Idx - 9)] = BlackPawn)))
                {
                    IsProtected = "1";
                }
                else
                {
                    if (((File < "8") AND (Board[(Idx - 7)] = BlackPawn)))
                    {
                        IsProtected = "1";
                    }
                }
                if ((IsProtected = "1"))
                {
                    if ((Board[(Idx + 8)] = WhitePawn))
                    {
                        EvalExtendedResult1 += (4 * ((Rank - 2) * (IsEndgame + 1)));
                    }
                    else
                    {
                        EvalExtendedResult1 += (6 * ((Rank - 2) * (IsEndgame + 1)));
                    }
                }
            }
            if (((PawnAdvancePerFile[(File + 16)] = "0") OR (Rank < PawnAdvancePerFile[(File + 16)])))
            {
                Data.ReplaceItem(PawnAdvancePerFile, (File + 16), Rank);
            }
            if ((Rank > PawnAdvancePerFile[(File + 24)]))
            {
                Data.ReplaceItem(PawnAdvancePerFile, (File + 24), Rank);
            }
        }
        else
        {
            if ((CurrentPiece = WhitePawn))
            {
                File = IdxToFile[Idx];
                Rank = IdxToRank[Idx];
                if ((Idx < "49"))
                {
                    IsProtected = "0";
                    if (((File > "1") AND (Board[(Idx + 7)] = WhitePawn)))
                    {
                        IsProtected = "1";
                    }
                    else
                    {
                        if (((File < "8") AND (Board[(Idx + 9)] = WhitePawn)))
                        {
                            IsProtected = "1";
                        }
                    }
                    if ((IsProtected = "1"))
                    {
                        if ((Board[(Idx - 8)] = BlackPawn))
                        {
                            EvalExtendedResult1 += (-4 * ((7 - Rank) * (IsEndgame + 1)));
                        }
                        else
                        {
                            EvalExtendedResult1 += (-6 * ((7 - Rank) * (IsEndgame + 1)));
                        }
                    }
                }
                if ((Rank > PawnAdvancePerFile[File]))
                {
                    Data.ReplaceItem(PawnAdvancePerFile, File, Rank);
                }
                if (((PawnAdvancePerFile[(File + 8)] = "0") OR (Rank < PawnAdvancePerFile[(File + 8)])))
                {
                    Data.ReplaceItem(PawnAdvancePerFile, (File + 8), Rank);
                }
            }
            else
            {
                if ((CurrentPiece = BlackRook))
                {
                    if (((BlackRookForwardRank[IdxToFile[Idx]] = "0") OR (BlackRookForwardRank[IdxToFile[Idx]] < IdxToRank[Idx])))
                    {
                        Data.ReplaceItem(BlackRookForwardRank, IdxToFile[Idx], IdxToRank[Idx]);
                    }
                }
                else
                {
                    if ((CurrentPiece = WhiteRook))
                    {
                        if (((WhiteRookForwardRank[IdxToFile[Idx]] = "0") OR (WhiteRookForwardRank[IdxToFile[Idx]] > IdxToRank[Idx])))
                        {
                            Data.ReplaceItem(WhiteRookForwardRank, IdxToFile[Idx], IdxToRank[Idx]);
                        }
                    }
                }
            }
        }
        Idx += 1;
    }
    Idx = "1";
    BlackRank = "1";
    WhiteRank = "8";
    repeat (8)
    {
        if ((IsEndgame = "1"))
        {
            WhitePawnBackwardRank = PawnAdvancePerFile[Idx];
            WhitePawnForwardRank = PawnAdvancePerFile[(Idx + 8)];
            BlackPawnBackwardRank = PawnAdvancePerFile[(Idx + 16)];
            BlackPawnForwardRank = PawnAdvancePerFile[(Idx + 24)];
            if (((WhitePawnForwardRank < "5") AND (WhitePawnForwardRank > "0")))
            {
                if (((WhitePawnForwardRank < BlackPawnBackwardRank) OR (BlackPawnBackwardRank = "0")))
                {
                    EvalExtendedResult1 += (-10 * (5 - WhitePawnForwardRank));
                    LeftOppPawnRank = PawnAdvancePerFile[((Idx + 16) - 1)];
                    RightOppPawnRank = PawnAdvancePerFile[((Idx + 16) + 1)];
                    if (((((Idx = "1") OR (LeftOppPawnRank = "0")) OR (WhitePawnForwardRank < LeftOppPawnRank)) AND (((Idx = "8") OR (RightOppPawnRank = "0")) OR (WhitePawnForwardRank < RightOppPawnRank))))
                    {
                        if (not((PawnPromotionFile[2] = Idx)))
                        {
                            EvalExtendedResult1 += (-15 * (5 - WhitePawnForwardRank));
                        }
                        if (((BlackKingEndgameTargetIdx = "0") OR (WhitePawnForwardRank < WhiteRank)))
                        {
                            WhiteRank = WhitePawnForwardRank;
                            BlackKingEndgameTargetIdx = (0 + Idx);
                        }
                    }
                }
            }
            if ((BlackPawnForwardRank > "4"))
            {
                if ((BlackPawnForwardRank > WhitePawnBackwardRank))
                {
                    EvalExtendedResult1 += (10 * (BlackPawnForwardRank - 4));
                    LeftOppPawnRank = PawnAdvancePerFile[(Idx - 1)];
                    RightOppPawnRank = PawnAdvancePerFile[(Idx + 1)];
                    if (((((Idx = "1") OR (LeftOppPawnRank = "0")) OR (BlackPawnForwardRank > LeftOppPawnRank)) AND (((Idx = "8") OR (RightOppPawnRank = "0")) OR (BlackPawnForwardRank > RightOppPawnRank))))
                    {
                        if (not((PawnPromotionFile[1] = Idx)))
                        {
                            EvalExtendedResult1 += (15 * (BlackPawnForwardRank - 4));
                        }
                        if (((WhiteKingEndgameTargetIdx = "0") OR (BlackPawnForwardRank > BlackRank)))
                        {
                            BlackRank = BlackPawnForwardRank;
                            WhiteKingEndgameTargetIdx = (56 + Idx);
                        }
                    }
                }
            }
        }
        if ((BlackPawnCount[Idx] > "1"))
        {
            EvalExtendedResult1 += (-30 * (BlackPawnCount[Idx] - 1));
        }
        if ((WhitePawnCount[Idx] > "1"))
        {
            EvalExtendedResult1 += (30 * (WhitePawnCount[Idx] - 1));
        }
        Idx += 1;
    }
    if (((IsEndgame = "0") OR ((BlackMinorCount > "2") OR (BlackQueenCount > "0"))))
    {
        KingProtection = "0";
        KingRank = IdxToRank[BlackKingIdx];
        KingFile = IdxToFile[BlackKingIdx];
        if ((KingFile = "1"))
        {
            KingFile = "2";
        }
        else
        {
            if ((KingFile = "8"))
            {
                KingFile = "7";
            }
        }
        File = (KingFile - 1);
        repeat (3)
        {
            WhitePawnForwardRank = PawnAdvancePerFile[(File + 8)];
            BlackPawnBackwardRank = PawnAdvancePerFile[(File + 16)];
            if (((BlackPawnBackwardRank > "0") AND (KingRank < BlackPawnBackwardRank)))
            {
                KingProtection += PawnShelter[(((File - 1) * 8) + BlackPawnBackwardRank)];
            }
            else
            {
                KingProtection += PawnShelter[(((File - 1) * 8) + 1)];
            }
            if (((WhitePawnForwardRank > "0") AND (KingRank < WhitePawnForwardRank)))
            {
                if (((BlackPawnBackwardRank > "0") AND (BlackPawnBackwardRank < WhitePawnForwardRank)))
                {
                    KingProtection += (0 - floor((PawnStorm[(((File - 1) * 8) + WhitePawnForwardRank)] / 2)));
                }
                else
                {
                    KingProtection += (0 - PawnStorm[(((File - 1) * 8) + WhitePawnForwardRank)]);
                }
            }
            else
            {
                KingProtection += (0 - PawnStorm[(((File - 1) * 8) + 1)]);
            }
            if (((WhiteRookForwardRank[File] > "0") AND (WhiteQueenCount > "0")))
            {
                if (((BlackPawnCount[File] = "0") AND (WhiteRookForwardRank[File] < WhitePawnForwardRank)))
                {
                    KingProtection += -50;
                }
            }
            File += 1;
        }
        EvalExtendedResult1 += KingProtection;
    }
    if (((IsEndgame = "0") OR ((WhiteMinorCount > "2") OR (WhiteQueenCount > "0"))))
    {
        KingProtection = "0";
        KingRank = IdxToRank[WhiteKingIdx];
        KingFile = IdxToFile[WhiteKingIdx];
        if ((KingFile = "1"))
        {
            KingFile = "2";
        }
        else
        {
            if ((KingFile = "8"))
            {
                KingFile = "7";
            }
        }
        File = (KingFile - 1);
        repeat (3)
        {
            WhitePawnBackwardRank = PawnAdvancePerFile[File];
            BlackPawnForwardRank = PawnAdvancePerFile[(File + 24)];
            if (((WhitePawnBackwardRank > "0") AND (KingRank > WhitePawnBackwardRank)))
            {
                KingProtection += PawnShelter[(((File - 1) * 8) + (9 - WhitePawnBackwardRank))];
            }
            else
            {
                KingProtection += PawnShelter[(((File - 1) * 8) + 1)];
            }
            if (((BlackPawnForwardRank > "0") AND (KingRank > BlackPawnForwardRank)))
            {
                if (((WhitePawnBackwardRank > "0") AND (WhitePawnBackwardRank > BlackPawnForwardRank)))
                {
                    KingProtection += (0 - floor((PawnStorm[(((File - 1) * 8) + (9 - BlackPawnForwardRank))] / 2)));
                }
                else
                {
                    KingProtection += (0 - PawnStorm[(((File - 1) * 8) + (9 - BlackPawnForwardRank))]);
                }
            }
            else
            {
                KingProtection += (0 - PawnStorm[(((File - 1) * 8) + 1)]);
            }
            if (((BlackRookForwardRank[File] > "0") AND (BlackQueenCount > "0")))
            {
                if (((WhitePawnCount[File] = "0") AND (BlackPawnForwardRank < BlackRookForwardRank[File])))
                {
                    KingProtection += -50;
                }
            }
            File += 1;
        }
        EvalExtendedResult1 += (0 - KingProtection);
    }
    if (((IsEndgame = "1") AND ((PawnPromotionFile[1] = "") AND (PawnPromotionFile[2] = ""))))
    {
        if (((BlackKingEndgameTargetIdx = "0") OR (((BlackQueenCount * 3) + BlackMinorCount) > ((WhiteQueenCount * 3) + WhiteMinorCount))))
        {
            BlackKingEndgameTargetIdx = WhiteKingEndgameTargetIdx;
        }
        if (((WhiteKingEndgameTargetIdx = "0") OR (((WhiteQueenCount * 3) + WhiteMinorCount) > ((BlackQueenCount * 3) + BlackMinorCount))))
        {
            WhiteKingEndgameTargetIdx = BlackKingEndgameTargetIdx;
        }
        if (not((BlackKingEndgameTargetIdx = "0")))
        {
            Delta = abs((IdxToRank[BlackKingEndgameTargetIdx] - IdxToRank[BlackKingIdx]));
            if ((Delta < abs((IdxToFile[BlackKingEndgameTargetIdx] - IdxToFile[BlackKingIdx]))))
            {
                Delta = abs((IdxToFile[BlackKingEndgameTargetIdx] - IdxToFile[BlackKingIdx]));
            }
            EvalExtendedResult1 += (-25 * Delta);
        }
        if (not((WhiteKingEndgameTargetIdx = "0")))
        {
            Delta = abs((IdxToRank[WhiteKingEndgameTargetIdx] - IdxToRank[WhiteKingIdx]));
            if ((Delta < abs((IdxToFile[WhiteKingEndgameTargetIdx] - IdxToFile[WhiteKingIdx]))))
            {
                Delta = abs((IdxToFile[WhiteKingEndgameTargetIdx] - IdxToFile[WhiteKingIdx]));
            }
            EvalExtendedResult1 += (25 * Delta);
        }
        if ((IsEndgame2 = "1"))
        {
            Delta = abs((IdxToRank[WhiteKingIdx] - IdxToRank[BlackKingIdx]));
            if ((Delta < abs((IdxToFile[WhiteKingIdx] - IdxToFile[BlackKingIdx]))))
            {
                Delta = abs((IdxToFile[WhiteKingIdx] - IdxToFile[BlackKingIdx]));
            }
            if ((((WhiteQueenCount + WhiteMinorCount) = "0") AND (BlackKingEndgameTargetIdx = "0")))
            {
                EvalExtendedResult1 += (-35 * Delta);
            }
            if ((((BlackQueenCount + BlackMinorCount) = "0") AND (WhiteKingEndgameTargetIdx = "0")))
            {
                EvalExtendedResult1 += (35 * Delta);
            }
        }
    }
    call TTStoreBoard(CurrentBoardHash)(EvalExtendedResult1)("")("");
    if ((IsProfilerEnabled > "0"))
    {
        call Profile_MethodExit((240 + Depth));
    }
}

define GetTargetIdx(num SourceIdx)(num DeltaX)(num DeltaY) (warp=true)
{
    GetTargetIdxRes = "-1";
    X = (IdxToFile[SourceIdx] + DeltaX);
    if (((X > "0") AND (X < "9")))
    {
        Y = (IdxToRank[SourceIdx] + DeltaY);
        if (((Y > "0") AND (Y < "9")))
        {
            GetTargetIdxRes = (X + ((Y - 1) * 8));
        }
    }
}

define AlphaBetaMinMax(string Alpha)(string Beta)(string MinDepth)(string MaxDepth)(bool InitialDeepening)(string QuiescenceDepth)(bool ShowProgress) (warp=true)
{
    call OnScoreCalc(0)(MinDepth)((MaxDepth - 1))(("1" = "0"));
    Data.ReplaceItem(Alphas, MinDepth, Alpha);
    Data.ReplaceItem(Betas, MinDepth, Beta);
    call AlphaBetaMinMaxImpl(MinDepth)(MinDepth)(MaxDepth)(InitialDeepening)(QuiescenceDepth)(("1" = "0"))(("1" = "0"))(ShowProgress);
}

define IsStringEqual(string String1)(num StartIdx1)(string String2)(num StartIdx2) (warp=true)
{
    IsStringEqualRes = "1";
    Offset = "0";
    repeat until(((Offset = Variable.Length(String1)) OR (Offset = Variable.Length(String2))))
    {
        if (not((Operator.LetterOf(String1, (StartIdx1 + Offset)) = Operator.LetterOf(String2, (StartIdx2 + Offset)))))
        {
            IsStringEqualRes = "0";
            Stop(this script);
        }
        Offset += 1;
    }
}

define PickMove(string Depth)(string MaxDepth)(bool InitialDeepening)(bool Quiescence)(bool PrevQuiescence) (warp=true)
{
    if ((PickPhase[Depth] = "1"))
    {
        Data.ReplaceItem(PickedMove, Depth, "");
        call ClearMoveList(Depth);
        if ((Depth > "1"))
        {
            call TTProbeNode(CurrentBoardHash)(Depth);
            if ((TTProbeRes = "1"))
            {
                if ((IsProfilerEnabled > "0"))
                {
                    call Profile_IncCounter((210 + Depth));
                }
                if ((not((TTProbeBoardAttackedByOpp = "")) AND not((TTProbeBoardAttackedByOppPiece = ""))))
                {
                    if (((Depth % 2) = "1"))
                    {
                        Data.ReplaceItem(BoardAttackedByWhiteSnapshot, Depth, TTProbeBoardAttackedByOpp);
                        Data.ReplaceItem(BoardAttackedByWhitePieceSnapshot, Depth, TTProbeBoardAttackedByOppPiece);
                        if (("1" = "0"))
                        {
                            Idx = "1";
                            repeat (64)
                            {
                                Data.ReplaceItem(BoardAttackedByWhite, Idx, Operator.LetterOf(TTProbeBoardAttackedByOpp, Idx));
                                Data.ReplaceItem(BoardAttackedByWhitePiece, Idx, Operator.LetterOf(TTProbeBoardAttackedByOppPiece, Idx));
                                Idx += 1;
                            }
                        }
                    }
                    else
                    {
                        Data.ReplaceItem(BoardAttackedByBlackSnapshot, Depth, TTProbeBoardAttackedByOpp);
                        Data.ReplaceItem(BoardAttackedByBlackPieceSnapshot, Depth, TTProbeBoardAttackedByOppPiece);
                        if (("1" = "0"))
                        {
                            Idx = "1";
                            repeat (64)
                            {
                                Data.ReplaceItem(BoardAttackedByBlack, Idx, Operator.LetterOf(TTProbeBoardAttackedByOpp, Idx));
                                Data.ReplaceItem(BoardAttackedByBlackPiece, Idx, Operator.LetterOf(TTProbeBoardAttackedByOppPiece, Idx));
                                Idx += 1;
                            }
                        }
                    }
                    Data.ReplaceItem(BoardAttackedCalculated, Depth, "1");
                }
                if ((Variable.Length(TTProbeBestMoveRes) = "6"))
                {
                    Data.ReplaceItem(PawnPromotionFile, Depth, IdxToFile[(floor(TTProbeBestMoveRes) % 100)]);
                }
                if (not((TTProbeCheckedRes = "")))
                {
                    Data.ReplaceItem(CheckedState, Depth, TTProbeCheckedRes);
                }
                if (not((TTProbeBlackMobRes = "")))
                {
                    Data.ReplaceItem(BlackMobBonus, Depth, TTProbeBlackMobRes);
                }
                if (not((TTProbeWhiteMobRes = "")))
                {
                    Data.ReplaceItem(WhiteMobBonus, Depth, TTProbeWhiteMobRes);
                }
                if (not((TTProbeBestMoveRes = "")))
                {
                    TargetIdx = floor((TTProbeBestMoveRes % 100));
                    if ((not(Quiescence) OR (Quiescence AND not((Board[TargetIdx] = "0")))))
                    {
                        Data.ReplaceItem(PickedMove, Depth, TTProbeBestMoveRes);
                        call AddMoveToList(TTProbeBestMoveRes)("0")(Depth);
                        Data.ReplaceItem(MovesIdx, Depth, "1");
                        call ApplyMove(Depth);
                        Data.ReplaceItem(PickPhase, Depth, "2");
                        Data.ReplaceItem(PickMoveRes, Depth, "1");
                        Stop(this script);
                    }
                }
            }
        }
        Data.ReplaceItem(PickPhase, Depth, "2");
    }
    if ((PickPhase[Depth] = "2"))
    {
        if ((Depth = "1"))
        {
            call CalcBoardAttackedByMove((Depth + 2));
            call StoreAttackInfo((Depth + 2))(Depth);
        }
        if ((not(Quiescence) OR ((not(PrevQuiescence) AND (IsScratch3 = "0")) AND ("1" = "0"))))
        {
            if ((BoardAttackedCalculated[Depth] = "0"))
            {
                call CalcBoardAttackedByMove((Depth + 1));
                call StoreAttackInfo((Depth + 1))(Depth);
                if (((Depth % 2) = "1"))
                {
                    Data.ReplaceItem(CheckedState, Depth, IsBlackChecked);
                }
                else
                {
                    Data.ReplaceItem(CheckedState, Depth, IsWhiteChecked);
                }
                Data.ReplaceItem(BoardAttackedCalculated, Depth, "1");
            }
        }
        CalculateMovesRequiresAttackRecalc = "0";
        call CalculateMovesImpl(Depth)(("1" = "0"))(Quiescence);
        if ((Quiescence AND (CalculateMovesRequiresAttackRecalc = "1")))
        {
            call CalcBoardAttackedByMove((Depth + 1));
            call StoreAttackInfo((Depth + 1))(Depth);
            Data.ReplaceItem(BoardAttackedCalculated, Depth, "1");
            if (((Depth % 2) = "1"))
            {
                Data.ReplaceItem(CheckedState, Depth, IsBlackChecked);
            }
            else
            {
                Data.ReplaceItem(CheckedState, Depth, IsWhiteChecked);
            }
            call CalculateMovesImpl(Depth)(("1" = "0"))(Quiescence);
        }
        if (InitialDeepening)
        {
            if ((Depth = "1"))
            {
                Data.DeleteItem(DeepeningScore, all);
                repeat (List.Length(Moves1Score))
                {
                    List.Add(DeepeningScore, "");
                }
                Data.DeleteItem(DeepeningScoreOrderMap, all);
                repeat (List.Length(Moves1Score))
                {
                    List.Add(DeepeningScoreOrderMap, "");
                }
            }
        }
        else
        {
            if ((Depth = "1"))
            {
                call EvaluateBoard;
                Idx = "1";
                repeat (List.Length(Moves1Score))
                {
                    if ((DeepeningScore[Idx] = ""))
                    {
                        Data.ReplaceItem(Moves1Score, Idx, (EvalResult + Moves1Score[Idx]));
                    }
                    else
                    {
                        Data.ReplaceItem(Moves1Score, Idx, DeepeningScore[Idx]);
                    }
                    Idx += 1;
                }
            }
        }
        if ((MovesCount[Depth] > "1"))
        {
            call SortMoveList(Depth);
        }
        Data.ReplaceItem(MovesIdx, Depth, "1");
        call GetCurrentMove(Depth);
        BoardAttackedString = "";
        BoardAttackedString2 = "";
        if ((BoardAttackedCalculated[Depth] = "1"))
        {
            if (((Depth % 2) = "1"))
            {
                BoardAttackedString = BoardAttackedByWhiteSnapshot[Depth];
                BoardAttackedString2 = BoardAttackedByWhitePieceSnapshot[Depth];
            }
            else
            {
                BoardAttackedString = BoardAttackedByBlackSnapshot[Depth];
                BoardAttackedString2 = BoardAttackedByBlackPieceSnapshot[Depth];
            }
        }
        if (Quiescence)
        {
            call TTStoreNode(CurrentBoardHash)(Depth)("")(CurrentMove)("")("")("-1")("")("")(BoardAttackedString)(BoardAttackedString2);
        }
        else
        {
            call TTStoreNode(CurrentBoardHash)(Depth)("")(CurrentMove)("")("")("0")("")("")(BoardAttackedString)(BoardAttackedString2);
        }
        Data.ReplaceItem(MovesIdx, Depth, "0");
        Data.ReplaceItem(PickPhase, Depth, "3");
    }
    if ((PickPhase[Depth] = "3"))
    {
        Data.ReplaceItem(MovesIdx, Depth, (MovesIdx[Depth] + 1));
        if (not((MovesIdx[Depth] > MovesCount[Depth])))
        {
            call GetCurrentMove(Depth);
            if ((CurrentMove = PickedMove[Depth]))
            {
                Data.ReplaceItem(MovesIdx, Depth, (MovesIdx[Depth] + 1));
            }
            if (not((MovesIdx[Depth] > MovesCount[Depth])))
            {
                call ApplyMove(Depth);
                Data.ReplaceItem(PickMoveRes, Depth, "1");
                Stop(this script);
            }
        }
        Data.ReplaceItem(PickPhase, Depth, "4");
        Data.ReplaceItem(PickMoveRes, Depth, "0");
    }
    Data.ReplaceItem(PickMoveRes, Depth, "0");
}

define SortMoveList(string Depth) (warp=true)
{
    if ((IsProfilerEnabled > "0"))
    {
        call Profile_MethodEnter((300 + Depth));
    }
    if ((Depth < "6"))
    {
        if ((Depth = "5"))
        {
            List.DeleteAll(SortedList);
            List.DeleteAll(SortedList2);
            Idx = "1";
            repeat (List.Length(Moves5))
            {
                List.Add(SortedList, Moves5Score[Idx]);
                List.Add(SortedList2, Moves5[Idx]);
                Idx += 1;
            }
            call SortList;
            Idx = "1";
            IdxSub = List.Length(SortedList2);
            repeat (List.Length(SortedList2))
            {
                Data.ReplaceItem(Moves5, Idx, SortedList2[IdxSub]);
                Idx += 1;
                IdxSub += -1;
            }
        }
        else
        {
            if ((Depth = "4"))
            {
                List.DeleteAll(SortedList);
                List.DeleteAll(SortedList2);
                Idx = "1";
                repeat (List.Length(Moves4))
                {
                    List.Add(SortedList, Moves4Score[Idx]);
                    List.Add(SortedList2, Moves4[Idx]);
                    Idx += 1;
                }
                call SortList;
                Idx = "1";
                repeat (List.Length(SortedList2))
                {
                    Data.ReplaceItem(Moves4, Idx, SortedList2[Idx]);
                    Idx += 1;
                }
            }
            else
            {
                if ((Depth = "3"))
                {
                    List.DeleteAll(SortedList);
                    List.DeleteAll(SortedList2);
                    Idx = "1";
                    repeat (List.Length(Moves3))
                    {
                        List.Add(SortedList, Moves3Score[Idx]);
                        List.Add(SortedList2, Moves3[Idx]);
                        Idx += 1;
                    }
                    call SortList;
                    Idx = "1";
                    IdxSub = List.Length(SortedList2);
                    repeat (List.Length(SortedList2))
                    {
                        Data.ReplaceItem(Moves3, Idx, SortedList2[IdxSub]);
                        Idx += 1;
                        IdxSub += -1;
                    }
                }
                else
                {
                    if ((Depth = "2"))
                    {
                        List.DeleteAll(SortedList);
                        List.DeleteAll(SortedList2);
                        Idx = "1";
                        repeat (List.Length(Moves2))
                        {
                            List.Add(SortedList, Moves2Score[Idx]);
                            List.Add(SortedList2, Moves2[Idx]);
                            Idx += 1;
                        }
                        call SortList;
                        Idx = "1";
                        repeat (List.Length(SortedList2))
                        {
                            Data.ReplaceItem(Moves2, Idx, SortedList2[Idx]);
                            Idx += 1;
                        }
                    }
                    else
                    {
                        if ((Depth = "1"))
                        {
                            List.DeleteAll(SortedList);
                            List.DeleteAll(SortedList2);
                            Idx = "1";
                            repeat (List.Length(Moves1))
                            {
                                List.Add(SortedList, Moves1Score[Idx]);
                                List.Add(SortedList2, Moves1[Idx]);
                                Idx += 1;
                            }
                            call SortList;
                            Idx = "1";
                            IdxSub = List.Length(SortedList2);
                            repeat (List.Length(SortedList2))
                            {
                                Data.ReplaceItem(DeepeningScoreOrderMap, Idx, List.IndexOf(Moves1, SortedList2[IdxSub]));
                                Idx += 1;
                                IdxSub += -1;
                            }
                            Idx = "1";
                            IdxSub = List.Length(SortedList2);
                            repeat (List.Length(SortedList2))
                            {
                                Data.ReplaceItem(Moves1, Idx, SortedList2[IdxSub]);
                                Idx += 1;
                                IdxSub += -1;
                            }
                        }
                    }
                }
            }
        }
    }
    else
    {
        if ((Depth < "11"))
        {
            if ((Depth = "6"))
            {
                List.DeleteAll(SortedList);
                List.DeleteAll(SortedList2);
                Idx = "1";
                repeat (List.Length(Moves6))
                {
                    List.Add(SortedList, Moves6Score[Idx]);
                    List.Add(SortedList2, Moves6[Idx]);
                    Idx += 1;
                }
                call SortList;
                Idx = "1";
                repeat (List.Length(SortedList2))
                {
                    Data.ReplaceItem(Moves6, Idx, SortedList2[Idx]);
                    Idx += 1;
                }
            }
            else
            {
                if ((Depth = "7"))
                {
                    List.DeleteAll(SortedList);
                    List.DeleteAll(SortedList2);
                    Idx = "1";
                    repeat (List.Length(Moves7))
                    {
                        List.Add(SortedList, Moves7Score[Idx]);
                        List.Add(SortedList2, Moves7[Idx]);
                        Idx += 1;
                    }
                    call SortList;
                    Idx = "1";
                    IdxSub = List.Length(SortedList2);
                    repeat (List.Length(SortedList2))
                    {
                        Data.ReplaceItem(Moves7, Idx, SortedList2[IdxSub]);
                        Idx += 1;
                        IdxSub += -1;
                    }
                }
                else
                {
                    if ((Depth = "8"))
                    {
                        List.DeleteAll(SortedList);
                        List.DeleteAll(SortedList2);
                        Idx = "1";
                        repeat (List.Length(Moves8))
                        {
                            List.Add(SortedList, Moves8Score[Idx]);
                            List.Add(SortedList2, Moves8[Idx]);
                            Idx += 1;
                        }
                        call SortList;
                        Idx = "1";
                        repeat (List.Length(SortedList2))
                        {
                            Data.ReplaceItem(Moves8, Idx, SortedList2[Idx]);
                            Idx += 1;
                        }
                    }
                    else
                    {
                        if ((Depth = "9"))
                        {
                            List.DeleteAll(SortedList);
                            List.DeleteAll(SortedList2);
                            Idx = "1";
                            repeat (List.Length(Moves9))
                            {
                                List.Add(SortedList, Moves9Score[Idx]);
                                List.Add(SortedList2, Moves9[Idx]);
                                Idx += 1;
                            }
                            call SortList;
                            Idx = "1";
                            IdxSub = List.Length(SortedList2);
                            repeat (List.Length(SortedList2))
                            {
                                Data.ReplaceItem(Moves9, Idx, SortedList2[IdxSub]);
                                Idx += 1;
                                IdxSub += -1;
                            }
                        }
                        else
                        {
                            if ((Depth = "10"))
                            {
                                List.DeleteAll(SortedList);
                                List.DeleteAll(SortedList2);
                                Idx = "1";
                                repeat (List.Length(Moves10))
                                {
                                    List.Add(SortedList, Moves10Score[Idx]);
                                    List.Add(SortedList2, Moves10[Idx]);
                                    Idx += 1;
                                }
                                call SortList;
                                Idx = "1";
                                repeat (List.Length(SortedList2))
                                {
                                    Data.ReplaceItem(Moves10, Idx, SortedList2[Idx]);
                                    Idx += 1;
                                }
                            }
                        }
                    }
                }
            }
        }
        else
        {
            if ((Depth = "11"))
            {
                List.DeleteAll(SortedList);
                List.DeleteAll(SortedList2);
                Idx = "1";
                repeat (List.Length(Moves11))
                {
                    List.Add(SortedList, Moves11Score[Idx]);
                    List.Add(SortedList2, Moves11[Idx]);
                    Idx += 1;
                }
                call SortList;
                Idx = "1";
                IdxSub = List.Length(SortedList2);
                repeat (List.Length(SortedList2))
                {
                    Data.ReplaceItem(Moves11, Idx, SortedList2[IdxSub]);
                    Idx += 1;
                    IdxSub += -1;
                }
            }
            else
            {
                if ((Depth = "12"))
                {
                    List.DeleteAll(SortedList);
                    List.DeleteAll(SortedList2);
                    Idx = "1";
                    repeat (List.Length(Moves12))
                    {
                        List.Add(SortedList, Moves12Score[Idx]);
                        List.Add(SortedList2, Moves12[Idx]);
                        Idx += 1;
                    }
                    call SortList;
                    Idx = "1";
                    repeat (List.Length(SortedList2))
                    {
                        Data.ReplaceItem(Moves12, Idx, SortedList2[Idx]);
                        Idx += 1;
                    }
                }
                else
                {
                    if ((Depth = "13"))
                    {
                        List.DeleteAll(SortedList);
                        List.DeleteAll(SortedList2);
                        Idx = "1";
                        repeat (List.Length(Moves13))
                        {
                            List.Add(SortedList, Moves13Score[Idx]);
                            List.Add(SortedList2, Moves13[Idx]);
                            Idx += 1;
                        }
                        call SortList;
                        Idx = "1";
                        IdxSub = List.Length(SortedList2);
                        repeat (List.Length(SortedList2))
                        {
                            Data.ReplaceItem(Moves13, Idx, SortedList2[IdxSub]);
                            Idx += 1;
                            IdxSub += -1;
                        }
                    }
                    else
                    {
                        if ((Depth = "14"))
                        {
                            List.DeleteAll(SortedList);
                            List.DeleteAll(SortedList2);
                            Idx = "1";
                            repeat (List.Length(Moves14))
                            {
                                List.Add(SortedList, Moves14Score[Idx]);
                                List.Add(SortedList2, Moves14[Idx]);
                                Idx += 1;
                            }
                            call SortList;
                            Idx = "1";
                            repeat (List.Length(SortedList2))
                            {
                                Data.ReplaceItem(Moves14, Idx, SortedList2[Idx]);
                                Idx += 1;
                            }
                        }
                        else
                        {
                            if ((Depth = "15"))
                            {
                                List.DeleteAll(SortedList);
                                List.DeleteAll(SortedList2);
                                Idx = "1";
                                repeat (List.Length(Moves15))
                                {
                                    List.Add(SortedList, Moves15Score[Idx]);
                                    List.Add(SortedList2, Moves15[Idx]);
                                    Idx += 1;
                                }
                                call SortList;
                                Idx = "1";
                                IdxSub = List.Length(SortedList2);
                                repeat (List.Length(SortedList2))
                                {
                                    Data.ReplaceItem(Moves15, Idx, SortedList2[IdxSub]);
                                    Idx += 1;
                                    IdxSub += -1;
                                }
                            }
                            else
                            {
                                if ((Depth = "16"))
                                {
                                    List.DeleteAll(SortedList);
                                    List.DeleteAll(SortedList2);
                                    Idx = "1";
                                    repeat (List.Length(Moves16))
                                    {
                                        List.Add(SortedList, Moves16Score[Idx]);
                                        List.Add(SortedList2, Moves16[Idx]);
                                        Idx += 1;
                                    }
                                    call SortList;
                                    Idx = "1";
                                    repeat (List.Length(SortedList2))
                                    {
                                        Data.ReplaceItem(Moves16, Idx, SortedList2[Idx]);
                                        Idx += 1;
                                    }
                                }
                                else
                                {
                                    if ((Depth = "17"))
                                    {
                                        List.DeleteAll(SortedList);
                                        List.DeleteAll(SortedList2);
                                        Idx = "1";
                                        repeat (List.Length(Moves17))
                                        {
                                            List.Add(SortedList, Moves17Score[Idx]);
                                            List.Add(SortedList2, Moves17[Idx]);
                                            Idx += 1;
                                        }
                                        call SortList;
                                        Idx = "1";
                                        IdxSub = List.Length(SortedList2);
                                        repeat (List.Length(SortedList2))
                                        {
                                            Data.ReplaceItem(Moves17, Idx, SortedList2[IdxSub]);
                                            Idx += 1;
                                            IdxSub += -1;
                                        }
                                    }
                                    else
                                    {
                                        if ((Depth = "18"))
                                        {
                                            List.DeleteAll(SortedList);
                                            List.DeleteAll(SortedList2);
                                            Idx = "1";
                                            repeat (List.Length(Moves18))
                                            {
                                                List.Add(SortedList, Moves18Score[Idx]);
                                                List.Add(SortedList2, Moves18[Idx]);
                                                Idx += 1;
                                            }
                                            call SortList;
                                            Idx = "1";
                                            repeat (List.Length(SortedList2))
                                            {
                                                Data.ReplaceItem(Moves18, Idx, SortedList2[Idx]);
                                                Idx += 1;
                                            }
                                        }
                                        else
                                        {
                                            if ((Depth = "19"))
                                            {
                                                List.DeleteAll(SortedList);
                                                List.DeleteAll(SortedList2);
                                                Idx = "1";
                                                repeat (List.Length(Moves19))
                                                {
                                                    List.Add(SortedList, Moves19Score[Idx]);
                                                    List.Add(SortedList2, Moves19[Idx]);
                                                    Idx += 1;
                                                }
                                                call SortList;
                                                Idx = "1";
                                                IdxSub = List.Length(SortedList2);
                                                repeat (List.Length(SortedList2))
                                                {
                                                    Data.ReplaceItem(Moves19, Idx, SortedList2[IdxSub]);
                                                    Idx += 1;
                                                    IdxSub += -1;
                                                }
                                            }
                                            else
                                            {
                                                if ((Depth = "20"))
                                                {
                                                    List.DeleteAll(SortedList);
                                                    List.DeleteAll(SortedList2);
                                                    Idx = "1";
                                                    repeat (List.Length(Moves20))
                                                    {
                                                        List.Add(SortedList, Moves20Score[Idx]);
                                                        List.Add(SortedList2, Moves20[Idx]);
                                                        Idx += 1;
                                                    }
                                                    call SortList;
                                                    Idx = "1";
                                                    repeat (List.Length(SortedList2))
                                                    {
                                                        Data.ReplaceItem(Moves20, Idx, SortedList2[Idx]);
                                                        Idx += 1;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if ((IsProfilerEnabled > "0"))
    {
        call Profile_MethodExit((300 + Depth));
    }
}

define AddMoveImpl(string SourceIdx)(string TargetIdx)(string Depth)(bool CalcAttackState)(bool CapturesOnly) (warp=true)
{
    if (CalcAttackState)
    {
        if ((Board[SourceIdx] > "0"))
        {
            Data.ReplaceItem(BoardAttackedByBlack, TargetIdx, (BoardAttackedByBlack[TargetIdx] + 1));
            if (((BoardAttackedByBlackPiece[TargetIdx] = "0") OR (BoardAttackedByBlackPiece[TargetIdx] > Board[SourceIdx])))
            {
                Data.ReplaceItem(BoardAttackedByBlackPiece, TargetIdx, Board[SourceIdx]);
            }
            if ((Board[TargetIdx] = WhiteKing))
            {
                IsWhiteChecked = "1";
            }
        }
        else
        {
            Data.ReplaceItem(BoardAttackedByWhite, TargetIdx, (BoardAttackedByWhite[TargetIdx] + 1));
            if (((BoardAttackedByWhitePiece[TargetIdx] = "0") OR (BoardAttackedByWhitePiece[TargetIdx] < Board[SourceIdx])))
            {
                Data.ReplaceItem(BoardAttackedByWhitePiece, TargetIdx, Board[SourceIdx]);
            }
            if ((Board[TargetIdx] = BlackKing))
            {
                IsBlackChecked = "1";
            }
        }
    }
    else
    {
        CurrentMove = ((SourceIdx * 100) + TargetIdx);
        if ((SourceIdx < "10"))
        {
            CurrentMove = Operator.Join("0", CurrentMove);
        }
        if ((abs(Board[SourceIdx]) = BlackPawn))
        {
            if (((IdxToRank[TargetIdx] = "1") OR (IdxToRank[TargetIdx] = "8")))
            {
                Data.ReplaceItem(PawnPromotionFile, Depth, IdxToFile[TargetIdx]);
                call AddSpecialMove(Operator.Join(CurrentMove, ".1"))(Depth);
                call AddSpecialMove(Operator.Join(CurrentMove, ".2"))(Depth);
                call AddSpecialMove(Operator.Join(CurrentMove, ".3"))(Depth);
                call AddSpecialMove(Operator.Join(CurrentMove, ".4"))(Depth);
                Stop(this script);
            }
        }
        else
        {
            if (not(CapturesOnly))
            {
                if (((Depth % 2) = "1"))
                {
                    if ((Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], TargetIdx) = "0"))
                    {
                        Data.ReplaceItem(PieceMobility, SourceIdx, (PieceMobility[SourceIdx] + 1));
                    }
                }
                else
                {
                    if ((Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], TargetIdx) = "0"))
                    {
                        Data.ReplaceItem(PieceMobility, SourceIdx, (PieceMobility[SourceIdx] + 1));
                    }
                }
            }
        }
        call GetMoveScore(Board[SourceIdx])(Board[TargetIdx])(SourceIdx)(TargetIdx)(CurrentMove)(Depth);
        call AddMoveToList(CurrentMove)(MoveScoreRes)(Depth);
    }
}

define AddLineMove(string SourceIdx)(string Depth)(bool CalcAttackState)(bool CapturesOnly)(bool LineMoveTypeStraight) (warp=true)
{
    SourcePieceOuter = Board[SourceIdx];
    IdxOuter = MoveLookupLineIndexOffset[SourceIdx];
    InvIdxOuter = "8";
    Count = "1";
    repeat until((Count > "32"))
    {
        if (LineMoveTypeStraight)
        {
            TargetIdxOuter = MoveLookupStraight[(IdxOuter + Count)];
        }
        else
        {
            TargetIdxOuter = MoveLookupCross[(IdxOuter + Count)];
        }
        if ((TargetIdxOuter = "-1"))
        {
            Count += InvIdxOuter;
            InvIdxOuter = "8";
        }
        else
        {
            if ((Board[TargetIdxOuter] = "0"))
            {
                if (not(CapturesOnly))
                {
                    call AddMoveImpl(SourceIdx)(TargetIdxOuter)(Depth)(CalcAttackState)(CapturesOnly);
                }
                Count += 1;
                InvIdxOuter += -1;
            }
            else
            {
                if (CalcAttackState)
                {
                    call AddMoveImpl(SourceIdx)(TargetIdxOuter)(Depth)(CalcAttackState)(CapturesOnly);
                }
                else
                {
                    if ((Board[TargetIdxOuter] > "0"))
                    {
                        if ((SourcePieceOuter < "0"))
                        {
                            call AddMoveImpl(SourceIdx)(TargetIdxOuter)(Depth)(CalcAttackState)(CapturesOnly);
                        }
                    }
                    else
                    {
                        if ((SourcePieceOuter > "0"))
                        {
                            call AddMoveImpl(SourceIdx)(TargetIdxOuter)(Depth)(CalcAttackState)(CapturesOnly);
                        }
                    }
                }
                Count += InvIdxOuter;
                InvIdxOuter = "8";
            }
        }
    }
}

define GetBoardString (warp=true)
{
    GetBoardStringRes = "";
    Idx = "1";
    repeat (64)
    {
        GetBoardStringRes = Operator.Join(GetBoardStringRes, Operator.Join(Board[Idx], ","));
        Idx += 1;
    }
}

WhenBroadCastReceived(progressvaluechangedinternal)
{
    Event.BroadcastAndWait("progressvaluechanged");
}

WhenBroadCastReceived(stageclicked)
{
    list.Hide(ExportData);
    list.Hide(ExportMoves);
    if ((IsExecutionRunning = "0"))
    {
        Looks.Say("");
    }
}

define GetSubstringLeft(string Text)(num Count) (warp=true)
{
    call GetSubstring(Text)(1)(Count);
}

define SortList (warp=true)
{
    call QuickSort;
}

call BinarySort

define DrawBoard (warp=true)
{
    ProgressValue = "0";
    Event.Broadcast("drawboard");
    Event.Broadcast("progressvaluechanged");
    Event.Broadcast("evaluationvaluechanged");
}

define GetSubstring(string Text)(num FromIdx)(num ToIdx) (warp=true)
{
    SubstringRes = "";
    IdxString = FromIdx;
    repeat (((ToIdx - FromIdx) + 1))
    {
        SubstringRes = Operator.Join(SubstringRes, Operator.LetterOf(Text, IdxString));
        IdxString += 1;
    }
}

define GetRepetitionCount (warp=true)
{
    Idx = (List.Length(BoardHistory) - 1);
    RepetitionCountRes = "1";
    repeat ((List.Length(BoardHistory) - 1))
    {
        if ((BoardHistory[Idx] = BoardHistory[last]))
        {
            RepetitionCountRes += 1;
        }
        Idx += -1;
    }
}

define CalculateOpeningMoves (warp=true)
{
    Data.DeleteItem(MinMaxMovesRes, all);
    if ((IsImportedBoard = "0"))
    {
        if ((IsPlayerBlack = "0"))
        {
            Idx = "1";
        }
        else
        {
            Idx = ((List.Length(OpeningMoves) / 2) + 1);
        }
        repeat ((List.Length(OpeningMoves) / 2))
        {
            if ((Variable.Length(GameMoves) < Variable.Length(OpeningMoves[Idx])))
            {
                IdxString = "1";
                IsEqual = "1";
                repeat (Variable.Length(GameMoves))
                {
                    if (not((Operator.LetterOf(GameMoves, IdxString) = Operator.LetterOf(OpeningMoves[Idx], IdxString))))
                    {
                        IsEqual = "0";
                    }
                    IdxString += 1;
                }
                if ((IsEqual = "1"))
                {
                    BestMove = Operator.LetterOf(OpeningMoves[Idx], (Variable.Length(GameMoves) + 1));
                    BestMove = Operator.Join(BestMove, Operator.LetterOf(OpeningMoves[Idx], (Variable.Length(GameMoves) + 2)));
                    BestMove = Operator.Join(BestMove, Operator.LetterOf(OpeningMoves[Idx], (Variable.Length(GameMoves) + 3)));
                    BestMove = Operator.Join(BestMove, Operator.LetterOf(OpeningMoves[Idx], (Variable.Length(GameMoves) + 4)));
                    List.Add(MinMaxMovesRes, BestMove);
                }
            }
            Idx += 1;
        }
    }
}

define InitCoordLookup (warp=true)
{
    Data.DeleteItem(IdxToFile, all);
    Data.DeleteItem(IdxToRank, all);
    Idx = "1";
    repeat (64)
    {
        List.Add(IdxToFile, (((Idx - 1) % 8) + 1));
        List.Add(IdxToRank, ceiling((Idx / 8)));
        Idx += 1;
    }
}

define ImportBoard(string ImpBoard) (warp=false)
{
    call ExportBoardFEN;
    call ImportBoardFEN(ImpBoard);
    call CalcBoardStats;
    if (((BlackKingIdx = "") OR (WhiteKingIdx = "")))
    {
        call SayAsync("Invalid FEN data")(5);
        call ImportBoardFEN(ExportDataFEN);
        call CalcBoardStats;
    }
    else
    {
        IsImportedBoard = "1";
        HasWhiteKingMoved = "0";
        HasBlackKingMoved = "0";
        HasWhiteCastled = "0";
        HasBlackCastled = "0";
        HasWhiteRookKSMoved = "0";
        HasWhiteRookQSMoved = "0";
        HasBlackRookKSMoved = "0";
        HasBlackRookQSMoved = "0";
        GameMoves = "";
        Data.DeleteItem(BoardHistory, all);
        Data.DeleteItem(BoardHistoryHash, all);
        Data.DeleteItem(GameMovesAN, all);
        if (not((Board[VirtualBoard[1]] = BlackRook)))
        {
            HasBlackRookQSMoved = "1";
        }
        if (not((Board[VirtualBoard[5]] = BlackKing)))
        {
            HasBlackKingMoved = "1";
        }
        if (not((Board[VirtualBoard[8]] = BlackRook)))
        {
            HasBlackRookQSMoved = "1";
        }
        if (not((Board[VirtualBoard[57]] = WhiteRook)))
        {
            HasWhiteRookQSMoved = "1";
        }
        if (not((Board[VirtualBoard[61]] = WhiteKing)))
        {
            HasWhiteKingMoved = "1";
        }
        if (not((Board[VirtualBoard[64]] = WhiteRook)))
        {
            HasWhiteRookKSMoved = "1";
        }
        call AddBoardToHistory;
        call DrawBoardAndWait;
        IdxString += 1;
        CurrentValue = Operator.LetterOf(ImpBoard, IdxString);
        if ((((CurrentValue = "B") AND (IsPlayerBlack = "0")) OR ((CurrentValue = "W") AND (IsPlayerBlack = "1"))))
        {
            call CalcBoardAttackedByMove(1);
            if ((IsWhiteChecked = "1"))
            {
                Looks.Say("Checkmate!", 5);
                IsGameSuspended = "1";
            }
            else
            {
                call CalculateMoves(1);
                if ((List.Length(Moves1) = "0"))
                {
                    Looks.Say("Draw!", 5);
                    IsGameSuspended = "1";
                }
                else
                {
                    IsGameSuspended = "0";
                    call ExecuteEngineMove;
                }
            }
        }
        if ((((CurrentValue = "W") AND (IsPlayerBlack = "0")) OR ((CurrentValue = "B") AND (IsPlayerBlack = "1"))))
        {
            call CalcBoardAttackedByMove(2);
            if ((IsBlackChecked = "1"))
            {
                Looks.Say("Checkmate!", 5);
                IsGameSuspended = "1";
            }
            else
            {
                call CalculateMoves(2);
                if ((List.Length(Moves2) = "0"))
                {
                    Looks.Say("Draw!", 5);
                    IsGameSuspended = "1";
                }
                else
                {
                    IsGameSuspended = "0";
                }
            }
        }
    }
}

define CalculateMovesForSource(num Depth)(num SourceIdx)(bool CalcAttackState)(bool CapturesOnly) (warp=true)
{
    if ((Board[SourceIdx] = BlackPawn))
    {
        if ((CalcAttackState OR (Board[(SourceIdx + 7)] < "0")))
        {
            if ((IdxToFile[SourceIdx] > "1"))
            {
                call AddMoveImpl(SourceIdx)((SourceIdx + 7))(Depth)(CalcAttackState)(CapturesOnly);
            }
        }
        if ((CalcAttackState OR (Board[(SourceIdx + 9)] < "0")))
        {
            if ((IdxToFile[SourceIdx] < "8"))
            {
                call AddMoveImpl(SourceIdx)((SourceIdx + 9))(Depth)(CalcAttackState)(CapturesOnly);
            }
        }
        if (not(CalcAttackState))
        {
            if ((not(CapturesOnly) OR (IdxToRank[SourceIdx] = "7")))
            {
                if ((Board[(SourceIdx + 8)] = "0"))
                {
                    call AddMoveImpl(SourceIdx)((SourceIdx + 8))(Depth)(CalcAttackState)(CapturesOnly);
                    if (((IdxToRank[SourceIdx] = "2") AND (Board[(SourceIdx + 16)] = "0")))
                    {
                        call AddMoveImpl(SourceIdx)((SourceIdx + 16))(Depth)(CalcAttackState)(CapturesOnly);
                    }
                }
            }
        }
        if ((IdxToRank[SourceIdx] = "5"))
        {
            if (not(CalcAttackState))
            {
                if ((Board[(SourceIdx - 1)] = WhitePawn))
                {
                    if ((IdxToFile[(SourceIdx - 1)] > "1"))
                    {
                        call AddPossibleEnPassantImpl(SourceIdx)(-1)(Depth);
                    }
                }
                if ((Board[(SourceIdx + 1)] = WhitePawn))
                {
                    if ((IdxToFile[(SourceIdx + 1)] < "8"))
                    {
                        call AddPossibleEnPassantImpl(SourceIdx)(1)(Depth);
                    }
                }
            }
        }
    }
    else
    {
        if ((Board[SourceIdx] = WhitePawn))
        {
            if ((CalcAttackState OR (Board[(SourceIdx - 9)] > "0")))
            {
                if ((IdxToFile[SourceIdx] > "1"))
                {
                    call AddMoveImpl(SourceIdx)((SourceIdx - 9))(Depth)(CalcAttackState)(CapturesOnly);
                }
            }
            if ((CalcAttackState OR (Board[(SourceIdx - 7)] > "0")))
            {
                if ((IdxToFile[SourceIdx] < "8"))
                {
                    call AddMoveImpl(SourceIdx)((SourceIdx - 7))(Depth)(CalcAttackState)(CapturesOnly);
                }
            }
            if (not(CalcAttackState))
            {
                if ((not(CapturesOnly) OR (IdxToRank[SourceIdx] = "2")))
                {
                    if ((Board[(SourceIdx - 8)] = "0"))
                    {
                        call AddMoveImpl(SourceIdx)((SourceIdx - 8))(Depth)(CalcAttackState)(CapturesOnly);
                        if (((IdxToRank[SourceIdx] = "7") AND (Board[(SourceIdx - 16)] = "0")))
                        {
                            call AddMoveImpl(SourceIdx)((SourceIdx - 16))(Depth)(CalcAttackState)(CapturesOnly);
                        }
                    }
                }
            }
            if ((IdxToRank[SourceIdx] = "4"))
            {
                if (not(CalcAttackState))
                {
                    if ((Board[(SourceIdx - 1)] = BlackPawn))
                    {
                        if ((IdxToFile[(SourceIdx - 1)] > "1"))
                        {
                            call AddPossibleEnPassantImpl(SourceIdx)(-1)(Depth);
                        }
                    }
                    if ((Board[(SourceIdx + 1)] = BlackPawn))
                    {
                        if ((IdxToFile[(SourceIdx + 1)] < "8"))
                        {
                            call AddPossibleEnPassantImpl(SourceIdx)(1)(Depth);
                        }
                    }
                }
            }
        }
        else
        {
            SourcePieceOuter2 = abs(Board[SourceIdx]);
            if ((SourcePieceOuter2 = BlackRook))
            {
                call AddLineMove(SourceIdx)(Depth)(CalcAttackState)(CapturesOnly)(("1" = "1"));
            }
            else
            {
                if ((SourcePieceOuter2 = BlackBishop))
                {
                    call AddLineMove(SourceIdx)(Depth)(CalcAttackState)(CapturesOnly)(("1" = "0"));
                }
                else
                {
                    if ((SourcePieceOuter2 = BlackKnight))
                    {
                        call AddLookupMove(SourceIdx)(Depth)(CalcAttackState)(CapturesOnly)(("1" = "0"));
                    }
                    else
                    {
                        if ((SourcePieceOuter2 = BlackKing))
                        {
                            call AddLookupMove(SourceIdx)(Depth)(CalcAttackState)(CapturesOnly)(("1" = "1"));
                        }
                        else
                        {
                            if ((SourcePieceOuter2 = BlackQueen))
                            {
                                call AddLineMove(SourceIdx)(Depth)(CalcAttackState)(CapturesOnly)(("1" = "1"));
                                call AddLineMove(SourceIdx)(Depth)(CalcAttackState)(CapturesOnly)(("1" = "0"));
                            }
                        }
                    }
                }
            }
        }
    }
}

define ClearMoveList(num Depth) (warp=true)
{
    if ((Depth < "6"))
    {
        if ((Depth = "5"))
        {
            Data.DeleteItem(Moves5, all);
            Data.DeleteItem(Moves5Score, all);
            Data.ReplaceItem(MovesCount, 5, "0");
        }
        else
        {
            if ((Depth = "4"))
            {
                Data.DeleteItem(Moves4, all);
                Data.DeleteItem(Moves4Score, all);
                Data.ReplaceItem(MovesCount, 4, "0");
            }
            else
            {
                if ((Depth = "3"))
                {
                    Data.DeleteItem(Moves3, all);
                    Data.DeleteItem(Moves3Score, all);
                    Data.ReplaceItem(MovesCount, 3, "0");
                }
                else
                {
                    if ((Depth = "2"))
                    {
                        Data.DeleteItem(Moves2, all);
                        Data.DeleteItem(Moves2Score, all);
                        Data.ReplaceItem(MovesCount, 2, "0");
                    }
                    else
                    {
                        if ((Depth = "1"))
                        {
                            Data.DeleteItem(Moves1, all);
                            Data.DeleteItem(Moves1Score, all);
                            Data.ReplaceItem(MovesCount, 1, "0");
                        }
                    }
                }
            }
        }
    }
    else
    {
        if ((Depth < "11"))
        {
            if ((Depth = "6"))
            {
                Data.DeleteItem(Moves6, all);
                Data.DeleteItem(Moves6Score, all);
                Data.ReplaceItem(MovesCount, 6, "0");
            }
            else
            {
                if ((Depth = "7"))
                {
                    Data.DeleteItem(Moves7, all);
                    Data.DeleteItem(Moves7Score, all);
                    Data.ReplaceItem(MovesCount, 7, "0");
                }
                else
                {
                    if ((Depth = "8"))
                    {
                        Data.DeleteItem(Moves8, all);
                        Data.DeleteItem(Moves8Score, all);
                        Data.ReplaceItem(MovesCount, 8, "0");
                    }
                    else
                    {
                        if ((Depth = "9"))
                        {
                            Data.DeleteItem(Moves9, all);
                            Data.DeleteItem(Moves9Score, all);
                            Data.ReplaceItem(MovesCount, 9, "0");
                        }
                        else
                        {
                            if ((Depth = "10"))
                            {
                                Data.DeleteItem(Moves10, all);
                                Data.DeleteItem(Moves10Score, all);
                                Data.ReplaceItem(MovesCount, 10, "0");
                            }
                        }
                    }
                }
            }
        }
        else
        {
            if ((Depth < "16"))
            {
                if ((Depth = "11"))
                {
                    Data.DeleteItem(Moves11, all);
                    Data.DeleteItem(Moves11Score, all);
                    Data.ReplaceItem(MovesCount, 11, "0");
                }
                else
                {
                    if ((Depth = "12"))
                    {
                        Data.DeleteItem(Moves12, all);
                        Data.DeleteItem(Moves12Score, all);
                        Data.ReplaceItem(MovesCount, 12, "0");
                    }
                    else
                    {
                        if ((Depth = "13"))
                        {
                            Data.DeleteItem(Moves13, all);
                            Data.DeleteItem(Moves13Score, all);
                            Data.ReplaceItem(MovesCount, 13, "0");
                        }
                        else
                        {
                            if ((Depth = "14"))
                            {
                                Data.DeleteItem(Moves14, all);
                                Data.DeleteItem(Moves14Score, all);
                                Data.ReplaceItem(MovesCount, 14, "0");
                            }
                            else
                            {
                                if ((Depth = "15"))
                                {
                                    Data.DeleteItem(Moves15, all);
                                    Data.DeleteItem(Moves15Score, all);
                                    Data.ReplaceItem(MovesCount, 15, "0");
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                if ((Depth = "16"))
                {
                    Data.DeleteItem(Moves16, all);
                    Data.DeleteItem(Moves16Score, all);
                    Data.ReplaceItem(MovesCount, 16, "0");
                }
                else
                {
                    if ((Depth = "17"))
                    {
                        Data.DeleteItem(Moves17, all);
                        Data.DeleteItem(Moves17Score, all);
                        Data.ReplaceItem(MovesCount, 17, "0");
                    }
                    else
                    {
                        if ((Depth = "18"))
                        {
                            Data.DeleteItem(Moves18, all);
                            Data.DeleteItem(Moves18Score, all);
                            Data.ReplaceItem(MovesCount, 18, "0");
                        }
                        else
                        {
                            if ((Depth = "19"))
                            {
                                Data.DeleteItem(Moves19, all);
                                Data.DeleteItem(Moves19Score, all);
                                Data.ReplaceItem(MovesCount, 19, "0");
                            }
                            else
                            {
                                if ((Depth = "20"))
                                {
                                    Data.DeleteItem(Moves20, all);
                                    Data.DeleteItem(Moves20Score, all);
                                    Data.ReplaceItem(MovesCount, 20, "0");
                                }
                                else
                                {
                                    if ((Depth = "21"))
                                    {
                                        Data.DeleteItem(Moves21, all);
                                        Data.DeleteItem(Moves21Score, all);
                                        Data.ReplaceItem(MovesCount, 21, "0");
                                    }
                                    else
                                    {
                                        if ((Depth = "22"))
                                        {
                                            Data.DeleteItem(Moves22, all);
                                            Data.DeleteItem(Moves22Score, all);
                                            Data.ReplaceItem(MovesCount, 22, "0");
                                        }
                                        else
                                        {
                                            if ((Depth = "23"))
                                            {
                                                Data.DeleteItem(Moves23, all);
                                                Data.DeleteItem(Moves23Score, all);
                                                Data.ReplaceItem(MovesCount, 23, "0");
                                            }
                                            else
                                            {
                                                if ((Depth = "24"))
                                                {
                                                    Data.DeleteItem(Moves24, all);
                                                    Data.DeleteItem(Moves24Score, all);
                                                    Data.ReplaceItem(MovesCount, 24, "0");
                                                }
                                                else
                                                {
                                                    if ((Depth = "25"))
                                                    {
                                                        Data.DeleteItem(Moves25, all);
                                                        Data.DeleteItem(Moves25Score, all);
                                                        Data.ReplaceItem(MovesCount, 25, "0");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

define RUN_BEFORE_SAVING (warp=true)
{
    Data.DeleteItem(MovePosLookupBlack, all);
    Data.DeleteItem(MovePosLookupWhite, all);
    Data.DeleteItem(MoveHashLookupBlack, all);
    Data.DeleteItem(MoveHashLookupWhite, all);
    Data.DeleteItem(TTBoardScore1, all);
    Data.DeleteItem(TTBoardScore2, all);
    Data.DeleteItem(TTBoardScore3, all);
    Data.DeleteItem(TTBoardHash, all);
    Data.DeleteItem(TTBoardAge, all);
    Data.DeleteItem(TTNodeChecked, all);
    Data.DeleteItem(TTNodeHash, all);
    Data.DeleteItem(TTNodeBestMove, all);
    Data.DeleteItem(TTNodeScore, all);
    Data.DeleteItem(TTNodeDepth, all);
    Data.DeleteItem(TTNodeAge, all);
    Data.DeleteItem(TTNodeType, all);
    Data.DeleteItem(TTNodeHorizon, all);
    Data.DeleteItem(KillerMoves1, all);
    Data.DeleteItem(KillerMoves2, all);
    Data.DeleteItem(KillerMoves3, all);
    Data.DeleteItem(KillerMoves4, all);
    Data.DeleteItem(KillerMoves5, all);
    Data.DeleteItem(KillerMoves6, all);
    Data.DeleteItem(TTNodeHorizon, all);
    Data.DeleteItem(TTNodeBlackMobility, all);
    Data.DeleteItem(TTNodeWhiteMobility, all);
    Data.DeleteItem(PieceIdxLookup, all);
    Data.DeleteItem(TTNodeBoardAttackedByOpp, all);
    Data.DeleteItem(TTNodeBoardAttackedByOppPiece, all);
    if (("1" = "0"))
    {
        Data.DeleteItem(MoveLookupStraight, all);
        Data.DeleteItem(MoveLookupCross, all);
        Data.DeleteItem(MoveLookupOffsetsStraight, all);
        Data.DeleteItem(MoveLookupOffsetsCross, all);
        Data.DeleteItem(OpeningMoves, all);
        Data.DeleteItem(KnightPieceSquare, all);
        Data.DeleteItem(PawnPieceSquare, all);
        Data.DeleteItem(BishopPieceSquare, all);
        Data.DeleteItem(RookPieceSquare, all);
        Data.DeleteItem(QueenPieceSquare, all);
        Data.DeleteItem(KingPieceSquare, all);
        Data.DeleteItem(KingPieceSquareEndgame, all);
        Data.DeleteItem(OpeningMoves, all);
        Data.DeleteItem(PawnPieceSquareEndgame, all);
        Data.DeleteItem(PosPieceHashLookup, all);
        Data.DeleteItem(BoardHistory, all);
    }
}

define GetMoveNotation(num Move) (warp=true)
{
    call GetVirtualMove(Move);
    MoveNotationRes = "";
    if (((VirtualMove = BlackKingsideCastling) OR (VirtualMove = WhiteKingsideCastling)))
    {
        MoveNotationRes = "O-O";
        Stop(this script);
    }
    if (((VirtualMove = BlackQueensideCastling) OR (VirtualMove = WhiteQueensideCastling)))
    {
        MoveNotationRes = "O-O-O";
        Stop(this script);
    }
    SourceIdx = floor((VirtualMove / 100));
    TargetIdx = floor((VirtualMove % 100));
    CurrentPiece = Board[floor((Move / 100))];
    if (((CurrentPiece = BlackBishop) OR (CurrentPiece = WhiteBishop)))
    {
        MoveNotationRes = "B";
    }
    if (((CurrentPiece = BlackKing) OR (CurrentPiece = WhiteKing)))
    {
        MoveNotationRes = "K";
    }
    if (((CurrentPiece = BlackRook) OR (CurrentPiece = WhiteRook)))
    {
        MoveNotationRes = "R";
    }
    if (((CurrentPiece = BlackKnight) OR (CurrentPiece = WhiteKnight)))
    {
        MoveNotationRes = "N";
    }
    if (((CurrentPiece = WhiteQueen) OR (CurrentPiece = BlackQueen)))
    {
        MoveNotationRes = "Q";
    }
    X = IdxToFile[SourceIdx];
    Y = (9 - IdxToRank[SourceIdx]);
    MoveNotationRes = Operator.Join(MoveNotationRes, Operator.Join(Operator.LetterOf("abcdefgh", X), Y));
    if (not((Board[floor((Move % 100))] = Empty)))
    {
        MoveNotationRes = Operator.Join(MoveNotationRes, "x");
    }
    X = IdxToFile[TargetIdx];
    Y = (9 - IdxToRank[TargetIdx]);
    if (((Operator.LetterOf(VirtualMove, 5) = ".") = ".1"))
    {
        if ((Operator.LetterOf(VirtualMove, 6) = "1"))
        {
            MoveNotationRes = Operator.Join(MoveNotationRes, "Q");
        }
        if ((Operator.LetterOf(VirtualMove, 6) = "2"))
        {
            MoveNotationRes = Operator.Join(MoveNotationRes, "R");
        }
        if ((Operator.LetterOf(VirtualMove, 6) = "3"))
        {
            MoveNotationRes = Operator.Join(MoveNotationRes, "B");
        }
        if ((Operator.LetterOf(VirtualMove, 6) = "4"))
        {
            MoveNotationRes = Operator.Join(MoveNotationRes, "N");
        }
    }
    else
    {
        MoveNotationRes = Operator.Join(MoveNotationRes, Operator.Join(Operator.LetterOf("abcdefgh", X), Y));
    }
}

define LoadList(string Data)(string ListName) (warp=true)
{
    IdxString = "1";
    CurrentValue = "";
    repeat until((IdxString > Variable.Length(Data)))
    {
        if ((not((Operator.LetterOf(Data, IdxString) = " ")) AND not((Operator.LetterOf(Data, IdxString) = ","))))
        {
            CurrentValue = Operator.Join(CurrentValue, Operator.LetterOf(Data, IdxString));
        }
        if (((Operator.LetterOf(Data, IdxString) = ",") OR (IdxString = Variable.Length(Data))))
        {
            if ((ListName = "PawnPieceSquare"))
            {
                List.Add(PawnPieceSquare, CurrentValue);
            }
            if ((ListName = "PawnPieceSquareEndgame"))
            {
                List.Add(PawnPieceSquareEndgame, CurrentValue);
            }
            if ((ListName = "PawnPieceSquarePreCastling"))
            {
                List.Add(PawnPieceSquarePreCastling, CurrentValue);
            }
            if ((ListName = "KingPieceSquare"))
            {
                List.Add(KingPieceSquare, CurrentValue);
            }
            if ((ListName = "KingPieceSquareEndgame"))
            {
                List.Add(KingPieceSquareEndgame, CurrentValue);
            }
            if ((ListName = "QueenPieceSquare"))
            {
                List.Add(QueenPieceSquare, CurrentValue);
            }
            if ((ListName = "RookPieceSquare"))
            {
                List.Add(RookPieceSquare, CurrentValue);
            }
            if ((ListName = "BishopPieceSquare"))
            {
                List.Add(BishopPieceSquare, CurrentValue);
            }
            if ((ListName = "KnightPieceSquare"))
            {
                List.Add(KnightPieceSquare, CurrentValue);
            }
            if ((ListName = "KnightMobilityBonus"))
            {
                List.Add(KnightMobilityBonus, (CurrentValue * 3));
            }
            if ((ListName = "BishopMobilityBonus"))
            {
                List.Add(BishopMobilityBonus, (CurrentValue * 3));
            }
            if ((ListName = "RookMobilityBonus"))
            {
                List.Add(RookMobilityBonus, (CurrentValue * 3));
            }
            if ((ListName = "QueenMobilityBonus"))
            {
                List.Add(QueenMobilityBonus, (CurrentValue * 3));
            }
            if ((ListName = "PawnStorm"))
            {
                List.Add(PawnStorm, CurrentValue);
            }
            if ((ListName = "PawnShelter"))
            {
                List.Add(PawnShelter, (CurrentValue * 1));
            }
            CurrentValue = "";
        }
        IdxString += 1;
    }
}

define AddPossibleEnPassantImpl(string SourceIdx)(string Dir)(string Depth) (warp=true)
{
    call GetTargetIdx(SourceIdx)(Dir)(0);
    if (not((GetTargetIdxRes = "-1")))
    {
        if (((((Depth % 2) = "1") AND (Board[GetTargetIdxRes] = WhitePawn)) OR (((Depth % 2) = "0") AND (Board[GetTargetIdxRes] = BlackPawn))))
        {
            IsEnPassantAllowed = "0";
            if (((Depth % 2) = "1"))
            {
                EnPassantPrevMove = Operator.Join((GetTargetIdxRes + 16), GetTargetIdxRes);
            }
            else
            {
                EnPassantPrevMove = Operator.Join((GetTargetIdxRes - 16), GetTargetIdxRes);
            }
            if ((Depth = "1"))
            {
                call GetSubstringRight(GameMoves)(4);
                if ((SubstringRes = EnPassantPrevMove))
                {
                    IsEnPassantAllowed = "1";
                }
            }
            else
            {
                if ((Depth = "2"))
                {
                    call GetSubstringRight(GameMoves)(4);
                    if (((SubstringRes = EnPassantPrevMove) OR (Moves1[MovesIdx[1]] = EnPassantPrevMove)))
                    {
                        IsEnPassantAllowed = "1";
                    }
                }
                else
                {
                    call GetCurrentMove((Depth - 1));
                    if ((CurrentMove = EnPassantPrevMove))
                    {
                        IsEnPassantAllowed = "1";
                    }
                }
            }
            if ((IsEnPassantAllowed = "1"))
            {
                if (((Depth % 2) = "1"))
                {
                    call AddSpecialMove(Operator.Join(SourceIdx, (GetTargetIdxRes + 8)))(Depth);
                }
                else
                {
                    call AddSpecialMove(Operator.Join(SourceIdx, (GetTargetIdxRes - 8)))(Depth);
                }
            }
        }
    }
}

define GetCurrentMove(num Depth) (warp=true)
{
    CurrentMove = "";
    if ((Depth < "6"))
    {
        if ((Depth = "5"))
        {
            CurrentMove = Moves5[MovesIdx[Depth]];
        }
        else
        {
            if ((Depth = "4"))
            {
                CurrentMove = Moves4[MovesIdx[Depth]];
            }
            else
            {
                if ((Depth = "3"))
                {
                    CurrentMove = Moves3[MovesIdx[Depth]];
                }
                else
                {
                    if ((Depth = "2"))
                    {
                        CurrentMove = Moves2[MovesIdx[Depth]];
                    }
                    else
                    {
                        if ((Depth = "1"))
                        {
                            CurrentMove = Moves1[MovesIdx[Depth]];
                        }
                    }
                }
            }
        }
    }
    else
    {
        if ((Depth < "11"))
        {
            if ((Depth = "6"))
            {
                CurrentMove = Moves6[MovesIdx[Depth]];
            }
            else
            {
                if ((Depth = "7"))
                {
                    CurrentMove = Moves7[MovesIdx[Depth]];
                }
                else
                {
                    if ((Depth = "8"))
                    {
                        CurrentMove = Moves8[MovesIdx[Depth]];
                    }
                    else
                    {
                        if ((Depth = "9"))
                        {
                            CurrentMove = Moves9[MovesIdx[Depth]];
                        }
                        else
                        {
                            if ((Depth = "10"))
                            {
                                CurrentMove = Moves10[MovesIdx[Depth]];
                            }
                        }
                    }
                }
            }
        }
        else
        {
            if ((Depth < "16"))
            {
                if ((Depth = "11"))
                {
                    CurrentMove = Moves11[MovesIdx[Depth]];
                }
                else
                {
                    if ((Depth = "12"))
                    {
                        CurrentMove = Moves12[MovesIdx[Depth]];
                    }
                    else
                    {
                        if ((Depth = "13"))
                        {
                            CurrentMove = Moves13[MovesIdx[Depth]];
                        }
                        else
                        {
                            if ((Depth = "14"))
                            {
                                CurrentMove = Moves14[MovesIdx[Depth]];
                            }
                            else
                            {
                                if ((Depth = "15"))
                                {
                                    CurrentMove = Moves15[MovesIdx[Depth]];
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                if ((Depth = "16"))
                {
                    CurrentMove = Moves16[MovesIdx[Depth]];
                }
                else
                {
                    if ((Depth = "17"))
                    {
                        CurrentMove = Moves17[MovesIdx[Depth]];
                    }
                    else
                    {
                        if ((Depth = "18"))
                        {
                            CurrentMove = Moves18[MovesIdx[Depth]];
                        }
                        else
                        {
                            if ((Depth = "19"))
                            {
                                CurrentMove = Moves19[MovesIdx[Depth]];
                            }
                            else
                            {
                                if ((Depth = "20"))
                                {
                                    CurrentMove = Moves20[MovesIdx[Depth]];
                                }
                                else
                                {
                                    if ((Depth = "21"))
                                    {
                                        CurrentMove = Moves21[MovesIdx[Depth]];
                                    }
                                    else
                                    {
                                        if ((Depth = "22"))
                                        {
                                            CurrentMove = Moves22[MovesIdx[Depth]];
                                        }
                                        else
                                        {
                                            if ((Depth = "23"))
                                            {
                                                CurrentMove = Moves23[MovesIdx[Depth]];
                                            }
                                            else
                                            {
                                                if ((Depth = "24"))
                                                {
                                                    CurrentMove = Moves24[MovesIdx[Depth]];
                                                }
                                                else
                                                {
                                                    if ((Depth = "25"))
                                                    {
                                                        CurrentMove = Moves25[MovesIdx[Depth]];
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

define AddLookupMove(string SourceIdx)(string Depth)(bool CalcAttackState)(bool CapturesOnly)(bool LookupMoveTypeKing) (warp=true)
{
    SourcePieceOuter = Board[SourceIdx];
    IdxOuter = MoveLookupIndexOffset[SourceIdx];
    Count = "1";
    repeat (8)
    {
        if (LookupMoveTypeKing)
        {
            TargetIdxOuter = MoveLookupKing[(IdxOuter + Count)];
        }
        else
        {
            TargetIdxOuter = MoveLookupKnight[(IdxOuter + Count)];
        }
        if ((TargetIdxOuter = "-1"))
        {
            Stop(this script);
        }
        if ((Board[TargetIdxOuter] = "0"))
        {
            if (not(CapturesOnly))
            {
                call AddMoveImplLookup(SourceIdx)(TargetIdxOuter)(Depth)(CalcAttackState)(CapturesOnly)(LookupMoveTypeKing);
            }
        }
        else
        {
            if (CalcAttackState)
            {
                call AddMoveImplLookup(SourceIdx)(TargetIdxOuter)(Depth)(CalcAttackState)(CapturesOnly)(LookupMoveTypeKing);
            }
            else
            {
                if ((Board[TargetIdxOuter] > "0"))
                {
                    if ((SourcePieceOuter < "0"))
                    {
                        call AddMoveImplLookup(SourceIdx)(TargetIdxOuter)(Depth)(CalcAttackState)(CapturesOnly)(LookupMoveTypeKing);
                    }
                }
                else
                {
                    if ((SourcePieceOuter > "0"))
                    {
                        call AddMoveImplLookup(SourceIdx)(TargetIdxOuter)(Depth)(CalcAttackState)(CapturesOnly)(LookupMoveTypeKing);
                    }
                }
            }
        }
        Count += 1;
    }
}

define CalculateMoves(num Depth) (warp=true)
{
    call CalcBoardAttackedByMove((Depth + 1));
    call StoreAttackInfo((Depth + 1))(Depth);
    Data.ReplaceItem(BoardAttackedCalculated, Depth, "1");
    call CalculateMovesImpl(Depth)(("1" = "0"))(("1" = "0"));
    Data.ReplaceItem(BoardAttackedCalculated, Depth, "0");
}

define GetPiecePosScore(string Piece)(string Idx) (warp=true)
{
    PosScoreRes = "0";
    if (((Idx > "0") AND not((Piece = "0"))))
    {
        if ((Piece = BlackPawn))
        {
            if ((IsEndgame = "0"))
            {
                if ((IsBlackCastlingPossible = "1"))
                {
                    PosScoreRes = PawnPieceSquarePreCastling[(65 - Idx)];
                }
                else
                {
                    PosScoreRes = PawnPieceSquare[(65 - Idx)];
                }
            }
            else
            {
                PosScoreRes = PawnPieceSquareEndgame[(65 - Idx)];
            }
        }
        else
        {
            if ((Piece = WhitePawn))
            {
                if ((IsEndgame = "0"))
                {
                    if ((IsWhiteCastlingPossible = "1"))
                    {
                        PosScoreRes = (0 - PawnPieceSquarePreCastling[Idx]);
                    }
                    else
                    {
                        PosScoreRes = (0 - PawnPieceSquare[Idx]);
                    }
                }
                else
                {
                    PosScoreRes = (0 - PawnPieceSquareEndgame[Idx]);
                }
            }
            else
            {
                if ((IsEndgame = "0"))
                {
                    if ((Piece = BlackBishop))
                    {
                        PosScoreRes = BishopPieceSquare[(65 - Idx)];
                    }
                    else
                    {
                        if ((Piece = WhiteBishop))
                        {
                            PosScoreRes = (0 - BishopPieceSquare[Idx]);
                        }
                        else
                        {
                            if ((Piece = BlackKnight))
                            {
                                PosScoreRes = KnightPieceSquare[(65 - Idx)];
                            }
                            else
                            {
                                if ((Piece = WhiteKnight))
                                {
                                    PosScoreRes = (0 - KnightPieceSquare[Idx]);
                                }
                                else
                                {
                                    if ((Piece = BlackQueen))
                                    {
                                        PosScoreRes = QueenPieceSquare[(65 - Idx)];
                                    }
                                    else
                                    {
                                        if ((Piece = WhiteQueen))
                                        {
                                            PosScoreRes = (0 - QueenPieceSquare[Idx]);
                                        }
                                        else
                                        {
                                            if ((Piece = BlackRook))
                                            {
                                                PosScoreRes = RookPieceSquare[(65 - Idx)];
                                            }
                                            else
                                            {
                                                if ((Piece = WhiteRook))
                                                {
                                                    PosScoreRes = (0 - RookPieceSquare[Idx]);
                                                }
                                                else
                                                {
                                                    if ((Piece = BlackKing))
                                                    {
                                                        PosScoreRes = KingPieceSquare[(65 - Idx)];
                                                    }
                                                    else
                                                    {
                                                        if ((Piece = WhiteKing))
                                                        {
                                                            PosScoreRes = (0 - KingPieceSquare[Idx]);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if ((Piece = BlackKing))
                    {
                        if (((BlackPawnCount = "0") AND ((BlackQueenCount = "0") AND (BlackMinorCount = "0"))))
                        {
                            PosScoreRes = (6 * KingPieceSquareEndgame[(65 - Idx)]);
                        }
                        else
                        {
                            PosScoreRes = (1 * KingPieceSquareEndgame[(65 - Idx)]);
                        }
                    }
                    else
                    {
                        if ((Piece = WhiteKing))
                        {
                            if (((WhitePawnCount = "0") AND ((WhiteQueenCount = "0") AND (WhiteMinorCount = "0"))))
                            {
                                PosScoreRes = (6 * (0 - KingPieceSquareEndgame[Idx]));
                            }
                            else
                            {
                                PosScoreRes = (1 * (0 - KingPieceSquareEndgame[Idx]));
                            }
                        }
                    }
                }
            }
        }
    }
}

define ClearBoardAttackedByMove(num Depth) (warp=true)
{
    if (((Depth % 2) = "1"))
    {
        List.DeleteAll(BoardAttackedByBlack);
        List.DeleteAll(BoardAttackedByBlackPiece);
        repeat (64)
        {
            List.Add(BoardAttackedByBlack, "0");
            List.Add(BoardAttackedByBlackPiece, "0");
        }
        IsWhiteChecked = "0";
    }
    else
    {
        List.DeleteAll(BoardAttackedByWhite);
        List.DeleteAll(BoardAttackedByWhitePiece);
        repeat (64)
        {
            List.Add(BoardAttackedByWhite, "0");
            List.Add(BoardAttackedByWhitePiece, "0");
        }
        IsBlackChecked = "0";
    }
}

define GetPiecePosHash(string Piece)(string Pos) (warp=true)
{
    PiecePosHash = "0";
    if (((Pos > "0") AND not((Piece = "0"))))
    {
        if ((Piece = BlackPawn))
        {
            PiecePosHash = PosPieceHashLookup[(64 + Pos)];
        }
        else
        {
            if ((Piece = WhitePawn))
            {
                PiecePosHash = PosPieceHashLookup[(576 + Pos)];
            }
            else
            {
                if ((Piece = BlackBishop))
                {
                    PiecePosHash = PosPieceHashLookup[Pos];
                }
                else
                {
                    if ((Piece = WhiteBishop))
                    {
                        PiecePosHash = PosPieceHashLookup[(384 + Pos)];
                    }
                    else
                    {
                        if ((Piece = BlackKnight))
                        {
                            PiecePosHash = PosPieceHashLookup[(256 + Pos)];
                        }
                        else
                        {
                            if ((Piece = WhiteKnight))
                            {
                                PiecePosHash = PosPieceHashLookup[(640 + Pos)];
                            }
                            else
                            {
                                if ((Piece = BlackQueen))
                                {
                                    PiecePosHash = PosPieceHashLookup[(128 + Pos)];
                                }
                                else
                                {
                                    if ((Piece = WhiteQueen))
                                    {
                                        PiecePosHash = PosPieceHashLookup[(448 + Pos)];
                                    }
                                    else
                                    {
                                        if ((Piece = BlackRook))
                                        {
                                            PiecePosHash = PosPieceHashLookup[(320 + Pos)];
                                        }
                                        else
                                        {
                                            if ((Piece = WhiteRook))
                                            {
                                                PiecePosHash = PosPieceHashLookup[(704 + Pos)];
                                            }
                                            else
                                            {
                                                if ((Piece = BlackKing))
                                                {
                                                    PiecePosHash = PosPieceHashLookup[(192 + Pos)];
                                                }
                                                else
                                                {
                                                    if ((Piece = WhiteKing))
                                                    {
                                                        PiecePosHash = PosPieceHashLookup[(512 + Pos)];
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

define TTProbeNode(string BoardHash)(string Depth) (warp=true)
{
    CurrentIdx = "1";
    HashBucket = ((BoardHash % List.Length(TTNodeHash)) + 1);
    repeat until(((TTNodeHash[HashBucket] = BoardHash) AND ((TTNodeDepth[HashBucket] % 2) = (Depth % 2))))
    {
        HashBucket += 1;
        if ((HashBucket > List.Length(TTNodeHash)))
        {
            HashBucket = "1";
        }
        CurrentIdx += 1;
        if ((CurrentIdx > "5"))
        {
            TTProbeRes = "0";
            Stop(this script);
        }
    }
    Data.ReplaceItem(TTNodeAge, HashBucket, TTProbeCurrentAge);
    TTProbeRes = "1";
    TTProbeBestMoveRes = TTNodeBestMove[HashBucket];
    TTProbeNodeScoreRes = TTNodeScore[HashBucket];
    TTProbeDepthRes = TTNodeDepth[HashBucket];
    TTProbeNodeTypeRes = TTNodeType[HashBucket];
    TTProbeCheckedRes = TTNodeChecked[HashBucket];
    TTProbeAgeRes = TTNodeAge[HashBucket];
    TTProbeHorizonRes = TTNodeHorizon[HashBucket];
    TTProbeBlackMobRes = TTNodeBlackMobility[HashBucket];
    TTProbeWhiteMobRes = TTNodeWhiteMobility[HashBucket];
    TTProbeBoardAttackedByOpp = TTNodeBoardAttackedByOpp[HashBucket];
    TTProbeBoardAttackedByOppPiece = TTNodeBoardAttackedByOppPiece[HashBucket];
}

define InitMobilityBonusLookup (warp=true)
{
    Data.DeleteItem(QueenMobilityBonus, all);
    Data.DeleteItem(BishopMobilityBonus, all);
    Data.DeleteItem(RookMobilityBonus, all);
    Data.DeleteItem(KnightMobilityBonus, all);
    call LoadList("-4,-3,0,0,1,2,3,4,4,5,5,6,6,7,7,7,8,8,9,9,10,11,11,11,12,12,12,13")("QueenMobilityBonus");
    call LoadList("-5,-2,2,3,4,5,5,6,7,7,8,8,9,10")("BishopMobilityBonus");
    call LoadList("-6,-3,-1,-1,0,0,1,1,2,2,3,3,4,5,6")("RookMobilityBonus");
    call LoadList("-8,-6,-1,0,1,2,2,3,4")("KnightMobilityBonus");
}

define ClearLog (warp=true)
{
    Data.DeleteItem(Logfile, all);
}

define Log(string Txt1)(string Txt2)(string Txt3)(string Txt4)(string Txt5)(string Txt6)(string Txt7)(string Txt8) (warp=true)
{
    List.Add(Logfile, Operator.Join(Txt1, Operator.Join(Txt2, Operator.Join(Txt3, Operator.Join(Txt4, Operator.Join(Txt5, Operator.Join(Txt6, Operator.Join(Txt7, Txt8))))))));
}

define InitAlphaBeta(string Depth)(string MaxDepth)(bool InitialDeepening) (warp=true)
{
    if ((Depth = "1"))
    {
        IsInNullMove = "0";
        IsMinMaxTimeout = "0";
        if (InitialDeepening)
        {
            call Profile_Reset;
        }
        Data.DeleteItem(MinMaxPly1EvalMoves, all);
        TTProbeCurrentAge += 1;
        call CalcBoardStats;
        call Log((Operator.Round((((Sensing.DaysSince2000() * 86400) - ThinkTimeStart) * 1000)) / 1000))(":")((MaxDepth - 1))("")("")("")("")("");
        call InitMovePosLookup;
        if (InitialDeepening)
        {
            call Log((Operator.Round((((Sensing.DaysSince2000() * 86400) - ThinkTimeStart) * 1000)) / 1000))(":")((MaxDepth - 1))(":")(" InitLookup done")("")("")("");
        }
    }
}

define InitKingSquareEndgame (warp=true)
{
    Data.DeleteItem(KingPieceSquareEndgame, all);
    call LoadList("  -30, -25, -20, -15, -15, -20, -25, -30 ,  -20, -15, -10, -5, -5, -10, -15, -20,   -15, -10, -5, 0, 0, -5, -10, -15,   -15, -10, -5, 0, 0, -5, -10, -15,   -15, -10, -5, 0, 0, -5, -10, -15,   -20, -15, -10, -5, -5, -10, -15, -20,   -25, -20, -15, -10, -10, -15, -20, -25,  -30, -25, -20, -15, -15, -20, -25, -30")("KingPieceSquareEndgame");
}

define IsLowerCase(string Char) (warp=true)
{
    Chars = "";
    CharsIdx = "1";
    repeat (Variable.Length(CharsUpperCase))
    {
        if ((Operator.LetterOf(CharsUpperCase, CharsIdx) = Char))
        {
            Chars = Operator.Join(Chars, Char);
        }
        else
        {
            Chars = Operator.Join(Chars, Operator.LetterOf(CharsUpperCase, CharsIdx));
        }
        CharsIdx += 1;
    }
    Looks.SwitchCostumeTo(_ABCDEFGHIJKLMNOPQRSTUVWXYZ);
    Looks.SwitchCostumeTo(Chars);
    if ((Costume.GetNumberName(number) = "1"))
    {
        IsLowerCaseRes = "0";
    }
    else
    {
        IsLowerCaseRes = "1";
    }
}

define ImportBoardInternal(string ImpBoard) (warp=false)
{
    call ImportBoardImpl(ImpBoard);
    call AddBoardToHistory;
    call DrawBoardAndWait;
    IsGameSuspended = "0";
}

WhenBroadCastReceived(import)
{
    Sensing.Ask("Board data import. Please paste FEN data from your clipboard into the text field by pressing Ctrl-V.");
    if ((Variable.Length(Sensing.Answer()) > "0"))
    {
        call ImportBoard(Sensing.Answer());
    }
}

WhenBroadCastReceived(export)
{
    call ExportBoardFEN;
    Data.DeleteItem(ExportData, all);
    List.Add(ExportData, "DATA EXPORT");
    List.Add(ExportData, "Select data row by triple-clicking. You can then copy to");
    List.Add(ExportData, "clipboard by right-click / Copy or by pressing Ctrl-C.");
    List.Add(ExportData, "");
    List.Add(ExportData, "PGN (Game Protocol):");
    call ExportMovesPGN;
    List.Add(ExportData, ExportMovesPGN);
    List.Add(ExportData, "");
    List.Add(ExportData, "FEN (Current Board):");
    List.Add(ExportData, ExportDataFEN);
    List.Add(ExportData, "");
    List.Add(ExportData, "Board Analysis Link (lichess.org)");
    List.Add(ExportData, ExportDataFENLichess);
    list.Show(ExportData);
    if (("1" = "0"))
    {
        call SayAsync("You can copy FEN data, lichess.org URL or PGN data to your clipboard via Ctrl-C. Select data by triple-click.")(5);
    }
}

define InitPawnSquareEndgame (warp=true)
{
    Data.DeleteItem(PawnPieceSquareEndgame, all);
    call LoadList(" 100, 90, 80, 75, 75, 80, 90, 100,  65, 55, 45, 40, 40, 45, 55, 65,  35, 25, 15, 10, 10, 15, 25, 35,  20, 10, 0, -5, -5, 0, 10, 20,  10, 0, -10, -15, -15, -10, 0, 10,  5, -10, -20, -25, -25, -20, -10, 5,  5, -10, -20, -25, -25, -20, -10, 5,  0, 0, 0, 0, 0, 0, 0, 0")("PawnPieceSquareEndgame");
}

define ExportMovesPGN (warp=true)
{
    ExportMovesPGN = "";
    Idx = "1";
    repeat (List.Length(GameMovesAN))
    {
        if (((Idx % 2) = "1"))
        {
            ExportMovesPGN = Operator.Join(ExportMovesPGN, Operator.Join((((Idx - 1) / 2) + 1), ". "));
        }
        ExportMovesPGN = Operator.Join(ExportMovesPGN, Operator.Join(GameMovesAN[Idx], " "));
        Idx += 1;
    }
}

define UndoMove (warp=false)
{
    if (((IsInUndo = "0") AND (List.Length(GameMovesAN) > "1")))
    {
        IsInUndo = "1";
        if ((IsGameSuspended = "0"))
        {
            call UndoPrevMove;
            call UndoPrevMove;
        }
        else
        {
            call UndoPrevMove;
            call GetSubstringRight(GameMoves)(4);
            if (((Board[(SubstringRes % 100)] < "0") OR ((SubstringRes = WhiteQueensideCastling) OR (SubstringRes = WhiteKingsideCastling))))
            {
                call UndoPrevMove;
            }
        }
        call DrawBoard;
        IsGameSuspended = "0";
        IsInUndo = "0";
    }
}

WhenBroadCastReceived(showmoves)
{
    call ExportMovesPGN;
    Data.DeleteItem(ExportMoves, all);
    List.Add(ExportMoves, ExportMovesPGN);
    list.Show(ExportMoves);
    call SayAsync("You can copy PGN data to your clipboard via Ctrl-C")(5);
}

define FillBoard (warp=true)
{
    Data.DeleteItem(VirtualBoard, all);
    Idx = "1";
    repeat (64)
    {
        if ((IsPlayerBlack = "0"))
        {
            List.Add(VirtualBoard, Idx);
        }
        else
        {
            List.Add(VirtualBoard, (((IdxToRank[Idx] - 1) * 8) + (9 - IdxToFile[Idx])));
        }
        Idx += 1;
    }
    Data.DeleteItem(Board, all);
    repeat (64)
    {
        List.Add(Board, Empty);
    }
    Data.ReplaceItem(Board, VirtualBoard[1], BlackRook);
    Data.ReplaceItem(Board, VirtualBoard[2], BlackKnight);
    Data.ReplaceItem(Board, VirtualBoard[3], BlackBishop);
    Data.ReplaceItem(Board, VirtualBoard[4], BlackQueen);
    Data.ReplaceItem(Board, VirtualBoard[5], BlackKing);
    Data.ReplaceItem(Board, VirtualBoard[6], BlackBishop);
    Data.ReplaceItem(Board, VirtualBoard[7], BlackKnight);
    Data.ReplaceItem(Board, VirtualBoard[8], BlackRook);
    Idx = "9";
    repeat (8)
    {
        Data.ReplaceItem(Board, VirtualBoard[Idx], BlackPawn);
        Idx += 1;
    }
    Idx = "49";
    repeat (8)
    {
        Data.ReplaceItem(Board, VirtualBoard[Idx], WhitePawn);
        Idx += 1;
    }
    Data.ReplaceItem(Board, VirtualBoard[57], WhiteRook);
    Data.ReplaceItem(Board, VirtualBoard[58], WhiteKnight);
    Data.ReplaceItem(Board, VirtualBoard[59], WhiteBishop);
    Data.ReplaceItem(Board, VirtualBoard[60], WhiteQueen);
    Data.ReplaceItem(Board, VirtualBoard[61], WhiteKing);
    Data.ReplaceItem(Board, VirtualBoard[62], WhiteBishop);
    Data.ReplaceItem(Board, VirtualBoard[63], WhiteKnight);
    Data.ReplaceItem(Board, VirtualBoard[64], WhiteRook);
}

WhenBroadCastReceived(undo)
{
    call UndoMove;
    call OnEvaluationChanged("0");
    Looks.Say("");
}

define GetVirtualMove(num Move) (warp=true)
{
    if ((IsPlayerBlack = "0"))
    {
        VirtualMove = Move;
    }
    else
    {
        if ((not((Move < "0100")) AND not((Move > "6499"))))
        {
            VirtualMove = (65 - floor((Move % 100)));
            repeat until((Variable.Length(VirtualMove) > "1"))
            {
                VirtualMove = Operator.Join("0", VirtualMove);
            }
            VirtualMove = Operator.Join((65 - floor((Move / 100))), VirtualMove);
            repeat until((Variable.Length(VirtualMove) > "3"))
            {
                VirtualMove = Operator.Join("0", VirtualMove);
            }
            if ((Operator.LetterOf(Move, 5) = "."))
            {
                VirtualMove = Operator.Join(VirtualMove, Operator.Join(Operator.LetterOf(Move, 5), Operator.LetterOf(Move, 6)));
            }
        }
        else
        {
            if ((Move = BlackKingsideCastling))
            {
                VirtualMove = WhiteKingsideCastling;
            }
            else
            {
                if ((Move = BlackQueensideCastling))
                {
                    VirtualMove = WhiteQueensideCastling;
                }
                else
                {
                    if ((Move = WhiteKingsideCastling))
                    {
                        VirtualMove = BlackKingsideCastling;
                    }
                    else
                    {
                        if ((Move = WhiteQueensideCastling))
                        {
                            VirtualMove = BlackQueensideCastling;
                        }
                    }
                }
            }
        }
    }
}

define ExecuteInit (warp=false)
{
    ExecutionDepth = "0";
    IsExecutionRunning = "0";
    call EnterExecution;
    if ((IsPlayerBlack = "1"))
    {
        call ExecuteEngineMove;
    }
    call ExecuteMovePostProcess;
    call ExitExecution;
}

define ExecuteEngineMove (warp=false)
{
    call EnterExecution;
    if ((IsGameSuspended = "0"))
    {
        Data.DeleteItem(MinMaxMovesRes, all);
        if ((IsModeJunior = "0"))
        {
            call CalculateOpeningMoves;
            BestMove = MinMaxMovesRes[Operator.Random(1 / List.Length(MinMaxMovesRes))];
        }
        else
        {
            BestMove = "";
        }
        call IsValidMove(BestMove);
        if ((ValidMoveRes = "0"))
        {
            Looks.Think("Thinking...");
            Control.Wait(0);
            call InitAlphaBeta(1)(1)(("1" = "1"));
            if ((IsModeJunior = "0"))
            {
                if ((Level = "1"))
                {
                    ThinkTimeLimit = "10";
                }
                else
                {
                    if ((Level = "2"))
                    {
                        ThinkTimeLimit = "10";
                    }
                    else
                    {
                        if ((IsModeCompetition = "0"))
                        {
                            if ((IsEndgame = "0"))
                            {
                                ThinkTimeLimit = "20";
                            }
                            else
                            {
                                ThinkTimeLimit = "15";
                            }
                        }
                        else
                        {
                            ThinkTimeLimit = "40";
                        }
                    }
                }
                ThinkTimeStart = (Sensing.DaysSince2000() * 86400);
                IsDeepeningDone = "0";
                IdxDeepening = "1";
                BestMove = "";
                BestMinMaxRes = "";
                if ((Level = "1"))
                {
                    Data.DeleteItem(MinMaxMovesRes, all);
                    call AlphaBetaMinMax(-100000)(100000)(1)((IdxDeepening + 1))(("1" = "1"))(10)(("1" = "1"));
                    if ((List.Length(MinMaxMovesRes) > "0"))
                    {
                        BestMove = MinMaxMovesRes[1];
                        BestMinMaxRes = MinMaxValuesRes[1];
                    }
                    IdxDeepening += 1;
                    Data.DeleteItem(MinMaxMovesRes, all);
                    call AlphaBetaMinMax(-100000)(100000)(1)((IdxDeepening + 1))(("1" = "0"))(10)(("1" = "1"));
                    if ((List.Length(MinMaxMovesRes) > "0"))
                    {
                        BestMove = MinMaxMovesRes[1];
                        BestMinMaxRes = MinMaxValuesRes[1];
                    }
                }
                else
                {
                    repeat until((IsDeepeningDone = "1"))
                    {
                        IsDone = "0";
                        QuiescenceDepth = (25 - IdxDeepening);
                        ThinkTimeLimitMinMax = ThinkTimeLimit;
                        if ((((IsScratch3 = "1") AND (IdxDeepening > "99")) OR ((IsScratch3 = "0") AND (IdxDeepening > "99"))))
                        {
                            if ((IsScratch3 = "1"))
                            {
                                if (((IdxDeepening % 2) = "0"))
                                {
                                    PruningAlphaWindow = "75";
                                    PruningBetaWindow = "25";
                                }
                                else
                                {
                                    PruningAlphaWindow = "25";
                                    PruningBetaWindow = "75";
                                }
                            }
                            else
                            {
                                if (((IdxDeepening % 2) = "0"))
                                {
                                    PruningAlphaWindow = "60";
                                    PruningBetaWindow = "20";
                                }
                                else
                                {
                                    PruningAlphaWindow = "20";
                                    PruningBetaWindow = "60";
                                }
                            }
                            repeat until(((IsDone = "1") OR (IsMinMaxTimeout = "1")))
                            {
                                PruningAlpha = (BestMinMaxRes - PruningAlphaWindow);
                                PruningBeta = (BestMinMaxRes + PruningBetaWindow);
                                Data.DeleteItem(MinMaxMovesRes, all);
                                call AlphaBetaMinMax(PruningAlpha)(PruningBeta)(1)((IdxDeepening + 1))((IdxDeepening = "1"))(QuiescenceDepth)(("1" = "1"));
                                if (not((MinMaxResults[1] > PruningAlpha)))
                                {
                                    TTProbeCurrentAge += -1;
                                    PruningAlphaWindow = "100000";
                                }
                                else
                                {
                                    if (not((MinMaxResults[1] < PruningBeta)))
                                    {
                                        TTProbeCurrentAge += -1;
                                        PruningBetaWindow = "100000";
                                    }
                                    else
                                    {
                                        IsDone = "1";
                                    }
                                }
                            }
                        }
                        else
                        {
                            Data.DeleteItem(MinMaxMovesRes, all);
                            call AlphaBetaMinMax(-100000)(100000)(1)((IdxDeepening + 1))((IdxDeepening = "1"))(QuiescenceDepth)(("1" = "1"));
                            IsDone = "1";
                        }
                        if ((IsDone = "1"))
                        {
                            if (((List.Length(MinMaxMovesRes) > "0") AND (Variable.Length(MinMaxMovesRes[1]) > "0")))
                            {
                                if (((BestMove = "") OR Data.ListContainsItem(MinMaxPly1EvalMoves, BestMove)))
                                {
                                    BestMove = MinMaxMovesRes[1];
                                    BestMinMaxRes = MinMaxValuesRes[1];
                                    call OnEvaluationChanged(BestMinMaxRes);
                                    if (("1" = "0"))
                                    {
                                        call GetCurrentBoardHash;
                                        call TTStoreNode(CurrentBoardHash)("1")("")(BestMove)("")("")(IdxDeepening)("")("")("")("");
                                    }
                                }
                            }
                        }
                        if (((IsMinMaxTimeout = "1") OR (((BestMinMaxRes > (BlackKing / 2)) OR (BestMinMaxRes < (WhiteKing / 2))) OR (IdxDeepening = "25"))))
                        {
                            IsDeepeningDone = "1";
                        }
                        else
                        {
                            IdxDeepening += 1;
                        }
                    }
                }
            }
            else
            {
                Data.DeleteItem(MinMaxMovesRes, all);
                if ((Level = "1"))
                {
                    JuniorDistQuota = "50";
                    JuniorSearchQuota = "1";
                }
                else
                {
                    if ((Level = "2"))
                    {
                        JuniorDistQuota = "20";
                        JuniorSearchQuota = "50";
                    }
                    else
                    {
                        JuniorDistQuota = "1";
                        JuniorSearchQuota = "100";
                    }
                }
                ThinkTimeStart = (Sensing.DaysSince2000() * 86400);
                ThinkTimeLimitMinMax = "2";
                call AlphaBetaMinMax(-100000)(100000)(1)(2)(("1" = "0"))(10)(("1" = "1"));
                BestMove = MinMaxMovesRes[1];
                if (((BestMove = "") OR (Operator.Random(1 / 100) > JuniorSearchQuota)))
                {
                    call CalculateMoves(1);
                    call SortMoveList(1);
                    Data.ReplaceItem(MovesIdx, 1, Operator.Random(1 / ceiling((List.Length(Moves1) * (JuniorDistQuota / 100)))));
                    call ApplyMove(1);
                    call CalcBoardAttackedByMove(2);
                    call RevertMove(1);
                    repeat until((IsBlackChecked = "0"))
                    {
                        Data.ReplaceItem(MovesIdx, 1, Operator.Random(1 / List.Length(Moves1)));
                        call ApplyMove(1);
                        call CalcBoardAttackedByMove(2);
                        call RevertMove(1);
                    }
                    BestMove = Moves1[MovesIdx[1]];
                }
            }
        }
        Event.BroadcastAndWait("hidebestmove");
        call OnProgressChanged(100);
        Control.Wait(0);
        call IsValidMove(BestMove);
        if ((ValidMoveRes = "0"))
        {
            Looks.Say(Operator.Join("Internal Error: No valid move found. Sorry, this should not happen. Maybe you cleared lookup lists in the editor? If you are running a normal game, please export board data and report bug via project comment", Operator.Join(" Move: ", BestMove)), 10);
            Event.Broadcast("inputmode");
            IsGameSuspended = "1";
            call ExecuteMovePostProcess;
            call ExitExecution;
            Stop(this script);
        }
        Looks.Think("");
        call GetMoveNotation(BestMove);
        BestMoveAN = MoveNotationRes;
        GameMoves = Operator.Join(GameMoves, BestMove);
        MovePieceFromIdx = floor((BestMove / 100));
        MovePieceToIdx = floor((BestMove % 100));
        if ((((BestMove = BlackQueensideCastling) OR (BestMove = BlackKingsideCastling)) OR ((BestMove = WhiteQueensideCastling) OR (BestMove = WhiteKingsideCastling))))
        {
            MovePieceSpecial = BestMove;
        }
        else
        {
            MovePieceSpecial = "";
        }
        Control.Wait(0);
        Event.BroadcastAndWait("movepiece");
        Event.Broadcast("SoundMove");
        Data.DeleteItem(Moves1, all);
        List.Add(Moves1, BestMove);
        Data.ReplaceItem(MovesIdx, 1, "1");
        Data.ReplaceItem(MovesCount, 1, "1");
        call ApplyMove(1);
        call DrawBoardAndWait;
        call AddBoardToHistory;
        List.Add(GameMovesAN, BestMoveAN);
        call GetRepetitionCount;
        if ((RepetitionCountRes > "2"))
        {
            Looks.Say("Draw!");
            Event.Broadcast("SoundDraw");
            Event.Broadcast("inputmode");
            IsGameSuspended = "1";
        }
        else
        {
            call IsDrawByMaterial;
            if ((IsDrawRes = "1"))
            {
                Looks.Say("Draw!");
                Event.Broadcast("SoundDraw");
                Event.Broadcast("inputmode");
                IsGameSuspended = "1";
            }
            else
            {
                call IsWhiteKingCheckMate;
                if ((IsWhiteKingCheckMateRes = "1"))
                {
                    Looks.Say("Checkmate!");
                    Event.Broadcast("SoundCheckmate");
                    Event.Broadcast("inputmode");
                    IsGameSuspended = "1";
                }
                else
                {
                    call IsDrawByStalemate(2);
                    if ((IsDrawRes = "1"))
                    {
                        Looks.Say("Draw!");
                        Event.Broadcast("SoundDraw");
                        Event.Broadcast("inputmode");
                        IsGameSuspended = "1";
                    }
                    else
                    {
                        call CalcBoardAttackedByMove(1);
                        if ((IsWhiteChecked = "1"))
                        {
                            call SayAsync("Check!")(2);
                            Event.Broadcast("SoundCheck");
                        }
                        if ((Board[(BestMove % 100)] = BlackKing))
                        {
                            HasBlackKingMoved = "1";
                        }
                        if ((Board[(BestMove % 100)] = BlackRook))
                        {
                            if ((floor((BestMove / 100)) = VirtualBoard[1]))
                            {
                                HasBlackRookQSMoved = "1";
                            }
                            if ((floor((BestMove / 100)) = VirtualBoard[8]))
                            {
                                HasBlackRookKSMoved = "1";
                            }
                        }
                        if (((BestMove = BlackQueensideCastling) OR (BestMove = BlackKingsideCastling)))
                        {
                            HasBlackKingMoved = "1";
                            HasBlackCastled = "1";
                        }
                    }
                }
            }
        }
    }
    call ExecuteMovePostProcess;
    call ExitExecution;
}

define ExecuteMovePostProcess (warp=false)
{
    MoveFromIdx = "-1";
    MoveToIdx = "-1";
    FromSquareIdx = "-1";
    ToSquareIdx = "-1";
    Event.BroadcastAndWait("fromsquareselected");
    Event.BroadcastAndWait("tosquareselected");
    Event.BroadcastAndWait("inputmode");
}

WhenBroadCastReceived(usermove)
{
    call ExecuteUserMove;
}

WhenBroadCastReceived(startgame)
{
    Event.Broadcast("calcmode");
    IsModeJunior = "0";
    IsModeProfiler = "0";
    IsModeDeepeningDebug = "0";
    IsModeCompetition = "0";
    MoveFromIdx = "-1";
    MoveToIdx = "-1";
    ProgressValue = "0";
    EvaluationValue = "0";
    Motion.GoToXY(240, 80);
    call InitBoard;
    call DrawBoardAndWait;
    call ExecuteInit;
    Event.Broadcast("inputmode");
}

define ExecuteUserMove (warp=false)
{
    call EnterExecution;
    if ((IsGameSuspended = "0"))
    {
        if (((Board[MoveFromIdx] < "0") AND not((MoveFromIdx = MoveToIdx))))
        {
            UserMove = "";
            if (((Board[MoveFromIdx] = WhiteKing) AND (MoveFromIdx = VirtualBoard[61])))
            {
                if (((MoveToIdx = VirtualBoard[59]) AND (Board[VirtualBoard[57]] = WhiteRook)))
                {
                    call CalculateMoves(2);
                    if (Data.ListContainsItem(Moves2, WhiteQueensideCastling))
                    {
                        UserMove = WhiteQueensideCastling;
                    }
                    else
                    {
                        UserMove = "6159";
                    }
                }
                if (((MoveToIdx = VirtualBoard[63]) AND (Board[VirtualBoard[64]] = WhiteRook)))
                {
                    call CalculateMoves(2);
                    if (Data.ListContainsItem(Moves2, WhiteKingsideCastling))
                    {
                        UserMove = WhiteKingsideCastling;
                    }
                    else
                    {
                        UserMove = "6163";
                    }
                }
            }
            if ((UserMove = ""))
            {
                UserMove = ((MoveFromIdx * 100) + MoveToIdx);
                if ((Variable.Length(UserMove) = "3"))
                {
                    UserMove = Operator.Join("0", UserMove);
                }
                if (((Board[MoveFromIdx] = WhitePawn) AND (MoveFromIdx < "17")))
                {
                    UserMove = Operator.Join(UserMove, ".1");
                }
            }
            MovePieceFromIdx = MoveFromIdx;
            MovePieceToIdx = MoveToIdx;
            if ((((UserMove = BlackQueensideCastling) OR (UserMove = BlackKingsideCastling)) OR ((UserMove = WhiteQueensideCastling) OR (UserMove = WhiteKingsideCastling))))
            {
                MovePieceSpecial = UserMove;
            }
            else
            {
                MovePieceSpecial = "";
            }
            Event.BroadcastAndWait("movepiece");
            Event.Broadcast("SoundMove");
            FromSquareIdx = "-1";
            ToSquareIdx = "-1";
            Event.BroadcastAndWait("fromsquareselected");
            Event.BroadcastAndWait("tosquareselected");
            call CalculateMoves(2);
            if (not(Data.ListContainsItem(Moves2, UserMove)))
            {
                Data.DeleteItem(Moves2, all);
                List.Add(Moves2, UserMove);
                Data.ReplaceItem(MovesIdx, 2, "1");
                Data.ReplaceItem(MovesCount, 2, "1");
                call ApplyMove(2);
                call CalcBoardAttackedByMove(1);
                if ((IsWhiteChecked = "1"))
                {
                    call SayAsync("Invalid move - Check!")(2);
                    Event.Broadcast("SoundInvalidMoveCheck");
                }
                else
                {
                    call SayAsync("Invalid move!")(2);
                    Event.Broadcast("SoundInvalidMove");
                }
                call RevertMove(2);
                call DrawBoardAndWait;
            }
            else
            {
                if (not((UserMove = floor(UserMove))))
                {
                    Looks.Say("Please select promotion piece");
                    Event.BroadcastAndWait("calcmode");
                    Event.BroadcastAndWait("selectpromotionpiecewhite");
                    Event.BroadcastAndWait("inputmode");
                    Looks.Say("");
                    if ((SelectedPromotionPiece = WhiteQueen))
                    {
                        UserMove = Operator.Join(floor(UserMove), ".1");
                    }
                    else
                    {
                        if ((SelectedPromotionPiece = WhiteRook))
                        {
                            UserMove = Operator.Join(floor(UserMove), ".2");
                        }
                        else
                        {
                            if ((SelectedPromotionPiece = WhiteBishop))
                            {
                                UserMove = Operator.Join(floor(UserMove), ".3");
                            }
                            else
                            {
                                if ((SelectedPromotionPiece = WhiteKnight))
                                {
                                    UserMove = Operator.Join(floor(UserMove), ".4");
                                }
                            }
                        }
                    }
                    repeat until((Variable.Length(UserMove) > "5"))
                    {
                        UserMove = Operator.Join("0", UserMove);
                    }
                }
                call GetMoveNotation(floor(UserMove));
                Data.DeleteItem(Moves2, all);
                List.Add(Moves2, UserMove);
                Data.ReplaceItem(MovesIdx, 2, "1");
                Data.ReplaceItem(MovesCount, 2, "1");
                call ApplyMove(2);
                call CalcBoardAttackedByMove(1);
                if ((IsWhiteChecked = "1"))
                {
                    call RevertMove(2);
                    call DrawBoardAndWait;
                    call SayAsync("Invalid move - Check!")(2);
                    Event.Broadcast("SoundInvalidMoveCheck");
                }
                else
                {
                    Looks.Think("Thinking...");
                    call DrawBoardAndWait;
                    Control.Wait(0);
                    Event.BroadcastAndWait("calcmode");
                    UserMoveAN = MoveNotationRes;
                    List.Add(GameMovesAN, UserMoveAN);
                    GameMoves = Operator.Join(GameMoves, UserMove);
                    call AddBoardToHistory;
                    call IsBlackKingCheckMate;
                    if ((IsBlackKingCheckMateRes = "1"))
                    {
                        Looks.Say("Checkmate!");
                        Event.Broadcast("SoundCheckmate");
                        Event.Broadcast("inputmode");
                        IsGameSuspended = "1";
                    }
                    else
                    {
                        call IsDrawByStalemate(1);
                        if ((IsDrawRes = "1"))
                        {
                            Looks.Say("Draw!");
                            Event.Broadcast("SoundDraw");
                            Event.Broadcast("inputmode");
                            IsGameSuspended = "1";
                        }
                        else
                        {
                            call GetRepetitionCount;
                            if ((RepetitionCountRes > "2"))
                            {
                                Looks.Say("Draw!");
                                Event.Broadcast("SoundDraw");
                                Event.Broadcast("inputmode");
                                IsGameSuspended = "1";
                            }
                            else
                            {
                                call IsDrawByMaterial;
                                if ((IsDrawRes = "1"))
                                {
                                    Looks.Say("Draw!");
                                    Event.Broadcast("SoundDraw");
                                    Event.Broadcast("inputmode");
                                    IsGameSuspended = "1";
                                }
                                else
                                {
                                    if ((Board[(UserMove % 100)] = WhiteKing))
                                    {
                                        HasWhiteKingMoved = "1";
                                    }
                                    if ((Board[(UserMove % 100)] = WhiteRook))
                                    {
                                        if ((floor((UserMove / 100)) = VirtualBoard[57]))
                                        {
                                            HasWhiteRookQSMoved = "1";
                                        }
                                        if ((floor((UserMove / 100)) = VirtualBoard[64]))
                                        {
                                            HasWhiteRookKSMoved = "1";
                                        }
                                    }
                                    if (((UserMove = WhiteQueensideCastling) OR (UserMove = WhiteKingsideCastling)))
                                    {
                                        HasWhiteCastled = "1";
                                        HasWhiteKingMoved = "1";
                                    }
                                    call ExecuteEngineMove;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    call ExecuteMovePostProcess;
    call ExitExecution;
}

WhenBroadCastReceived(sayasyncmsg)
{
    Looks.Say(SayAsyncText, SayAsyncDuration);
}

define SayAsync(string Text)(num Duration) (warp=false)
{
    SayAsyncText = Text;
    SayAsyncDuration = Duration;
    Event.Broadcast("sayasyncmsg");
}

define EnterExecution (warp=true)
{
    ExecutionDepth += 1;
    if ((ExecutionDepth > "0"))
    {
        IsExecutionRunning = "1";
    }
}

define ExitExecution (warp=false)
{
    ExecutionDepth += -1;
    if (not((ExecutionDepth > "0")))
    {
        IsExecutionRunning = "0";
    }
}

define ExportBoardFEN (warp=true)
{
    ExportDataFEN = "";
    ExportDataFENLichess = "https://lichess.org/analysis/";
    Idx = "1";
    repeat until((Idx > "64"))
    {
        if ((IsPlayerBlack = "0"))
        {
            CurrentPiece = Board[Idx];
        }
        else
        {
            CurrentPiece = (0 - Board[(65 - Idx)]);
        }
        if ((CurrentPiece = BlackPawn))
        {
            CurrentValue = "p";
        }
        if ((CurrentPiece = BlackKnight))
        {
            CurrentValue = "n";
        }
        if ((CurrentPiece = BlackBishop))
        {
            CurrentValue = "b";
        }
        if ((CurrentPiece = BlackRook))
        {
            CurrentValue = "r";
        }
        if ((CurrentPiece = BlackQueen))
        {
            CurrentValue = "q";
        }
        if ((CurrentPiece = BlackKing))
        {
            CurrentValue = "k";
        }
        if ((CurrentPiece = WhitePawn))
        {
            CurrentValue = "P";
        }
        if ((CurrentPiece = WhiteKnight))
        {
            CurrentValue = "N";
        }
        if ((CurrentPiece = WhiteBishop))
        {
            CurrentValue = "B";
        }
        if ((CurrentPiece = WhiteRook))
        {
            CurrentValue = "R";
        }
        if ((CurrentPiece = WhiteQueen))
        {
            CurrentValue = "Q";
        }
        if ((CurrentPiece = WhiteKing))
        {
            CurrentValue = "K";
        }
        if ((CurrentPiece = Empty))
        {
            IdxSub = Idx;
            repeat until((((IdxSub % 8) = "0") OR (((IsPlayerBlack = "0") AND not((Board[(IdxSub + 1)] = Empty))) OR ((IsPlayerBlack = "1") AND not((Board[(65 - (IdxSub + 1))] = Empty))))))
            {
                IdxSub += 1;
            }
            CurrentValue = ((IdxSub - Idx) + 1);
            Idx += (IdxSub - Idx);
        }
        ExportDataFEN = Operator.Join(ExportDataFEN, CurrentValue);
        ExportDataFENLichess = Operator.Join(ExportDataFENLichess, CurrentValue);
        if ((((Idx % 8) = "0") AND (Idx < "64")))
        {
            ExportDataFEN = Operator.Join(ExportDataFEN, "/");
            ExportDataFENLichess = Operator.Join(ExportDataFENLichess, "/");
        }
        Idx += 1;
    }
    if ((IsPlayerBlack = "0"))
    {
        ExportDataFEN = Operator.Join(ExportDataFEN, " w");
        ExportDataFENLichess = Operator.Join(ExportDataFENLichess, "_w");
    }
    else
    {
        ExportDataFEN = Operator.Join(ExportDataFEN, " b");
        ExportDataFENLichess = Operator.Join(ExportDataFENLichess, "_b");
    }
}

define IsValidMove(num Move) (warp=true)
{
    ValidMoveRes = "1";
    if ((((Move < "0") OR (Move > "9999")) OR (((floor((Move / 100)) = "0") OR (floor((Move % 100)) = "0")) AND not((((Move = BlackQueensideCastling) OR (Move = BlackKingsideCastling)) OR ((Move = WhiteQueensideCastling) OR (Move = WhiteKingsideCastling)))))))
    {
        ValidMoveRes = "0";
    }
}

define IsBlackKingCheckMate (warp=true)
{
    IsBlackKingCheckMateRes = "0";
    call CalcBoardAttackedByMove(2);
    if ((IsBlackChecked = "1"))
    {
        IsBlackKingCheckMateRes = "1";
        call CalculateMoves(1);
        Data.ReplaceItem(MovesIdx, 1, "1");
        repeat (MovesCount[1])
        {
            if ((IsBlackKingCheckMateRes = "1"))
            {
                call ApplyMove(1);
                call CalcBoardAttackedByMove(2);
                if ((IsBlackChecked = "0"))
                {
                    IsBlackKingCheckMateRes = "0";
                }
                call RevertMove(1);
            }
            Data.ReplaceItem(MovesIdx, 1, (MovesIdx[1] + 1));
        }
    }
}

define IsWhiteKingCheckMate (warp=true)
{
    IsWhiteKingCheckMateRes = "0";
    call CalcBoardAttackedByMove(1);
    if ((IsWhiteChecked = "1"))
    {
        IsWhiteKingCheckMateRes = "1";
        call CalculateMoves(2);
        Data.ReplaceItem(MovesIdx, 2, "1");
        repeat (MovesCount[2])
        {
            if ((IsWhiteKingCheckMateRes = "1"))
            {
                call ApplyMove(2);
                call CalcBoardAttackedByMove(1);
                if ((IsWhiteChecked = "0"))
                {
                    IsWhiteKingCheckMateRes = "0";
                }
                call RevertMove(2);
            }
            Data.ReplaceItem(MovesIdx, 2, (MovesIdx[2] + 1));
        }
    }
}

define CalculateMovesImpl(num Depth)(bool CalcAttackState)(bool CapturesOnly) (warp=true)
{
    if ((IsProfilerEnabled = "1"))
    {
        if (CalcAttackState)
        {
            call Profile_MethodEnter((30 + Depth));
        }
        else
        {
            if (CapturesOnly)
            {
                call Profile_MethodEnter((60 + Depth));
            }
            else
            {
                call Profile_MethodEnter((90 + Depth));
            }
        }
    }
    IsBlackMove = (Depth % 2);
    if ((not(CalcAttackState) AND not(CapturesOnly)))
    {
        if ((IsBlackMove = "1"))
        {
            Data.ReplaceItem(BlackMobBonus, Depth, "0");
        }
        else
        {
            Data.ReplaceItem(WhiteMobBonus, Depth, "0");
        }
        SourceIdxOuter = "1";
        repeat (64)
        {
            Data.ReplaceItem(PieceMobility, SourceIdxOuter, "0");
            SourceIdxOuter += 1;
        }
    }
    call ClearMoveList(Depth);
    SourceIdxOuter = "1";
    repeat (64)
    {
        if (not((Board[SourceIdxOuter] = "0")))
        {
            CurrentPiece = Board[SourceIdxOuter];
            if ((IsBlackMove = "1"))
            {
                if ((CurrentPiece > "0"))
                {
                    call CalculateMovesForSource(Depth)(SourceIdxOuter)(CalcAttackState)(CapturesOnly);
                    if ((not(CalcAttackState) AND not(CapturesOnly)))
                    {
                        if ((CurrentPiece = BlackRook))
                        {
                            Data.ReplaceItem(BlackMobBonus, Depth, (BlackMobBonus[Depth] + RookMobilityBonus[(PieceMobility[SourceIdxOuter] + 1)]));
                        }
                        else
                        {
                            if ((CurrentPiece = BlackQueen))
                            {
                                Data.ReplaceItem(BlackMobBonus, Depth, (BlackMobBonus[Depth] + QueenMobilityBonus[(PieceMobility[SourceIdxOuter] + 1)]));
                            }
                            else
                            {
                                if ((CurrentPiece = BlackBishop))
                                {
                                    Data.ReplaceItem(BlackMobBonus, Depth, (BlackMobBonus[Depth] + BishopMobilityBonus[(PieceMobility[SourceIdxOuter] + 1)]));
                                }
                                else
                                {
                                    if ((CurrentPiece = BlackKnight))
                                    {
                                        Data.ReplaceItem(BlackMobBonus, Depth, (BlackMobBonus[Depth] + KnightMobilityBonus[(PieceMobility[SourceIdxOuter] + 1)]));
                                    }
                                    else
                                    {
                                        if ((CurrentPiece = BlackKing))
                                        {
                                            if (((IsEndgame2 = "1") AND ((BlackQueenCount = "0") AND (BlackMinorCount = "0"))))
                                            {
                                                Data.ReplaceItem(BlackMobBonus, Depth, (BlackMobBonus[Depth] + (PieceMobility[SourceIdxOuter] * 10)));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                if ((CurrentPiece < "0"))
                {
                    call CalculateMovesForSource(Depth)(SourceIdxOuter)(CalcAttackState)(CapturesOnly);
                    if ((not(CalcAttackState) AND not(CapturesOnly)))
                    {
                        if ((CurrentPiece = WhiteRook))
                        {
                            Data.ReplaceItem(WhiteMobBonus, Depth, (WhiteMobBonus[Depth] + RookMobilityBonus[(PieceMobility[SourceIdxOuter] + 1)]));
                        }
                        else
                        {
                            if ((CurrentPiece = WhiteQueen))
                            {
                                Data.ReplaceItem(WhiteMobBonus, Depth, (WhiteMobBonus[Depth] + QueenMobilityBonus[(PieceMobility[SourceIdxOuter] + 1)]));
                            }
                            else
                            {
                                if ((CurrentPiece = WhiteBishop))
                                {
                                    Data.ReplaceItem(WhiteMobBonus, Depth, (WhiteMobBonus[Depth] + BishopMobilityBonus[(PieceMobility[SourceIdxOuter] + 1)]));
                                }
                                else
                                {
                                    if ((CurrentPiece = WhiteKnight))
                                    {
                                        Data.ReplaceItem(WhiteMobBonus, Depth, (WhiteMobBonus[Depth] + KnightMobilityBonus[(PieceMobility[SourceIdxOuter] + 1)]));
                                    }
                                    else
                                    {
                                        if ((CurrentPiece = WhiteKing))
                                        {
                                            if (((IsEndgame2 = "1") AND ((WhiteQueenCount = "0") AND (WhiteMinorCount = "0"))))
                                            {
                                                Data.ReplaceItem(WhiteMobBonus, Depth, (WhiteMobBonus[Depth] + (PieceMobility[SourceIdxOuter] * 10)));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        SourceIdxOuter += 1;
    }
    if ((not(CalcAttackState) AND not(CapturesOnly)))
    {
        if (((Depth % 2) = "1"))
        {
            if (((HasBlackKingMoved = "0") AND (HasBlackCastled = "0")))
            {
                if (((((Board[VirtualBoard[1]] = BlackRook) AND (Board[VirtualBoard[2]] = Empty)) AND ((Board[VirtualBoard[3]] = Empty) AND (Board[VirtualBoard[4]] = Empty))) AND (Board[VirtualBoard[5]] = BlackKing)))
                {
                    if (((Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], VirtualBoard[3]) = "0") AND ((Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], VirtualBoard[4]) = "0") AND (Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], VirtualBoard[5]) = "0"))))
                    {
                        if ((HasBlackRookQSMoved = "0"))
                        {
                            call AddSpecialMove(BlackQueensideCastling)(Depth);
                        }
                    }
                }
                if ((((Board[VirtualBoard[5]] = BlackKing) AND (Board[VirtualBoard[6]] = Empty)) AND ((Board[VirtualBoard[7]] = Empty) AND (Board[VirtualBoard[8]] = BlackRook))))
                {
                    if (((Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], VirtualBoard[5]) = "0") AND ((Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], VirtualBoard[6]) = "0") AND (Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], VirtualBoard[7]) = "0"))))
                    {
                        if ((HasBlackRookKSMoved = "0"))
                        {
                            call AddSpecialMove(BlackKingsideCastling)(Depth);
                        }
                    }
                }
            }
        }
        else
        {
            if (((HasWhiteKingMoved = "0") AND (HasWhiteCastled = "0")))
            {
                if ((((Board[VirtualBoard[57]] = WhiteRook) AND (Board[VirtualBoard[58]] = Empty)) AND ((Board[VirtualBoard[59]] = Empty) AND ((Board[VirtualBoard[60]] = Empty) AND (Board[VirtualBoard[61]] = WhiteKing)))))
                {
                    if (((Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], VirtualBoard[59]) = "0") AND ((Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], VirtualBoard[60]) = "0") AND (Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], VirtualBoard[61]) = "0"))))
                    {
                        if ((HasWhiteRookQSMoved = "0"))
                        {
                            call AddSpecialMove(WhiteQueensideCastling)(Depth);
                        }
                    }
                }
                if ((((Board[VirtualBoard[62]] = Empty) AND (Board[VirtualBoard[61]] = WhiteKing)) AND ((Board[VirtualBoard[63]] = Empty) AND (Board[VirtualBoard[64]] = WhiteRook))))
                {
                    if (((Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], VirtualBoard[61]) = "0") AND ((Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], VirtualBoard[62]) = "0") AND (Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], VirtualBoard[63]) = "0"))))
                    {
                        if ((HasWhiteRookKSMoved = "0"))
                        {
                            call AddSpecialMove(WhiteKingsideCastling)(Depth);
                        }
                    }
                }
            }
        }
    }
    if ((IsProfilerEnabled = "1"))
    {
        if (CalcAttackState)
        {
            call Profile_MethodExit((30 + Depth));
        }
        else
        {
            if (CapturesOnly)
            {
                call Profile_MethodExit((60 + Depth));
            }
            else
            {
                call Profile_MethodExit((90 + Depth));
            }
        }
    }
}

define GetMoveScore(num SourcePiece)(num TargetPiece)(num FromIdx)(num ToIdx)(num Move)(num Depth) (warp=true)
{
    if (not((abs(TargetPiece) < abs(SourcePiece))))
    {
        MoveScoreRes = ((0 - SourcePiece) - (10 * TargetPiece));
        Stop(this script);
    }
    if ((TargetPiece = "0"))
    {
        if ((Depth < "6"))
        {
            if ((Depth = "5"))
            {
                if (Data.ListContainsItem(KillerMoves5, Move))
                {
                    MoveScoreRes = (80 + List.IndexOf(KillerMoves5, Move));
                    Stop(this script);
                }
            }
            else
            {
                if ((Depth = "4"))
                {
                    if (Data.ListContainsItem(KillerMoves4, Move))
                    {
                        MoveScoreRes = (-80 - List.IndexOf(KillerMoves4, Move));
                        Stop(this script);
                    }
                }
                else
                {
                    if ((Depth = "3"))
                    {
                        if (Data.ListContainsItem(KillerMoves3, Move))
                        {
                            MoveScoreRes = (80 + List.IndexOf(KillerMoves3, Move));
                            Stop(this script);
                        }
                    }
                    else
                    {
                        if ((Depth = "2"))
                        {
                            if (Data.ListContainsItem(KillerMoves2, Move))
                            {
                                MoveScoreRes = (-80 - List.IndexOf(KillerMoves2, Move));
                                Stop(this script);
                            }
                        }
                    }
                }
            }
        }
        else
        {
            if ((Depth = "6"))
            {
                if (Data.ListContainsItem(KillerMoves6, Move))
                {
                    MoveScoreRes = (-80 - List.IndexOf(KillerMoves6, Move));
                    Stop(this script);
                }
            }
            else
            {
                if ((Depth = "7"))
                {
                    if (Data.ListContainsItem(KillerMoves7, Move))
                    {
                        MoveScoreRes = (80 + List.IndexOf(KillerMoves7, Move));
                        Stop(this script);
                    }
                }
                else
                {
                    if ((Depth = "8"))
                    {
                        if (Data.ListContainsItem(KillerMoves8, Move))
                        {
                            MoveScoreRes = (-80 - List.IndexOf(KillerMoves8, Move));
                            Stop(this script);
                        }
                    }
                }
            }
        }
    }
    MoveScoreRes = (0 - TargetPiece);
    if ((SourcePiece > "0"))
    {
        if ((BoardAttackedCalculated[Depth] = "1"))
        {
            if (((Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], FromIdx) > "0") AND ((Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], FromIdx) = "0") OR (PieceIdxLookup[SourcePiece] > Operator.LetterOf(BoardAttackedByWhitePieceSnapshot[Depth], FromIdx)))))
            {
                if ((Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], ToIdx) = "0"))
                {
                    MoveScoreRes += SourcePiece;
                }
            }
            else
            {
                if ((Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], ToIdx) > "0"))
                {
                    MoveScoreRes += (0 - SourcePiece);
                }
            }
        }
        MoveScoreRes += MovePosLookupBlack[((PieceIdxLookup[SourcePiece] * 10000) + Move)];
    }
    else
    {
        if ((BoardAttackedCalculated[Depth] = "1"))
        {
            if (((Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], FromIdx) > "0") AND ((Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], FromIdx) = "0") OR (PieceIdxLookup[(0 - SourcePiece)] > Operator.LetterOf(BoardAttackedByBlackPieceSnapshot[Depth], FromIdx)))))
            {
                if ((Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], ToIdx) = "0"))
                {
                    MoveScoreRes += SourcePiece;
                }
            }
            else
            {
                if ((Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], ToIdx) > "0"))
                {
                    MoveScoreRes += (0 - SourcePiece);
                }
            }
        }
        MoveScoreRes += MovePosLookupWhite[((PieceIdxLookup[(0 - SourcePiece)] * 10000) + Move)];
    }
}

define InitKingSafety (warp=true)
{
    Data.DeleteItem(PawnStorm, all);
    call LoadList("42, -134, -87, 44, 27, 21, 24, 0, 21, -8, 58, 22, 18, -3, 11, 0,  2, 24, 76, 17, 3, -7, -1, 0, -5, -7, 42, 7, 1, -3, -8, 0, -5, -7, 42, 7, 1, -3, -8, 0,  2, 24, 76, 17, 3, -7, -1, 0, 21, -8, 58, 22, 18, -3, 11, 0, 42, -134, -87, 44, 27, 21, 24, 0,")("PawnStorm");
    Data.DeleteItem(PawnShelter, all);
    call LoadList("-3, 38, 44, 27, 18, 8, 12, 0, -20, 29, 16, -23, -14, -5, -30, 0, -5, 35, 11, -1, 15, 1, -21, 0, -18, -6, -14, -24, -23, -31, -78, 0, -18, -6, -14, -24, -23, -31, -78, 0, -5, 35, 11, -1, 15, 1, -21, 0, -20, 29, 16, -23, -14, -5, -30, 0, -3, 38, 44, 27, 18, 8, 12, 0,")("PawnShelter");
}

define ImportBoardFEN(string ImpBoard) (warp=false)
{
    Idx = "1";
    repeat (64)
    {
        Data.ReplaceItem(Board, Idx, Empty);
        Idx += 1;
    }
    if ((IsPlayerBlack = "0"))
    {
        Idx = "1";
        IdxInc = "1";
    }
    else
    {
        Idx = "64";
        IdxInc = "-1";
    }
    IdxString = "1";
    repeat until((((Idx > "64") OR (Idx < "1")) OR (IdxString > Variable.Length(ImpBoard))))
    {
        CurrentValue = Operator.LetterOf(ImpBoard, IdxString);
        if ((not((CurrentValue < "A")) AND not((CurrentValue > "Z"))))
        {
            CurrentPiece = Empty;
            if ((CurrentValue = "P"))
            {
                CurrentPiece = BlackPawn;
            }
            if ((CurrentValue = "N"))
            {
                CurrentPiece = BlackKnight;
            }
            if ((CurrentValue = "B"))
            {
                CurrentPiece = BlackBishop;
            }
            if ((CurrentValue = "R"))
            {
                CurrentPiece = BlackRook;
            }
            if ((CurrentValue = "Q"))
            {
                CurrentPiece = BlackQueen;
            }
            if ((CurrentValue = "K"))
            {
                CurrentPiece = BlackKing;
            }
            call IsLowerCase(CurrentValue);
            if ((IsLowerCaseRes = "0"))
            {
                CurrentPiece = (CurrentPiece * -1);
            }
            if ((IsPlayerBlack = "1"))
            {
                CurrentPiece = (CurrentPiece * -1);
            }
            Data.ReplaceItem(Board, Idx, CurrentPiece);
            Idx += IdxInc;
        }
        else
        {
            if ((not((CurrentValue < "0")) AND not((CurrentValue > "9"))))
            {
                repeat (CurrentValue)
                {
                    Data.ReplaceItem(Board, Idx, Empty);
                    Idx += IdxInc;
                }
            }
            else
            {
                if ((CurrentValue = "/"))
                {
                    repeat until(((((Idx % 8) = "1") AND (IsPlayerBlack = "0")) OR (((Idx % 8) = "0") AND (IsPlayerBlack = "1"))))
                    {
                        Data.ReplaceItem(Board, Idx, Empty);
                        Idx += IdxInc;
                    }
                }
            }
        }
        IdxString += 1;
    }
}

define OnProgressChanged(num Progress) (warp=true)
{
    if ((Progress < "100"))
    {
        ProgressValue = Progress;
    }
    else
    {
        ProgressValue = "100";
    }
    Event.Broadcast("progressvaluechangedinternal");
    Control.Wait(0);
}

define Profile_MethodExit(num Id) (warp=false)
{
    if ((IsProfilerEnabled > "0"))
    {
        Data.ReplaceItem(Profile_Data, Id, (Profile_Data[Id] + ((Sensing.DaysSince2000() * 24) * 3600)));
    }
}

define CalcBoardAttackedByMove(string Depth) (warp=true)
{
    call ClearBoardAttackedByMove(Depth);
    call CalculateMovesImpl(Depth)(("1" = "1"))(("1" = "0"));
}

define Profile_Reset (warp=true)
{
    Data.DeleteItem(Profile_Data, all);
}

define Profile_MethodEnter(num Id) (warp=true)
{
    if ((IsProfilerEnabled > "0"))
    {
        repeat until(not((List.Length(Profile_Data) < Id)))
        {
            List.Add(Profile_Data, "0");
        }
        Data.ReplaceItem(Profile_Data, Id, (Profile_Data[Id] - ((Sensing.DaysSince2000() * 24) * 3600)));
    }
}

define AlphaBetaMinMaxImpl(string Depth)(string MinDepth)(string MaxDepth)(bool InitialDeepening)(string QuiescenceDepth)(bool Quiescence)(bool PrevQuiescence)(bool ShowProgress) (warp=true)
{
    Data.ReplaceItem(MinMaxResults, Depth, "");
    if ((IsMinMaxTimeout = "1"))
    {
        Stop(this script);
    }
    if ((Depth > "1"))
    {
        if ((TargetPieces[(Depth - 1)] = WhiteKing))
        {
            Data.ReplaceItem(MinMaxResults, Depth, (100000 - (Depth * 1000)));
            Stop(this script);
        }
        else
        {
            if ((TargetPieces[(Depth - 1)] = BlackKing))
            {
                Data.ReplaceItem(MinMaxResults, Depth, (-100000 + (Depth * 1000)));
                Stop(this script);
            }
        }
    }
    if (Quiescence)
    {
        call OnScoreCalc((Depth - 1))(MinDepth)((Depth - 1))(PrevQuiescence);
        Data.ReplaceItem(MinMaxResults, Depth, ScoreCalcRes);
    }
    else
    {
        call OnScoreCalc((Depth - 1))(MinDepth)((MaxDepth - 1))(PrevQuiescence);
    }
    if ((Depth = MaxDepth))
    {
        Data.ReplaceItem(MinMaxResults, Depth, ScoreCalcRes);
        Stop(this script);
    }
    if (Quiescence)
    {
        if (((Depth % 2) = "1"))
        {
            if (not((ScoreCalcRes < Betas[Depth])))
            {
                Data.ReplaceItem(MinMaxResults, Depth, Betas[Depth]);
                call TTStoreNode(CurrentBoardHash)(Depth)(MinMaxResults[Depth])("")("B")("")("-1")("")("")("")("");
                Stop(this script);
            }
            if ((ScoreCalcRes > Alphas[Depth]))
            {
                Data.ReplaceItem(Alphas, Depth, ScoreCalcRes);
            }
        }
        else
        {
            if (not((ScoreCalcRes > Alphas[Depth])))
            {
                Data.ReplaceItem(MinMaxResults, Depth, Alphas[Depth]);
                call TTStoreNode(CurrentBoardHash)(Depth)(MinMaxResults[Depth])("")("A")("")("-1")("")("")("")("");
                Stop(this script);
            }
            if ((ScoreCalcRes < Betas[Depth]))
            {
                Data.ReplaceItem(Betas, Depth, ScoreCalcRes);
            }
        }
    }
    Data.ReplaceItem(BestMoves, Depth, "");
    Data.ReplaceItem(AlphasOld, Depth, Alphas[Depth]);
    Data.ReplaceItem(BetasOld, Depth, Betas[Depth]);
    Data.ReplaceItem(PawnPromotionFile, Depth, "");
    if ((Depth = "1"))
    {
        call InitAlphaBeta(Depth)(MaxDepth)(InitialDeepening);
        call CalcBoardAttackedByMove("1");
        call StoreAttackInfo("1")("1");
        call CalcBoardAttackedByMove("2");
        call StoreAttackInfo("2")("1");
        Data.ReplaceItem(CheckedState, 1, IsBlackChecked);
        Data.ReplaceItem(BoardAttackedCalculated, Depth, "1");
        call CalculateMovesImpl(1)(("1" = "0"))(("1" = "0"));
        call CalculateMovesImpl(2)(("1" = "0"))(("1" = "0"));
        Data.ReplaceItem(WhiteMobBonus, 1, WhiteMobBonus[2]);
    }
    else
    {
        Data.ReplaceItem(BoardAttackedByBlackSnapshot, Depth, BoardAttackedByBlackSnapshot[(Depth - 1)]);
        Data.ReplaceItem(BoardAttackedByBlackPieceSnapshot, Depth, BoardAttackedByBlackPieceSnapshot[(Depth - 1)]);
        Data.ReplaceItem(BoardAttackedByWhiteSnapshot, Depth, BoardAttackedByWhiteSnapshot[(Depth - 1)]);
        Data.ReplaceItem(BoardAttackedByWhitePieceSnapshot, Depth, BoardAttackedByWhitePieceSnapshot[(Depth - 1)]);
        Data.ReplaceItem(CheckedState, Depth, PutsInCheck[(Depth - 1)]);
        Data.ReplaceItem(BoardAttackedCalculated, Depth, "0");
        Data.ReplaceItem(BlackMobBonus, Depth, BlackMobBonus[(Depth - 1)]);
        Data.ReplaceItem(WhiteMobBonus, Depth, WhiteMobBonus[(Depth - 1)]);
    }
    if (((MinDepth = "1") AND (Depth > "1")))
    {
        if ((not(PrevQuiescence) AND (IsEndgame = "1")))
        {
            call IsDrawByMaterial;
            if ((IsDrawRes = "1"))
            {
                Data.ReplaceItem(MinMaxResults, Depth, "0");
                Stop(this script);
            }
        }
        if ((not(PrevQuiescence) AND ((Depth = "2") OR (CheckedState[(Depth - 1)] = "1"))))
        {
            call CalcBoardAttackedByMove(Depth);
            if (((Depth % 2) = "1"))
            {
                if ((IsWhiteChecked = "1"))
                {
                    Data.ReplaceItem(MinMaxResults, Depth, (100000 - (Depth * 1000)));
                    Stop(this script);
                }
            }
            else
            {
                if ((IsBlackChecked = "1"))
                {
                    Data.ReplaceItem(MinMaxResults, Depth, (-100000 + (Depth * 1000)));
                    Stop(this script);
                }
            }
        }
        if ((Depth = "2"))
        {
            call IsDrawByStalemate(Depth);
            if ((IsDrawRes = "1"))
            {
                Data.ReplaceItem(MinMaxResults, Depth, "0");
                Stop(this script);
            }
        }
        if ((not(PrevQuiescence) AND (IsInNullMove = "0")))
        {
            Count = "0";
            Idx = "1";
            repeat until((Idx > List.Length(BoardHistoryHash)))
            {
                if ((CurrentBoardHash = BoardHistoryHash[Idx]))
                {
                    Count += 1;
                }
                Idx += 1;
            }
            Idx = "2";
            repeat until(not((Idx < Depth)))
            {
                if ((CurrentBoardHash = PreviousBoardHash[Idx]))
                {
                    Count += 1;
                }
                Idx += 1;
            }
            if ((Count > "1"))
            {
                Data.ReplaceItem(MinMaxResults, Depth, "0");
                Stop(this script);
            }
        }
        if ((IsEndgame = "1"))
        {
            if (not(PrevQuiescence))
            {
                if ((((WhiteQueenCount + WhiteMinorCount) = "0") AND ((BlackQueenCount + BlackMinorCount) = "0")))
                {
                    if (((BlackPawnCount + WhitePawnCount) = "1"))
                    {
                        Idx = "1";
                        repeat (64)
                        {
                            if (((Board[Idx] = WhitePawn) AND (((Depth % 2) = "0") AND (IdxToRank[Idx] > "2"))))
                            {
                                if (((IdxToFile[Idx] = "1") OR (IdxToFile[Idx] = "8")))
                                {
                                    if (((IdxToFile[Idx] = IdxToFile[BlackKingIdx]) AND (IdxToRank[BlackKingIdx] < IdxToRank[Idx])))
                                    {
                                        Data.ReplaceItem(MinMaxResults, Depth, "0");
                                        Stop(this script);
                                    }
                                }
                                else
                                {
                                    if (((Board[(Idx - 8)] = BlackKing) OR (Board[(Idx - 16)] = BlackKing)))
                                    {
                                        if ((((Depth % 2) = "1") OR (not((Board[(Idx - 1)] = WhiteKing)) AND not((Board[(Idx + 1)] = WhiteKing)))))
                                        {
                                            Data.ReplaceItem(MinMaxResults, Depth, "0");
                                            Stop(this script);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (((Board[Idx] = BlackPawn) AND (((Depth % 2) = "1") AND (IdxToRank[Idx] < "7"))))
                                {
                                    if (((IdxToFile[Idx] = "1") OR (IdxToFile[Idx] = "8")))
                                    {
                                        if (((IdxToFile[Idx] = IdxToFile[WhiteKingIdx]) AND (IdxToRank[WhiteKingIdx] > IdxToRank[Idx])))
                                        {
                                            Data.ReplaceItem(MinMaxResults, Depth, "0");
                                            Stop(this script);
                                        }
                                    }
                                    else
                                    {
                                        if (((Board[(Idx + 8)] = WhiteKing) OR (Board[(Idx + 16)] = WhiteKing)))
                                        {
                                            if ((((Depth % 2) = "0") OR (not((Board[(Idx - 1)] = BlackKing)) AND not((Board[(Idx + 1)] = BlackKing)))))
                                            {
                                                Data.ReplaceItem(MinMaxResults, Depth, "0");
                                                Stop(this script);
                                            }
                                        }
                                    }
                                }
                            }
                            Idx += 1;
                        }
                    }
                }
            }
        }
    }
    if (((Depth > "1") AND not(Data.ListContainsItem(BoardHistoryHash, CurrentBoardHash))))
    {
        call TTProbeNode(CurrentBoardHash)(Depth);
        if ((((TTProbeRes = "1") AND ((not((TTProbeNodeScoreRes = "")) AND not((TTProbeNodeScoreRes = "0"))) AND not((TTProbeNodeScoreRes = "0")))) AND (((not(Quiescence) AND not((TTProbeHorizonRes = "-1"))) AND (not((TTProbeHorizonRes < (MaxDepth - Depth))) OR (abs(TTProbeNodeScoreRes) > (BlackKing / 2)))) OR (Quiescence AND (TTProbeHorizonRes = "-1")))))
        {
            if (((TTProbeNodeTypeRes = "E") OR (((TTProbeNodeTypeRes = "A") AND not((TTProbeNodeScoreRes > Alphas[Depth]))) OR ((TTProbeNodeTypeRes = "B") AND not((TTProbeNodeScoreRes < Betas[Depth]))))))
            {
                Data.ReplaceItem(MinMaxResults, Depth, TTProbeNodeScoreRes);
                if ((Depth = "1"))
                {
                    List.DeleteAll(MinMaxMovesRes);
                    List.Add(MinMaxMovesRes, TTProbeBestMoveRes);
                }
                if ((IsProfilerEnabled > "0"))
                {
                    call Profile_IncCounter((180 + Depth));
                }
                Stop(this script);
            }
        }
    }
    if (not(Quiescence))
    {
        if ((((IsInNullMove = "0") AND (IsEndgame = "0")) AND (((Depth > "1") AND ((MaxDepth - Depth) > "1")) AND (((Betas[Depth] - Alphas[Depth]) = "1") AND ((CheckedState[(Depth - 1)] = "0") AND (CheckedState[Depth] = "0"))))))
        {
            IsInNullMove += 1;
            if (((((Depth % 2) = "0") AND ((WhiteMinorCount > "0") OR (WhiteQueenCount > "0"))) OR (((Depth % 2) = "1") AND ((BlackMinorCount > "0") OR (BlackQueenCount > "0")))))
            {
                call OnScoreCalc((Depth - 1))(MinDepth)((Depth - 1))(Quiescence);
                if ((((Depth % 2) = "1") AND not((ScoreCalcRes < Betas[Depth]))))
                {
                    call ClearMoveList((Depth + 0));
                    call AddMoveToList("0000")("0")((Depth + 0));
                    Data.ReplaceItem(MovesIdx, (Depth + 0), "1");
                    call ApplyMove((Depth + 0));
                    call OnScoreCalc((Depth + 0))(MinDepth)((MaxDepth - 1))(Quiescence);
                    Data.ReplaceItem(Alphas, (Depth + 1), (Betas[Depth] - 1));
                    Data.ReplaceItem(Betas, (Depth + 1), Betas[Depth]);
                    if (((MaxDepth - Depth) > "2"))
                    {
                        call AlphaBetaMinMaxImpl((Depth + 1))(MinDepth)((MaxDepth - 1))(InitialDeepening)(QuiescenceDepth)(Quiescence)(Quiescence)(ShowProgress);
                    }
                    else
                    {
                        call AlphaBetaMinMaxImpl((Depth + 1))(MinDepth)((MaxDepth - 0))(InitialDeepening)(QuiescenceDepth)(Quiescence)(Quiescence)(ShowProgress);
                    }
                    Score = MinMaxResults[(Depth + 1)];
                    call RevertMove((Depth + 0));
                    if ((not((Score < Betas[Depth])) AND not((abs(Score) > (BlackKing / 2)))))
                    {
                        Data.ReplaceItem(MinMaxResults, Depth, Betas[Depth]);
                        IsInNullMove += -1;
                        Stop(this script);
                    }
                }
                if ((((Depth % 2) = "0") AND not((ScoreCalcRes > Alphas[Depth]))))
                {
                    call ClearMoveList((Depth + 0));
                    call AddMoveToList("0000")("0")((Depth + 0));
                    Data.ReplaceItem(MovesIdx, (Depth + 0), "1");
                    call ApplyMove((Depth + 0));
                    call OnScoreCalc((Depth + 0))(MinDepth)((MaxDepth - 1))(Quiescence);
                    Data.ReplaceItem(Alphas, (Depth + 1), Alphas[Depth]);
                    Data.ReplaceItem(Betas, (Depth + 1), (Alphas[Depth] + 1));
                    if (((MaxDepth - Depth) > "2"))
                    {
                        call AlphaBetaMinMaxImpl((Depth + 1))(MinDepth)((MaxDepth - 1))(InitialDeepening)(QuiescenceDepth)(Quiescence)(Quiescence)(ShowProgress);
                    }
                    else
                    {
                        call AlphaBetaMinMaxImpl((Depth + 1))(MinDepth)((MaxDepth - 0))(InitialDeepening)(QuiescenceDepth)(Quiescence)(Quiescence)(ShowProgress);
                    }
                    Score = MinMaxResults[(Depth + 1)];
                    call RevertMove((Depth + 0));
                    if ((not((Score > Alphas[Depth])) AND not((abs(Score) > (BlackKing / 2)))))
                    {
                        Data.ReplaceItem(MinMaxResults, Depth, Alphas[Depth]);
                        IsInNullMove += -1;
                        Stop(this script);
                    }
                }
            }
            IsInNullMove += -1;
        }
    }
    Data.ReplaceItem(PickPhase, Depth, "1");
    Data.ReplaceItem(PickMoveRes, Depth, "1");
    repeat until((PickMoveRes[Depth] = "0"))
    {
        if ((IsMinMaxTimeout = "0"))
        {
            if ((Depth < "4"))
            {
                if ((((Sensing.DaysSince2000() * 86400) - ThinkTimeStart) > ThinkTimeLimitMinMax))
                {
                    IsMinMaxTimeout = "1";
                }
            }
        }
        if ((IsMinMaxTimeout = "1"))
        {
            Stop(this script);
        }
        if ((IsProfilerEnabled > "0"))
        {
            call Profile_MethodEnter((150 + Depth));
        }
        call PickMove(Depth)((MaxDepth - 1))(InitialDeepening)(Quiescence)(PrevQuiescence);
        if ((IsProfilerEnabled > "0"))
        {
            call Profile_MethodExit((150 + Depth));
        }
        if ((PickMoveRes[Depth] = "1"))
        {
            if ((ShowProgress AND (Depth < "3")))
            {
                if (((Sensing.DaysSince2000() * 86400) > (PrevProgressUpdate + 1)))
                {
                    call OnProgressChanged(((((Sensing.DaysSince2000() * 86400) - ThinkTimeStart) / ThinkTimeLimit) * 100));
                    PrevProgressUpdate = (Sensing.DaysSince2000() * 86400);
                }
            }
            Data.ReplaceItem(PutsInCheck, Depth, "0");
            Data.ReplaceItem(PutsInFork, Depth, "0");
            Data.ReplaceItem(PlyExtension, Depth, "0");
            if (not(Quiescence))
            {
                TargetIdx = floor((AppliedMove[Depth] % 100));
                if (((Depth % 2) = "1"))
                {
                    if ((Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], TargetIdx) = "0"))
                    {
                        IsWhiteChecked = "0";
                        call CalculateMovesForSource((Depth + 2))(floor((AppliedMove[Depth] % 100)))(("1" = "1"))(("1" = "0"));
                        Data.ReplaceItem(PutsInCheck, Depth, IsWhiteChecked);
                    }
                }
                else
                {
                    if ((Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], TargetIdx) = "0"))
                    {
                        IsBlackChecked = "0";
                        call CalculateMovesForSource((Depth + 2))(floor((AppliedMove[Depth] % 100)))(("1" = "1"))(("1" = "0"));
                        Data.ReplaceItem(PutsInCheck, Depth, IsBlackChecked);
                    }
                }
                if ((PutsInCheck[Depth] = "0"))
                {
                    if ((((Depth < "3") AND (IsScratch3 = "1")) OR ((Depth < "4") AND (IsScratch3 = "0"))))
                    {
                        if (((Depth % 2) = "1"))
                        {
                            IsWhiteChecked = "0";
                            call CalcBoardAttackedByMove((Depth + 2));
                            Data.ReplaceItem(PutsInCheck, Depth, IsWhiteChecked);
                        }
                        else
                        {
                            IsBlackChecked = "0";
                            call CalcBoardAttackedByMove((Depth + 2));
                            Data.ReplaceItem(PutsInCheck, Depth, IsBlackChecked);
                        }
                    }
                }
                TargetIdx = floor((AppliedMove[Depth] % 100));
                if (((((Depth % 2) = "1") AND not((Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], TargetIdx) < Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], TargetIdx)))) OR (((Depth % 2) = "0") AND not((Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], TargetIdx) < Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], TargetIdx))))))
                {
                    call ClearMoveList((Depth + 2));
                    call CalculateMovesForSource((Depth + 2))(TargetIdx)(("1" = "0"))(("1" = "1"));
                    Count = "0";
                    Data.ReplaceItem(MovesIdx, (Depth + 2), "1");
                    repeat (MovesCount[(Depth + 2)])
                    {
                        call GetCurrentMove((Depth + 2));
                        if ((Board[floor((CurrentMove % 100))] > "0"))
                        {
                            if ((abs(Board[floor((CurrentMove / 100))]) < abs(Board[floor((CurrentMove % 100))])))
                            {
                                Count += 1;
                            }
                        }
                        Data.ReplaceItem(MovesIdx, (Depth + 2), (MovesIdx[(Depth + 2)] + 1));
                    }
                    if ((Count > "1"))
                    {
                        Data.ReplaceItem(PutsInFork, Depth, "1");
                    }
                }
                if (((MaxDepth - Depth) = "1"))
                {
                    if (((Depth = "1") OR (PlyExtension[(Depth - 1)] = "0")))
                    {
                        if ((PutsInCheck[Depth] = "1"))
                        {
                            Data.ReplaceItem(PlyExtension, Depth, "1");
                        }
                        else
                        {
                            Count = "0";
                            Idx = (Depth - 1);
                            repeat until((Idx < "1"))
                            {
                                if (not((TargetPieces[Idx] = "0")))
                                {
                                    Count += 1;
                                }
                                Idx += -2;
                            }
                            if ((Count > "0"))
                            {
                                Idx = (Depth - 2);
                                repeat until((Idx < "1"))
                                {
                                    if ((PutsInFork[Idx] = "1"))
                                    {
                                        Data.ReplaceItem(PlyExtension, Depth, "1");
                                    }
                                    Idx += -2;
                                }
                            }
                        }
                    }
                }
            }
            IsFutile = "0";
            if ((Quiescence OR (((((Depth > "2") AND ((MaxDepth - Depth) < "3")) AND ((MovesIdx[Depth] > "1") AND ((Betas[Depth] - Alphas[Depth]) = "1"))) AND ((TargetPieces[Depth] = Empty) AND (PromotionPieces[Depth] = Empty))) AND ((CheckedState[Depth] = "0") AND (PutsInCheck[Depth] = "0")))))
            {
                if (Quiescence)
                {
                    FutilityMargin = "125";
                }
                else
                {
                    FutilityMargin = ((MaxDepth - Depth) * 75);
                }
                call OnScoreCalc(Depth)(MinDepth)(Depth)(Quiescence);
                if (((Depth % 2) = "1"))
                {
                    if (not(((ScoreCalcRes + FutilityMargin) > Alphas[Depth])))
                    {
                        IsFutile = "1";
                    }
                }
                else
                {
                    if (not(((ScoreCalcRes - FutilityMargin) < Betas[Depth])))
                    {
                        IsFutile = "1";
                    }
                }
            }
            if ((IsFutile = "1"))
            {
                call RevertMove(Depth);
            }
            else
            {
                IsReductionAndDone = "0";
                if ((not(Quiescence) AND (IsMinMaxTimeout = "0")))
                {
                    if ((((MaxDepth > "2") AND (((MaxDepth - Depth) > "1") OR (PlyExtension[Depth] = "1"))) AND (MovesIdx[Depth] > "1")))
                    {
                        if (((Depth % 2) = "1"))
                        {
                            Score = (Alphas[Depth] + 1);
                            if (((((MaxDepth - Depth) > "2") AND (CheckedState[Depth] = "0")) AND (((TargetPieces[Depth] = Empty) AND (PromotionPieces[Depth] = Empty)) AND ((PutsInCheck[Depth] = "0") AND (((Betas[Depth] - Alphas[Depth]) = "1") AND ((MovesIdx[Depth] / MovesCount[Depth]) > "0.2"))))))
                            {
                                Data.ReplaceItem(Alphas, (Depth + 1), Alphas[Depth]);
                                Data.ReplaceItem(Betas, (Depth + 1), (Alphas[Depth] + 1));
                                call AlphaBetaMinMaxImpl((Depth + 1))(MinDepth)((MaxDepth - 1))(InitialDeepening)(QuiescenceDepth)(Quiescence)(Quiescence)(ShowProgress);
                                Score = MinMaxResults[(Depth + 1)];
                                IsReductionAndDone = "1";
                            }
                            if (((Score > Alphas[Depth]) AND (IsMinMaxTimeout = "0")))
                            {
                                Data.ReplaceItem(Alphas, (Depth + 1), Alphas[Depth]);
                                Data.ReplaceItem(Betas, (Depth + 1), (Alphas[Depth] + 1));
                                call AlphaBetaMinMaxImpl((Depth + 1))(MinDepth)((MaxDepth + PlyExtension[Depth]))(InitialDeepening)(QuiescenceDepth)(Quiescence)(Quiescence)(ShowProgress);
                                Score = MinMaxResults[(Depth + 1)];
                                IsReductionAndDone = "1";
                                if (((Score > Alphas[Depth]) AND (Score < Betas[Depth])))
                                {
                                    IsReductionAndDone = "0";
                                }
                            }
                        }
                        else
                        {
                            Score = (Betas[Depth] - 1);
                            if (((((MaxDepth - Depth) > "2") AND (CheckedState[Depth] = "0")) AND (((TargetPieces[Depth] = Empty) AND (PromotionPieces[Depth] = Empty)) AND ((PutsInCheck[Depth] = "0") AND (((Betas[Depth] - Alphas[Depth]) = "1") AND ((MovesIdx[Depth] / MovesCount[Depth]) > "0.2"))))))
                            {
                                Data.ReplaceItem(Alphas, (Depth + 1), (Betas[Depth] - 1));
                                Data.ReplaceItem(Betas, (Depth + 1), Betas[Depth]);
                                call AlphaBetaMinMaxImpl((Depth + 1))(MinDepth)((MaxDepth - 1))(InitialDeepening)(QuiescenceDepth)(Quiescence)(Quiescence)(ShowProgress);
                                Score = MinMaxResults[(Depth + 1)];
                                IsReductionAndDone = "1";
                            }
                            if (((Score < Betas[Depth]) AND (IsMinMaxTimeout = "0")))
                            {
                                Data.ReplaceItem(Alphas, (Depth + 1), (Betas[Depth] - 1));
                                Data.ReplaceItem(Betas, (Depth + 1), Betas[Depth]);
                                call AlphaBetaMinMaxImpl((Depth + 1))(MinDepth)((MaxDepth + PlyExtension[Depth]))(InitialDeepening)(QuiescenceDepth)(Quiescence)(Quiescence)(ShowProgress);
                                Score = MinMaxResults[(Depth + 1)];
                                IsReductionAndDone = "1";
                                if (((Score > Alphas[Depth]) AND (Score < Betas[Depth])))
                                {
                                    IsReductionAndDone = "0";
                                }
                            }
                        }
                    }
                }
                if (((IsReductionAndDone = "0") AND (IsMinMaxTimeout = "0")))
                {
                    Data.ReplaceItem(Alphas, (Depth + 1), Alphas[Depth]);
                    Data.ReplaceItem(Betas, (Depth + 1), Betas[Depth]);
                    if (((QuiescenceDepth > "0") AND (Depth = (MaxDepth - 1))))
                    {
                        call AlphaBetaMinMaxImpl((Depth + 1))(MinDepth)((MaxDepth + 1))(InitialDeepening)((QuiescenceDepth - 1))((Quiescence OR (PlyExtension[Depth] = "0")))(Quiescence)(ShowProgress);
                    }
                    else
                    {
                        call AlphaBetaMinMaxImpl((Depth + 1))(MinDepth)(MaxDepth)(InitialDeepening)(QuiescenceDepth)(Quiescence)(Quiescence)(ShowProgress);
                    }
                    Score = MinMaxResults[(Depth + 1)];
                    IsReductionAndDone = "0";
                }
                if ((IsMinMaxTimeout = "1"))
                {
                    call RevertMove(Depth);
                    Stop(this script);
                }
                if ((TargetPieces[Depth] = Empty))
                {
                    IsPotentialKillerMove = "1";
                }
                else
                {
                    IsPotentialKillerMove = "0";
                }
                call RevertMove(Depth);
                if (((Depth % 2) = "1"))
                {
                    if ((Depth = "1"))
                    {
                        List.Add(MinMaxPly1EvalMoves, Moves1[MovesIdx[1]]);
                    }
                    if (((Score > MinMaxResults[Depth]) OR (MinMaxResults[Depth] = "")))
                    {
                        Data.ReplaceItem(MinMaxResults, Depth, Score);
                        if ((Score > Alphas[Depth]))
                        {
                            call GetCurrentMove(Depth);
                            Data.ReplaceItem(BestMoves, Depth, CurrentMove);
                            if (Quiescence)
                            {
                                if ((not(((Betas[Depth] - Alphas[Depth]) = "1")) AND (Score < Betas[Depth])))
                                {
                                    Data.ReplaceItem(Alphas, Depth, Score);
                                }
                                else
                                {
                                    Data.ReplaceItem(MovesIdx, Depth, (MovesCount[Depth] + 1));
                                    Data.ReplaceItem(PickPhase, Depth, "4");
                                }
                            }
                            else
                            {
                                Data.ReplaceItem(Alphas, Depth, Score);
                                if (not((Score < Betas[Depth])))
                                {
                                    if ((Depth > "1"))
                                    {
                                        if ((IsPotentialKillerMove = "1"))
                                        {
                                            call StoreKillerMove(Depth)(CurrentMove);
                                        }
                                        Data.ReplaceItem(MovesIdx, Depth, (MovesCount[Depth] + 1));
                                        Data.ReplaceItem(PickPhase, Depth, "4");
                                    }
                                }
                                else
                                {
                                    if (((Depth = "1") AND (IsMinMaxTimeout = "0")))
                                    {
                                        call OnEvaluationChanged(Score);
                                        Data.DeleteItem(MinMaxValuesRes, all);
                                        List.Add(MinMaxValuesRes, Score);
                                        if ((Score > "-98000"))
                                        {
                                            if (("1" = "1"))
                                            {
                                                call Log((Operator.Round((((Sensing.DaysSince2000() * 86400) - ThinkTimeStart) * 1000)) / 1000))(":")((MaxDepth - 1))(":")(Moves1[MovesIdx[1]])(":")(Score)("");
                                            }
                                            Data.DeleteItem(MinMaxMovesRes, all);
                                            List.Add(MinMaxMovesRes, Moves1[MovesIdx[1]]);
                                            Data.ReplaceItem(DeepeningScore, DeepeningScoreOrderMap[MovesIdx[1]], ((MaxDepth * 100000) + (10000 + Score)));
                                            if ((MinMaxMovesRes[1] = BlackKingsideCastling))
                                            {
                                                BestMoveFromIdx = VirtualBoard[5];
                                                BestMoveToIdx = VirtualBoard[7];
                                            }
                                            else
                                            {
                                                if ((MinMaxMovesRes[1] = BlackQueensideCastling))
                                                {
                                                    BestMoveFromIdx = VirtualBoard[5];
                                                    BestMoveToIdx = VirtualBoard[3];
                                                }
                                                else
                                                {
                                                    BestMoveFromIdx = floor((MinMaxMovesRes[1] / 100));
                                                    BestMoveToIdx = floor((MinMaxMovesRes[1] % 100));
                                                }
                                            }
                                            Event.Broadcast("showbestmove");
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (((Score < MinMaxResults[Depth]) OR (MinMaxResults[Depth] = "")))
                    {
                        Data.ReplaceItem(MinMaxResults, Depth, Score);
                        if ((Score < Betas[Depth]))
                        {
                            call GetCurrentMove(Depth);
                            Data.ReplaceItem(BestMoves, Depth, CurrentMove);
                            if (Quiescence)
                            {
                                if ((not(((Betas[Depth] - Alphas[Depth]) = "1")) AND (Score > Alphas[Depth])))
                                {
                                    Data.ReplaceItem(Betas, Depth, Score);
                                }
                                else
                                {
                                    Data.ReplaceItem(MovesIdx, Depth, (MovesCount[Depth] + 1));
                                    Data.ReplaceItem(PickPhase, Depth, "4");
                                }
                            }
                            else
                            {
                                Data.ReplaceItem(Betas, Depth, Score);
                                if (not((Score > Alphas[Depth])))
                                {
                                    if ((IsPotentialKillerMove = "1"))
                                    {
                                        call StoreKillerMove(Depth)(CurrentMove);
                                    }
                                    Data.ReplaceItem(MovesIdx, Depth, (MovesCount[Depth] + 1));
                                    Data.ReplaceItem(PickPhase, Depth, "4");
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (((Depth % 2) = "1"))
    {
        if (not((MinMaxResults[Depth] < Betas[Depth])))
        {
            Data.ReplaceItem(ScoreTypes, Depth, "B");
        }
        else
        {
            if ((not(((Betas[Depth] - Alphas[Depth]) = "1")) AND ((not(Quiescence) AND not((BestMoves[Depth] = ""))) OR (Quiescence AND (MinMaxResults[Depth] > AlphasOld[Depth])))))
            {
                Data.ReplaceItem(ScoreTypes, Depth, "E");
            }
            else
            {
                Data.ReplaceItem(ScoreTypes, Depth, "A");
            }
        }
    }
    else
    {
        if (not((MinMaxResults[Depth] > Alphas[Depth])))
        {
            Data.ReplaceItem(ScoreTypes, Depth, "A");
        }
        else
        {
            if ((not(((Betas[Depth] - Alphas[Depth]) = "1")) AND ((not(Quiescence) AND not((BestMoves[Depth] = ""))) OR (Quiescence AND (MinMaxResults[Depth] < BetasOld[Depth])))))
            {
                Data.ReplaceItem(ScoreTypes, Depth, "E");
            }
            else
            {
                Data.ReplaceItem(ScoreTypes, Depth, "B");
            }
        }
    }
    if ((not(Quiescence) AND (MovesCount[Depth] = "0")))
    {
        Data.ReplaceItem(ScoreTypes, Depth, "E");
        call CalcBoardAttackedByMove((Depth + 1));
        if (((Depth % 2) = "1"))
        {
            if ((IsBlackChecked = "1"))
            {
                Data.ReplaceItem(MinMaxResults, Depth, (-100000 + (Depth * 1000)));
            }
            else
            {
                Data.ReplaceItem(MinMaxResults, Depth, "0");
            }
        }
        else
        {
            if ((IsWhiteChecked = "1"))
            {
                Data.ReplaceItem(MinMaxResults, Depth, (100000 - (Depth * 1000)));
            }
            else
            {
                Data.ReplaceItem(MinMaxResults, Depth, "0");
            }
        }
    }
    if ((BoardAttackedCalculated[Depth] = "1"))
    {
        if (((Depth % 2) = "1"))
        {
            BoardAttackedString = BoardAttackedByWhiteSnapshot[Depth];
            BoardAttackedString2 = BoardAttackedByWhitePieceSnapshot[Depth];
        }
        else
        {
            BoardAttackedString = BoardAttackedByBlackSnapshot[Depth];
            BoardAttackedString2 = BoardAttackedByBlackPieceSnapshot[Depth];
        }
    }
    else
    {
        BoardAttackedString = "";
        BoardAttackedString2 = "";
    }
    if (Quiescence)
    {
        call TTStoreNode(CurrentBoardHash)(Depth)(MinMaxResults[Depth])(BestMoves[Depth])(ScoreTypes[Depth])(CheckedState[Depth])("-1")("")("")(BoardAttackedString)(BoardAttackedString2);
    }
    else
    {
        call TTStoreNode(CurrentBoardHash)(Depth)(MinMaxResults[Depth])(BestMoves[Depth])(ScoreTypes[Depth])(CheckedState[Depth])((MaxDepth - Depth))(BlackMobBonus[Depth])(WhiteMobBonus[Depth])(BoardAttackedString)(BoardAttackedString2);
    }
}

define OnScoreCalc(string Depth)(string MinDepth)(string MaxDepth)(bool Quiescence) (warp=true)
{
    if ((Depth = "0"))
    {
        call EvaluateBoard;
        EvalResultBase = EvalResult;
        Stop(this script);
    }
    if ((IsProfilerEnabled > "0"))
    {
        call Profile_MethodEnter(Depth);
    }
    ScoreCalcRes = "";
    if ((Depth = "1"))
    {
        Data.ReplaceItem(PosScoreDeltaSum, Depth, PosScoreDelta[Depth]);
        Data.ReplaceItem(CapturesDeltaSum, Depth, (TargetPieces[Depth] - PromotionPieces[Depth]));
        call EvaluateBoardExtended1(Depth);
        Data.ReplaceItem(EvalExtended1, Depth, EvalExtendedResult1);
        call EvaluateBoardExtended2(Depth);
        Data.ReplaceItem(EvalExtended2, Depth, EvalExtendedResult2);
        call EvaluateBoardExtended3(Depth);
        Data.ReplaceItem(EvalExtended3, Depth, EvalExtendedResult3);
    }
    else
    {
        SourcePiece = abs(SourcePieces[Depth]);
        Data.ReplaceItem(PosScoreDeltaSum, Depth, (PosScoreDeltaSum[(Depth - 1)] + PosScoreDelta[Depth]));
        Data.ReplaceItem(CapturesDeltaSum, Depth, (CapturesDeltaSum[(Depth - 1)] + (TargetPieces[Depth] - PromotionPieces[Depth])));
        if ((((SourcePiece = BlackPawn) OR (SourcePiece = BlackKing)) OR (abs(TargetPieces[Depth]) = BlackPawn)))
        {
            call EvaluateBoardExtended1(Depth);
            Data.ReplaceItem(EvalExtended1, Depth, EvalExtendedResult1);
        }
        else
        {
            Data.ReplaceItem(EvalExtended1, Depth, EvalExtended1[(Depth - 1)]);
        }
        if ((not(Quiescence) AND ((SourcePiece = BlackKing) OR (SourcePiece = BlackRook))))
        {
            call EvaluateBoardExtended2(Depth);
            Data.ReplaceItem(EvalExtended2, Depth, EvalExtendedResult2);
        }
        else
        {
            Data.ReplaceItem(EvalExtended2, Depth, EvalExtended2[(Depth - 1)]);
        }
        if (not(Quiescence))
        {
            call EvaluateBoardExtended3(Depth);
            Data.ReplaceItem(EvalExtended3, Depth, EvalExtendedResult3);
        }
        else
        {
            Data.ReplaceItem(EvalExtended3, Depth, EvalExtended3[(Depth - 1)]);
        }
    }
    if ((IsEndgame = "1"))
    {
        if ((abs(TargetPieces[Depth]) = BlackPawn))
        {
            Data.ReplaceItem(CapturesDeltaSum, Depth, (CapturesDeltaSum[Depth] + (TargetPieces[Depth] * 0.2)));
        }
        else
        {
            if (not((PromotionPieces[Depth] = "0")))
            {
                Data.ReplaceItem(CapturesDeltaSum, Depth, (CapturesDeltaSum[Depth] + (SourcePieces[Depth] * 0.2)));
            }
        }
    }
    if ((Depth = MaxDepth))
    {
        ScoreCalcRes = ((EvalResultBase + ((EvalExtended1[Depth] + EvalExtended2[Depth]) + EvalExtended3[Depth])) + ((PosScoreDeltaSum[Depth] - CapturesDeltaSum[Depth]) + (BlackMobBonus[Depth] - WhiteMobBonus[Depth])));
        if ((CapturesDeltaSum[Depth] = "0"))
        {
            Idx = "1";
            repeat (Depth)
            {
                if ((abs(TargetPieces[Idx]) > BlackPawn))
                {
                    HasCaptures = "1";
                }
                Idx += 1;
            }
            if ((HasCaptures = "1"))
            {
                Value = (((BlackQueenCount * 3) + BlackMinorCount) - ((WhiteQueenCount * 3) + WhiteMinorCount));
                if ((Value > "0"))
                {
                    ScoreCalcRes += 50;
                }
                else
                {
                    if ((Value < "0"))
                    {
                        ScoreCalcRes += -50;
                    }
                }
            }
        }
    }
    if ((IsProfilerEnabled > "0"))
    {
        call Profile_MethodExit(Depth);
    }
}

define AddSpecialMove(string Move)(string Depth) (warp=true)
{
    call GetSpecialMoveScore(Move)(Depth);
    call AddMoveToList(Move)(MoveScoreRes)(Depth);
}

define ApplyMove(num Depth) (warp=true)
{
    Data.ReplaceItem(PreviousBoardHash, Depth, CurrentBoardHash);
    call GetCurrentMove(Depth);
    Data.ReplaceItem(AppliedMove, Depth, CurrentMove);
    SourceIdx = floor((CurrentMove / 100));
    if ((SourceIdx > "0"))
    {
        TargetIdx = floor((CurrentMove % 100));
        SourcePiece = Board[SourceIdx];
        TargetPiece = Board[TargetIdx];
        Data.ReplaceItem(SourcePieces, Depth, SourcePiece);
        Data.ReplaceItem(TargetPiecesIdx, Depth, TargetIdx);
        Data.ReplaceItem(TargetPieces, Depth, TargetPiece);
        Data.ReplaceItem(PromotionPieces, Depth, "0");
        Data.ReplaceItem(Board, TargetIdx, SourcePiece);
        Data.ReplaceItem(Board, SourceIdx, "0");
        if ((SourcePiece > "0"))
        {
            IdxSub = ((PieceIdxLookup[SourcePiece] * 10000) + ((SourceIdx * 100) + TargetIdx));
            Data.ReplaceItem(PosScoreDelta, Depth, MovePosLookupBlack[IdxSub]);
            CurrentBoardHash += MoveHashLookupBlack[IdxSub];
            if ((SourcePiece = BlackPawn))
            {
                if (not((IdxToFile[SourceIdx] = IdxToFile[TargetIdx])))
                {
                    Data.ReplaceItem(BlackPawnCount, IdxToFile[SourceIdx], (BlackPawnCount[IdxToFile[SourceIdx]] - 1));
                    Data.ReplaceItem(BlackPawnCount, IdxToFile[TargetIdx], (BlackPawnCount[IdxToFile[TargetIdx]] + 1));
                    if ((TargetPieces[Depth] = Empty))
                    {
                        Data.ReplaceItem(TargetPiecesIdx, Depth, (TargetIdx - 8));
                        Data.ReplaceItem(TargetPieces, Depth, Board[(TargetIdx - 8)]);
                        TargetPiece = Board[(TargetIdx - 8)];
                        Data.ReplaceItem(Board, (TargetIdx - 8), Empty);
                        call GetPiecePosHash(Board[(TargetIdx - 8)])((TargetIdx - 8));
                        CurrentBoardHash = (CurrentBoardHash - PiecePosHash);
                    }
                }
                if ((TargetIdx > "56"))
                {
                    Data.ReplaceItem(PromotionPieces, Depth, Empty);
                    PromotionVal = Operator.LetterOf(CurrentMove, 6);
                    if ((PromotionVal = "1"))
                    {
                        Data.ReplaceItem(PromotionPieces, Depth, BlackQueen);
                    }
                    if ((PromotionVal = "2"))
                    {
                        Data.ReplaceItem(PromotionPieces, Depth, BlackRook);
                    }
                    if ((PromotionVal = "3"))
                    {
                        Data.ReplaceItem(PromotionPieces, Depth, BlackBishop);
                    }
                    if ((PromotionVal = "4"))
                    {
                        Data.ReplaceItem(PromotionPieces, Depth, BlackKnight);
                    }
                    if (not((PromotionPieces[Depth] = Empty)))
                    {
                        Data.ReplaceItem(Board, TargetIdx, PromotionPieces[Depth]);
                    }
                    call GetPiecePosHash(BlackPawn)(SourceIdx);
                    CurrentBoardHash = (CurrentBoardHash - PiecePosHash);
                    call GetPiecePosHash(PromotionPieces[Depth])(TargetIdx);
                    CurrentBoardHash = (CurrentBoardHash + PiecePosHash);
                }
            }
            else
            {
                if ((SourcePiece = BlackKing))
                {
                    BlackKingIdx = TargetIdx;
                }
            }
        }
        else
        {
            IdxSub = ((PieceIdxLookup[(0 - SourcePiece)] * 10000) + ((SourceIdx * 100) + TargetIdx));
            Data.ReplaceItem(PosScoreDelta, Depth, MovePosLookupWhite[IdxSub]);
            CurrentBoardHash += MoveHashLookupWhite[IdxSub];
            if ((SourcePiece = WhitePawn))
            {
                if (not((IdxToFile[SourceIdx] = IdxToFile[TargetIdx])))
                {
                    Data.ReplaceItem(WhitePawnCount, IdxToFile[SourceIdx], (WhitePawnCount[IdxToFile[SourceIdx]] - 1));
                    Data.ReplaceItem(WhitePawnCount, IdxToFile[TargetIdx], (WhitePawnCount[IdxToFile[TargetIdx]] + 1));
                    if ((TargetPieces[Depth] = Empty))
                    {
                        Data.ReplaceItem(TargetPiecesIdx, Depth, (TargetIdx + 8));
                        Data.ReplaceItem(TargetPieces, Depth, Board[(TargetIdx + 8)]);
                        TargetPiece = Board[(TargetIdx + 8)];
                        Data.ReplaceItem(Board, (TargetIdx + 8), Empty);
                        call GetPiecePosHash(Board[(TargetIdx + 8)])((TargetIdx + 8));
                        CurrentBoardHash = (CurrentBoardHash - PiecePosHash);
                    }
                }
                if ((TargetIdx < "9"))
                {
                    Data.ReplaceItem(PromotionPieces, Depth, Empty);
                    PromotionVal = Operator.LetterOf(CurrentMove, 6);
                    if ((PromotionVal = "1"))
                    {
                        Data.ReplaceItem(PromotionPieces, Depth, WhiteQueen);
                    }
                    if ((PromotionVal = "2"))
                    {
                        Data.ReplaceItem(PromotionPieces, Depth, WhiteRook);
                    }
                    if ((PromotionVal = "3"))
                    {
                        Data.ReplaceItem(PromotionPieces, Depth, WhiteBishop);
                    }
                    if ((PromotionVal = "4"))
                    {
                        Data.ReplaceItem(PromotionPieces, Depth, WhiteKnight);
                    }
                    if (not((PromotionPieces[Depth] = Empty)))
                    {
                        Data.ReplaceItem(Board, TargetIdx, PromotionPieces[Depth]);
                    }
                    call GetPiecePosHash(WhitePawn)(SourceIdx);
                    CurrentBoardHash = (CurrentBoardHash - PiecePosHash);
                    call GetPiecePosHash(PromotionPieces[Depth])(TargetIdx);
                    CurrentBoardHash = (CurrentBoardHash + PiecePosHash);
                }
            }
            else
            {
                if ((SourcePiece = WhiteKing))
                {
                    WhiteKingIdx = TargetIdx;
                }
            }
        }
        if ((TargetPiece > "0"))
        {
            IdxSub = ((PieceIdxLookup[TargetPiece] * 10000) + (TargetIdx * 100));
            Data.ReplaceItem(PosScoreDelta, Depth, (PosScoreDelta[Depth] + MovePosLookupBlack[IdxSub]));
            CurrentBoardHash += MoveHashLookupBlack[IdxSub];
            if ((TargetPiece = BlackPawn))
            {
                Data.ReplaceItem(BlackPawnCount, IdxToFile[TargetPiecesIdx[Depth]], (BlackPawnCount[IdxToFile[TargetPiecesIdx[Depth]]] - 1));
            }
        }
        else
        {
            if ((TargetPiece < "0"))
            {
                IdxSub = ((PieceIdxLookup[(0 - TargetPiece)] * 10000) + (TargetIdx * 100));
                Data.ReplaceItem(PosScoreDelta, Depth, (PosScoreDelta[Depth] + MovePosLookupWhite[IdxSub]));
                CurrentBoardHash += MoveHashLookupWhite[IdxSub];
                if ((TargetPiece = WhitePawn))
                {
                    Data.ReplaceItem(WhitePawnCount, IdxToFile[TargetPiecesIdx[Depth]], (WhitePawnCount[IdxToFile[TargetPiecesIdx[Depth]]] - 1));
                }
            }
        }
    }
    else
    {
        Data.ReplaceItem(PosScoreDelta, Depth, "0");
        Data.ReplaceItem(SourcePieces, Depth, Empty);
        Data.ReplaceItem(TargetPiecesIdx, Depth, "");
        Data.ReplaceItem(TargetPieces, Depth, Empty);
        Data.ReplaceItem(PromotionPieces, Depth, Empty);
        if ((CurrentMove = WhiteKingsideCastling))
        {
            Data.ReplaceItem(SourcePieces, Depth, WhiteKing);
            Data.ReplaceItem(Board, VirtualBoard[61], Empty);
            Data.ReplaceItem(Board, VirtualBoard[62], WhiteRook);
            Data.ReplaceItem(Board, VirtualBoard[63], WhiteKing);
            Data.ReplaceItem(Board, VirtualBoard[64], Empty);
            WhiteKingIdx = VirtualBoard[63];
            call UpdateMoveHashPosScore(WhiteKing)(VirtualBoard[61])(VirtualBoard[63])(("1" = "0"));
            call UpdateMoveHashPosScore(WhiteRook)(VirtualBoard[64])(VirtualBoard[62])(("1" = "1"));
        }
        else
        {
            if ((CurrentMove = WhiteQueensideCastling))
            {
                Data.ReplaceItem(SourcePieces, Depth, WhiteKing);
                Data.ReplaceItem(Board, VirtualBoard[57], Empty);
                Data.ReplaceItem(Board, VirtualBoard[59], WhiteKing);
                Data.ReplaceItem(Board, VirtualBoard[60], WhiteRook);
                Data.ReplaceItem(Board, VirtualBoard[61], Empty);
                WhiteKingIdx = VirtualBoard[59];
                call UpdateMoveHashPosScore(WhiteKing)(VirtualBoard[61])(VirtualBoard[59])(("1" = "0"));
                call UpdateMoveHashPosScore(WhiteRook)(VirtualBoard[57])(VirtualBoard[59])(("1" = "1"));
            }
            else
            {
                if ((CurrentMove = BlackKingsideCastling))
                {
                    Data.ReplaceItem(SourcePieces, Depth, BlackKing);
                    Data.ReplaceItem(Board, VirtualBoard[5], Empty);
                    Data.ReplaceItem(Board, VirtualBoard[6], BlackRook);
                    Data.ReplaceItem(Board, VirtualBoard[7], BlackKing);
                    Data.ReplaceItem(Board, VirtualBoard[8], Empty);
                    BlackKingIdx = VirtualBoard[3];
                    call UpdateMoveHashPosScore(BlackKing)(VirtualBoard[5])(VirtualBoard[7])(("1" = "0"));
                    call UpdateMoveHashPosScore(BlackRook)(VirtualBoard[8])(VirtualBoard[6])(("1" = "1"));
                }
                else
                {
                    if ((CurrentMove = BlackQueensideCastling))
                    {
                        Data.ReplaceItem(SourcePieces, Depth, BlackKing);
                        Data.ReplaceItem(Board, VirtualBoard[1], Empty);
                        Data.ReplaceItem(Board, VirtualBoard[3], BlackKing);
                        Data.ReplaceItem(Board, VirtualBoard[4], BlackRook);
                        Data.ReplaceItem(Board, VirtualBoard[5], Empty);
                        BlackKingIdx = VirtualBoard[5];
                        call UpdateMoveHashPosScore(BlackKing)(VirtualBoard[5])(VirtualBoard[3])(("1" = "0"));
                        call UpdateMoveHashPosScore(BlackRook)(VirtualBoard[1])(VirtualBoard[4])(("1" = "1"));
                    }
                }
            }
        }
    }
}

define DrawBoardAndWait (warp=false)
{
    Idx += 1;
    ProgressValue = "0";
    Event.BroadcastAndWait("drawboard");
    Event.BroadcastAndWait("progressvaluechanged");
    Event.BroadcastAndWait("evaluationvaluechanged");
}

define Profile_IncCounter(num Id) (warp=true)
{
    if ((IsProfilerEnabled > "0"))
    {
        repeat until(not((List.Length(Profile_Data) < Id)))
        {
            List.Add(Profile_Data, "0");
        }
        Data.ReplaceItem(Profile_Data, Id, (Profile_Data[Id] + 1));
    }
}

WhenKeyPressed(p)
{
    if ((IsModeProfiler = "0"))
    {
        IsModeProfiler = "1";
        list.Show(Profile_Data);
        Variable.Show(IsProfilerEnabled);
    }
    else
    {
        IsModeProfiler = "0";
        list.Hide(Profile_Data);
        Variable.Hide(IsProfilerEnabled);
    }
}

WhenKeyPressed(d)
{
    if ((IsModeDeepeningDebug = "0"))
    {
        IsModeDeepeningDebug = "1";
        Variable.Show(IdxDeepening);
        Variable.Show(BestMinMaxRes);
        Variable.Show(BestMove);
        Variable.Show(PruningAlphaWindow);
        Variable.Show(PruningBetaWindow);
    }
    else
    {
        IsModeDeepeningDebug = "0";
        Variable.Hide(IdxDeepening);
        Variable.Hide(BestMinMaxRes);
        Variable.Hide(BestMove);
        Variable.Hide(PruningAlphaWindow);
        Variable.Hide(PruningBetaWindow);
    }
}

WhenKeyPressed(c)
{
    if ((IsModeCompetition = "0"))
    {
        IsModeCompetition = "1";
        call SayAsync("Think time on Difficult set to 40 seconds")(5);
    }
    else
    {
        IsModeCompetition = "0";
        call SayAsync("Think time on Difficult set to 20/15 seconds")(5);
    }
}

define UpdateMoveHashPosScore(num Piece)(num SourceIdx)(num TargetIdx)(bool PosScoreUpdate) (warp=true)
{
    call GetPiecePosHash(Piece)(SourceIdx);
    CurrentBoardHash = (CurrentBoardHash - PiecePosHash);
    call GetPiecePosHash(Piece)(TargetIdx);
    CurrentBoardHash = (CurrentBoardHash + PiecePosHash);
    call GetPiecePosScore(Piece)(SourceIdx);
    if (PosScoreUpdate)
    {
        Data.ReplaceItem(PosScoreDelta, Depth, (PosScoreDelta[Depth] - PosScoreRes));
    }
    else
    {
        Data.ReplaceItem(PosScoreDelta, Depth, (0 - PosScoreRes));
    }
    call GetPiecePosScore(Piece)(TargetIdx);
    Data.ReplaceItem(PosScoreDelta, Depth, (PosScoreDelta[Depth] + PosScoreRes));
}

define StoreKillerMove(string Depth)(string Move) (warp=true)
{
    if ((Depth = "8"))
    {
        Data.DeleteItem(KillerMoves8, List.IndexOf(KillerMoves8, Move));
        List.Add(KillerMoves8, Move);
        if ((List.Length(KillerMoves8) > "4"))
        {
            Data.DeleteItem(KillerMoves8, 1);
        }
    }
    else
    {
        if ((Depth = "7"))
        {
            Data.DeleteItem(KillerMoves7, List.IndexOf(KillerMoves7, Move));
            List.Add(KillerMoves7, Move);
            if ((List.Length(KillerMoves7) > "4"))
            {
                Data.DeleteItem(KillerMoves7, 1);
            }
        }
        else
        {
            if ((Depth = "6"))
            {
                Data.DeleteItem(KillerMoves6, List.IndexOf(KillerMoves6, Move));
                List.Add(KillerMoves6, Move);
                if ((List.Length(KillerMoves6) > "4"))
                {
                    Data.DeleteItem(KillerMoves6, 1);
                }
            }
            else
            {
                if ((Depth = "5"))
                {
                    Data.DeleteItem(KillerMoves5, List.IndexOf(KillerMoves5, Move));
                    List.Add(KillerMoves5, Move);
                    if ((List.Length(KillerMoves5) > "4"))
                    {
                        Data.DeleteItem(KillerMoves5, 1);
                    }
                }
                else
                {
                    if ((Depth = "4"))
                    {
                        Data.DeleteItem(KillerMoves4, List.IndexOf(KillerMoves4, Move));
                        List.Add(KillerMoves4, Move);
                        if ((List.Length(KillerMoves4) > "4"))
                        {
                            Data.DeleteItem(KillerMoves4, 1);
                        }
                    }
                    else
                    {
                        if ((Depth = "3"))
                        {
                            Data.DeleteItem(KillerMoves3, List.IndexOf(KillerMoves3, Move));
                            List.Add(KillerMoves3, Move);
                            if ((List.Length(KillerMoves3) > "4"))
                            {
                                Data.DeleteItem(KillerMoves3, 1);
                            }
                        }
                        else
                        {
                            if ((Depth = "2"))
                            {
                                Data.DeleteItem(KillerMoves2, List.IndexOf(KillerMoves2, Move));
                                List.Add(KillerMoves2, Move);
                                if ((List.Length(KillerMoves2) > "4"))
                                {
                                    Data.DeleteItem(KillerMoves2, 1);
                                }
                            }
                            else
                            {
                                if ((Depth = "1"))
                                {
                                    Data.DeleteItem(KillerMoves1, List.IndexOf(KillerMoves1, Depth));
                                    List.Add(KillerMoves1, Depth);
                                    if ((List.Length(KillerMoves1) > "4"))
                                    {
                                        Data.DeleteItem(KillerMoves1, 1);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

define EvaluateBoard (warp=true)
{
    EvalResult = "0";
    Idx = "1";
    repeat (64)
    {
        CurrentPiece = Board[Idx];
        if (not((CurrentPiece = Empty)))
        {
            if (((abs(CurrentPiece) = BlackPawn) AND (IsEndgame = "1")))
            {
                EvalResult += (1.2 * CurrentPiece);
            }
            else
            {
                EvalResult += CurrentPiece;
            }
            call GetPiecePosScore(CurrentPiece)(Idx);
            EvalResult += PosScoreRes;
        }
        Idx += 1;
    }
}

define IsDrawByStalemate(string Depth) (warp=true)
{
    call CalcBoardAttackedByMove((Depth + 1));
    if (((((Depth % 2) = "1") AND (IsBlackChecked = "1")) OR (((Depth % 2) = "0") AND (IsWhiteChecked = "1"))))
    {
        IsDrawRes = "0";
        Stop(this script);
    }
    IsDrawRes = "1";
    call CalculateMoves(Depth);
    Data.ReplaceItem(MovesIdx, Depth, "1");
    repeat (MovesCount[Depth])
    {
        if ((IsDrawRes = "1"))
        {
            call ApplyMove(Depth);
            call CalcBoardAttackedByMove((Depth + 1));
            if (((((Depth % 2) = "1") AND (IsBlackChecked = "0")) OR (((Depth % 2) = "0") AND (IsWhiteChecked = "0"))))
            {
                IsDrawRes = "0";
            }
            call RevertMove(Depth);
        }
        Data.ReplaceItem(MovesIdx, Depth, (MovesIdx[Depth] + 1));
    }
}

define InitHashLookup (warp=true)
{
    TTProbeCurrentAge = "0";
    Data.DeleteItem(PosPieceHashLookup, all);
    repeat (1024)
    {
        List.Add(PosPieceHashLookup, Operator.Random((1 - ((65536 * 65536) * (65536 * 1))) / ((65536 * 65536) * (65536 * 1))));
    }
    call ClearTT;
}

define UndoPrevMove (warp=false)
{
    if ((List.Length(GameMovesAN) > "0"))
    {
        call GetSubstringRight(GameMoves)(4);
        if (((Board[(SubstringRes % 100)] > "0") OR ((SubstringRes = BlackQueensideCastling) OR (SubstringRes = BlackKingsideCastling))))
        {
            IsBlackMove = "1";
        }
        else
        {
            IsBlackMove = "0";
        }
        call ImportBoardImpl(BoardHistory[(List.Length(BoardHistory) - 1)]);
        Data.DeleteItem(BoardHistory, List.Length(BoardHistory));
        Data.DeleteItem(BoardHistoryHash, List.Length(BoardHistoryHash));
        if (((GameMovesAN[List.Length(GameMovesAN)] = "O-O") OR (GameMovesAN[List.Length(GameMovesAN)] = "O-O-O")))
        {
            if ((IsBlackMove = "1"))
            {
                HasBlackCastled = "0";
                HasBlackKingMoved = "0";
            }
            else
            {
                HasWhiteCastled = "0";
                HasWhiteKingMoved = "0";
            }
        }
        if ((Operator.LetterOf(GameMovesAN[List.Length(GameMovesAN)], 1) = "K"))
        {
            if ((IsBlackMove = "1"))
            {
                HasBlackKingMoved = "0";
            }
            else
            {
                HasWhiteKingMoved = "0";
            }
            Idx = (List.Length(GameMovesAN) - 2);
            repeat until((Idx < "1"))
            {
                if ((Operator.LetterOf(GameMovesAN[Idx], 1) = "K"))
                {
                    if ((IsBlackMove = "1"))
                    {
                        HasBlackKingMoved = "1";
                    }
                    else
                    {
                        HasWhiteKingMoved = "0";
                    }
                }
                Idx += -1;
            }
        }
        Data.DeleteItem(GameMovesAN, List.Length(GameMovesAN));
        call GetSubstringLeft(GameMoves)((Variable.Length(GameMoves) - 4));
        GameMoves = SubstringRes;
    }
}

define ClearTT (warp=true)
{
    Data.DeleteItem(TTNodeHash, all);
    Data.DeleteItem(TTNodeBestMove, all);
    Data.DeleteItem(TTNodeScore, all);
    Data.DeleteItem(TTNodeDepth, all);
    Data.DeleteItem(TTNodeAge, all);
    Data.DeleteItem(TTNodeType, all);
    Data.DeleteItem(TTNodeChecked, all);
    Data.DeleteItem(TTNodeHorizon, all);
    Data.DeleteItem(TTNodeBlackMobility, all);
    Data.DeleteItem(TTNodeWhiteMobility, all);
    Data.DeleteItem(TTBoardAge, all);
    Data.DeleteItem(TTBoardHash, all);
    Data.DeleteItem(TTBoardScore1, all);
    Data.DeleteItem(TTBoardScore2, all);
    Data.DeleteItem(TTBoardScore3, all);
    Data.DeleteItem(TTNodeBoardAttackedByOpp, all);
    Data.DeleteItem(TTNodeBoardAttackedByOppPiece, all);
    if ((IsScratch3 = "1"))
    {
        Count = "200000";
    }
    else
    {
        Count = "1000000";
    }
    repeat (Count)
    {
        List.Add(TTNodeHash, "");
        List.Add(TTNodeBestMove, "");
        List.Add(TTNodeScore, "");
        List.Add(TTNodeDepth, "");
        List.Add(TTNodeAge, "");
        List.Add(TTNodeType, "");
        List.Add(TTNodeChecked, "");
        List.Add(TTNodeHorizon, "");
        List.Add(TTNodeBlackMobility, "");
        List.Add(TTNodeWhiteMobility, "");
        List.Add(TTBoardAge, "");
        List.Add(TTBoardHash, "");
        List.Add(TTBoardScore1, "");
        List.Add(TTBoardScore2, "");
        List.Add(TTBoardScore3, "");
        List.Add(TTNodeBoardAttackedByOpp, "");
        List.Add(TTNodeBoardAttackedByOppPiece, "");
    }
}

WhenKeyPressed(j)
{
    if (not((Backdrop.GetNumberName(name) = "Intro")))
    {
        call SwitchMode;
    }
}

WhenGreenFlagClicked()
{
    if (is compiled?)
    {
        IsScratch3 = "0";
    }
    else
    {
        IsScratch3 = "1";
    }
    List.DeleteAll(Logfile);
    list.Hide(Logfile);
    list.Hide(ExportData);
    list.Hide(ExportMoves);
}

define InitPawnSquarePreCastling (warp=true)
{
    Data.DeleteItem(PawnPieceSquarePreCastling, all);
    call LoadList(" 0, 0, 0, 0, 0, 0, 0, 0, -35, -35, -35, 39, 39, -35, -35, -35, -35, -35, -35, 29, 29, -35, -35, -35, -35, -35, -35, 22, 22, -35, -35, -35, -35, -35, -35, 14, 14, -35, -35, -35, -25, -11, -25, 4, 4, -25, -11, -25,  -21, -21, -6, -1, -1, -6, -21, -21,   0, 0, 0, 0, 0, 0, 0, 0")("PawnPieceSquarePreCastling");
}

define GetCurrentBoardHash (warp=true)
{
    CurrentBoardHash = "0";
    Idx = "1";
    repeat (64)
    {
        call GetPiecePosHash(Board[Idx])(Idx);
        CurrentBoardHash = (CurrentBoardHash + PiecePosHash);
        Idx += 1;
    }
}

define InitMoveLookup (warp=true)
{
    Data.DeleteItem(KnightMoveOffsets, all);
    Data.DeleteItem(KingMoveOffsets, all);
    List.Add(KnightMoveOffsets, "-2");
    List.Add(KnightMoveOffsets, "-1");
    List.Add(KnightMoveOffsets, "-2");
    List.Add(KnightMoveOffsets, "1");
    List.Add(KnightMoveOffsets, "-1");
    List.Add(KnightMoveOffsets, "-2");
    List.Add(KnightMoveOffsets, "-1");
    List.Add(KnightMoveOffsets, "2");
    List.Add(KnightMoveOffsets, "1");
    List.Add(KnightMoveOffsets, "-2");
    List.Add(KnightMoveOffsets, "1");
    List.Add(KnightMoveOffsets, "2");
    List.Add(KnightMoveOffsets, "2");
    List.Add(KnightMoveOffsets, "-1");
    List.Add(KnightMoveOffsets, "2");
    List.Add(KnightMoveOffsets, "1");
    List.Add(KingMoveOffsets, "-1");
    List.Add(KingMoveOffsets, "-1");
    List.Add(KingMoveOffsets, "-1");
    List.Add(KingMoveOffsets, "0");
    List.Add(KingMoveOffsets, "-1");
    List.Add(KingMoveOffsets, "1");
    List.Add(KingMoveOffsets, "0");
    List.Add(KingMoveOffsets, "-1");
    List.Add(KingMoveOffsets, "0");
    List.Add(KingMoveOffsets, "1");
    List.Add(KingMoveOffsets, "1");
    List.Add(KingMoveOffsets, "-1");
    List.Add(KingMoveOffsets, "1");
    List.Add(KingMoveOffsets, "0");
    List.Add(KingMoveOffsets, "1");
    List.Add(KingMoveOffsets, "1");
    Data.DeleteItem(MoveLookupStraight, all);
    Data.DeleteItem(MoveLookupCross, all);
    Data.DeleteItem(MoveLookupOffsetsStraight, all);
    Data.DeleteItem(MoveLookupOffsetsCross, all);
    Data.DeleteItem(MoveLookupKnight, all);
    Data.DeleteItem(MoveLookupKing, all);
    Data.DeleteItem(MoveLookupIndexOffset, all);
    Data.DeleteItem(MoveLookupLineIndexOffset, all);
    List.Add(MoveLookupOffsetsStraight, "1");
    List.Add(MoveLookupOffsetsStraight, "0");
    List.Add(MoveLookupOffsetsStraight, "0");
    List.Add(MoveLookupOffsetsStraight, "1");
    List.Add(MoveLookupOffsetsStraight, "-1");
    List.Add(MoveLookupOffsetsStraight, "0");
    List.Add(MoveLookupOffsetsStraight, "0");
    List.Add(MoveLookupOffsetsStraight, "-1");
    List.Add(MoveLookupOffsetsCross, "1");
    List.Add(MoveLookupOffsetsCross, "1");
    List.Add(MoveLookupOffsetsCross, "1");
    List.Add(MoveLookupOffsetsCross, "-1");
    List.Add(MoveLookupOffsetsCross, "-1");
    List.Add(MoveLookupOffsetsCross, "1");
    List.Add(MoveLookupOffsetsCross, "-1");
    List.Add(MoveLookupOffsetsCross, "-1");
    Idx = "1";
    repeat (64)
    {
        IdxSub = "1";
        repeat (4)
        {
            X = IdxToFile[Idx];
            Y = IdxToRank[Idx];
            repeat (8)
            {
                X += MoveLookupOffsetsStraight[IdxSub];
                Y += MoveLookupOffsetsStraight[(IdxSub + 1)];
                List.Add(MoveLookupStraight, "-1");
                if (((Y > "0") AND (Y < "9")))
                {
                    if (((X > "0") AND (X < "9")))
                    {
                        TargetIdx = (X + ((Y - 1) * 8));
                        Data.ReplaceItem(MoveLookupStraight, last, TargetIdx);
                    }
                }
            }
            IdxSub += 2;
        }
        IdxSub = "1";
        repeat (4)
        {
            X = IdxToFile[Idx];
            Y = IdxToRank[Idx];
            repeat (8)
            {
                X += MoveLookupOffsetsCross[IdxSub];
                Y += MoveLookupOffsetsCross[(IdxSub + 1)];
                List.Add(MoveLookupCross, "-1");
                if (((Y > "0") AND (Y < "9")))
                {
                    if (((X > "0") AND (X < "9")))
                    {
                        TargetIdx = (X + ((Y - 1) * 8));
                        Data.ReplaceItem(MoveLookupCross, last, TargetIdx);
                    }
                }
            }
            IdxSub += 2;
        }
        Idx += 1;
    }
    Idx = "1";
    repeat (64)
    {
        Data.InsertItem(MoveLookupIndexOffset, Idx, ((Idx - 1) * 8));
        Data.InsertItem(MoveLookupLineIndexOffset, Idx, ((Idx - 1) * 32));
        Idx += 1;
    }
    Idx = "1";
    repeat (64)
    {
        IdxSub = "1";
        repeat (8)
        {
            call GetTargetIdx(Idx)(KingMoveOffsets[IdxSub])(KingMoveOffsets[(IdxSub + 1)]);
            if (not((GetTargetIdxRes = "-1")))
            {
                List.Add(MoveLookupKing, GetTargetIdxRes);
            }
            IdxSub += 2;
        }
        repeat until((List.Length(MoveLookupKing) = (Idx * 8)))
        {
            List.Add(MoveLookupKing, "-1");
        }
        IdxSub = "1";
        repeat (8)
        {
            call GetTargetIdx(Idx)(KnightMoveOffsets[IdxSub])(KnightMoveOffsets[(IdxSub + 1)]);
            if (not((GetTargetIdxRes = "-1")))
            {
                List.Add(MoveLookupKnight, GetTargetIdxRes);
            }
            IdxSub += 2;
        }
        repeat until((List.Length(MoveLookupKnight) = (Idx * 8)))
        {
            List.Add(MoveLookupKnight, "-1");
        }
        Idx += 1;
    }
}

define EvaluateBoardExtended2(string Depth) (warp=true)
{
    EvalExtendedResult2 = "0";
    if (((HasBlackCastled = "0") AND ((IsEndgame = "0") OR ((BlackMinorCount > "2") OR (BlackQueenCount > "0")))))
    {
        HasBlackCastledStateLocal = "0";
        if ((IsBlackCastlingPossible = "1"))
        {
            if (((Moves1[MovesIdx[1]] = BlackKingsideCastling) OR (Moves1[MovesIdx[1]] = BlackQueensideCastling)))
            {
                HasBlackCastledStateLocal = "1";
            }
            else
            {
                if ((Depth > "2"))
                {
                    if (((Moves3[MovesIdx[3]] = BlackKingsideCastling) OR (Moves3[MovesIdx[3]] = BlackQueensideCastling)))
                    {
                        HasBlackCastledStateLocal = "2";
                    }
                    else
                    {
                        if ((Depth > "4"))
                        {
                            if (((Moves5[MovesIdx[5]] = BlackKingsideCastling) OR (Moves5[MovesIdx[5]] = BlackQueensideCastling)))
                            {
                                HasBlackCastledStateLocal = "3";
                            }
                            else
                            {
                                if ((Depth > "6"))
                                {
                                    if (((Moves7[MovesIdx[7]] = BlackKingsideCastling) OR (Moves7[MovesIdx[7]] = BlackQueensideCastling)))
                                    {
                                        HasBlackCastledStateLocal = "4";
                                    }
                                    else
                                    {
                                        if ((Depth > "8"))
                                        {
                                            if (((Moves9[MovesIdx[9]] = BlackKingsideCastling) OR (Moves9[MovesIdx[9]] = BlackQueensideCastling)))
                                            {
                                                HasBlackCastledStateLocal = "5";
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if ((HasBlackCastledStateLocal > "0"))
        {
            KingProtection = "70";
        }
        else
        {
            if ((((IsBlackCastlingPossible = "1") AND not(Data.ListContainsItem(SourcePieces, BlackKing))) AND ((Board[VirtualBoard[1]] = BlackRook) OR (Board[VirtualBoard[8]] = BlackRook))))
            {
                KingProtection = "50";
            }
            else
            {
                KingProtection = "0";
            }
        }
        EvalExtendedResult2 += KingProtection;
    }
    if (((HasWhiteCastled = "0") AND ((IsEndgame = "0") OR ((WhiteMinorCount > "2") OR (WhiteQueenCount > "0")))))
    {
        HasWhiteCastledStateLocal = "0";
        if ((IsWhiteCastlingPossible = "1"))
        {
            if ((Depth > "1"))
            {
                if (((Moves2[MovesIdx[2]] = WhiteKingsideCastling) OR (Moves2[MovesIdx[2]] = WhiteQueensideCastling)))
                {
                    HasWhiteCastledStateLocal = "1";
                }
                if ((Depth > "3"))
                {
                    if (((Moves4[MovesIdx[4]] = WhiteKingsideCastling) OR (Moves4[MovesIdx[4]] = WhiteQueensideCastling)))
                    {
                        HasWhiteCastledStateLocal = "2";
                    }
                    if ((Depth > "5"))
                    {
                        if (((Moves6[MovesIdx[6]] = WhiteKingsideCastling) OR (Moves6[MovesIdx[6]] = WhiteQueensideCastling)))
                        {
                            HasWhiteCastledStateLocal = "3";
                        }
                        if ((Depth > "7"))
                        {
                            if (((Moves8[MovesIdx[8]] = WhiteKingsideCastling) OR (Moves8[MovesIdx[8]] = WhiteQueensideCastling)))
                            {
                                HasWhiteCastledStateLocal = "4";
                            }
                            if ((Depth > "9"))
                            {
                                if (((Moves10[MovesIdx[10]] = WhiteKingsideCastling) OR (Moves10[MovesIdx[10]] = WhiteQueensideCastling)))
                                {
                                    HasWhiteCastledStateLocal = "5";
                                }
                            }
                        }
                    }
                }
            }
        }
        if ((HasWhiteCastledStateLocal > "0"))
        {
            KingProtection = "70";
        }
        else
        {
            if ((((IsWhiteCastlingPossible = "1") AND not(Data.ListContainsItem(SourcePieces, WhiteKing))) AND ((Board[VirtualBoard[64]] = WhiteRook) OR (Board[VirtualBoard[57]] = WhiteRook))))
            {
                KingProtection = "50";
            }
            else
            {
                KingProtection = "0";
            }
        }
        EvalExtendedResult2 += (0 - KingProtection);
    }
}

define EvaluateBoardExtended3(string Depth) (warp=true)
{
    EvalExtendedResult3 = "0";
    if ((IsEndgame = "0"))
    {
        if (((((HasWhiteCastled = "1") OR (IsWhiteCastlingPossible = "0")) AND (BlackQueenCount > "0")) OR (((HasBlackCastled = "1") OR (IsBlackCastlingPossible = "0")) AND (WhiteQueenCount > "0"))))
        {
            if ((IsProfilerEnabled > "0"))
            {
                call Profile_MethodEnter((270 + Depth));
            }
            call TTProbeBoard(CurrentBoardHash);
            if (((TTProbeRes = "1") AND not((TTProbeBoardScore3Res = ""))))
            {
                EvalExtendedResult3 = TTProbeBoardScore3Res;
                if ((IsProfilerEnabled > "0"))
                {
                    call Profile_MethodExit((270 + Depth));
                }
                Stop(this script);
            }
            if ((((HasBlackCastled = "1") OR (IsBlackCastlingPossible = "0")) AND (WhiteQueenCount > "0")))
            {
                Rank = (IdxToRank[BlackKingIdx] - 1);
                File = (IdxToFile[BlackKingIdx] - 1);
                repeat (3)
                {
                    if (((Rank > "0") AND (Rank < "9")))
                    {
                        repeat (3)
                        {
                            if (((File > "0") AND (File < "9")))
                            {
                                Idx = (((Rank - 1) * 8) + File);
                                if (not((Idx = BlackKingIdx)))
                                {
                                    if ((Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], Idx) > "0"))
                                    {
                                        EvalExtendedResult3 += -10;
                                        if (((Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], Idx) < "2") AND not((Operator.LetterOf(BoardAttackedByBlackPieceSnapshot[Depth], Idx) < PieceIdxLookup[BlackQueen]))))
                                        {
                                            EvalExtendedResult3 += -10;
                                        }
                                        if ((Operator.LetterOf(BoardAttackedByWhitePieceSnapshot[Depth], Idx) < PieceIdxLookup[BlackQueen]))
                                        {
                                            EvalExtendedResult3 += -10;
                                        }
                                    }
                                }
                            }
                            File += 1;
                        }
                        File += -3;
                    }
                    Rank += 1;
                }
            }
            if ((((HasWhiteCastled = "1") OR (IsWhiteCastlingPossible = "0")) AND (BlackQueenCount > "0")))
            {
                Rank = (IdxToRank[WhiteKingIdx] - 1);
                File = (IdxToFile[WhiteKingIdx] - 1);
                repeat (3)
                {
                    if (((Rank > "0") AND (Rank < "9")))
                    {
                        repeat (3)
                        {
                            if (((File > "0") AND (File < "9")))
                            {
                                Idx = (((Rank - 1) * 8) + File);
                                if (not((Idx = WhiteKingIdx)))
                                {
                                    if ((Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], Idx) > "0"))
                                    {
                                        EvalExtendedResult3 += 10;
                                        if (((Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], Idx) < "2") AND not((Operator.LetterOf(BoardAttackedByWhitePieceSnapshot[Depth], Idx) < PieceIdxLookup[BlackQueen]))))
                                        {
                                            EvalExtendedResult3 += 10;
                                        }
                                        if ((Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], Idx) < PieceIdxLookup[BlackQueen]))
                                        {
                                            EvalExtendedResult3 += 10;
                                        }
                                    }
                                }
                            }
                            File += 1;
                        }
                        File += -3;
                    }
                    Rank += 1;
                }
            }
            call TTStoreBoard(CurrentBoardHash)("")("")(EvalExtendedResult3);
            if ((IsProfilerEnabled > "0"))
            {
                call Profile_MethodExit((270 + Depth));
            }
        }
    }
}

define ImportBoardImpl(string ImpBoard) (warp=true)
{
    Idx = "1";
    IdxString = "1";
    CurrentPiece = "";
    repeat until((IdxString > Variable.Length(ImpBoard)))
    {
        if ((Operator.LetterOf(ImpBoard, IdxString) = ","))
        {
            Data.ReplaceItem(Board, Idx, CurrentPiece);
            Idx += 1;
            CurrentPiece = "";
        }
        else
        {
            CurrentPiece = Operator.Join(CurrentPiece, Operator.LetterOf(ImpBoard, IdxString));
        }
        IdxString += 1;
    }
}

define TTStoreNode(string BoardHash)(string Depth)(string Score)(string BestMove)(string Type)(string Checked)(string Horizon)(string BlackMob)(string WhiteMob)(string BoardAttackedByOpp)(string BoardAttackedByOppPiece) (warp=true)
{
    HashBucket = ((BoardHash % List.Length(TTNodeHash)) + 1);
    CurrentIdx = "1";
    repeat until((((TTNodeHash[HashBucket] = BoardHash) AND ((TTNodeDepth[HashBucket] % 2) = (Depth % 2))) OR (CurrentIdx > "5")))
    {
        HashBucket += 1;
        if ((HashBucket > List.Length(TTNodeHash)))
        {
            HashBucket = "1";
        }
        CurrentIdx += 1;
    }
    if (not(((TTNodeHash[HashBucket] = BoardHash) AND ((TTNodeDepth[HashBucket] % 2) = (Depth % 2)))))
    {
        HashBucket = ((BoardHash % List.Length(TTNodeHash)) + 1);
        CurrentIdx = "1";
        repeat until(((TTNodeHash[HashBucket] = "") OR (TTNodeAge[HashBucket] < (TTProbeCurrentAge - 2))))
        {
            HashBucket += 1;
            if ((HashBucket > List.Length(TTNodeHash)))
            {
                HashBucket = "1";
            }
            CurrentIdx += 1;
            if ((CurrentIdx > "5"))
            {
                Stop(this script);
            }
        }
    }
    Data.ReplaceItem(TTNodeAge, HashBucket, TTProbeCurrentAge);
    if (((BoardHash = TTNodeHash[HashBucket]) AND ((Depth % 2) = (TTNodeDepth[HashBucket] % 2))))
    {
        if ((Horizon < TTNodeHorizon[HashBucket]))
        {
            if ((not((BestMove = "")) AND (TTNodeBestMove[HashBucket] = "")))
            {
                Data.ReplaceItem(TTNodeBestMove, HashBucket, BestMove);
            }
            if ((not((BoardAttackedByOpp = "")) AND (TTNodeBoardAttackedByOpp[HashBucket] = "")))
            {
                Data.ReplaceItem(TTNodeBoardAttackedByOpp, HashBucket, BoardAttackedByOpp);
                Data.ReplaceItem(TTNodeBoardAttackedByOppPiece, HashBucket, BoardAttackedByOppPiece);
            }
            Stop(this script);
        }
        if (not((BestMove = "")))
        {
            Data.ReplaceItem(TTNodeBestMove, HashBucket, BestMove);
        }
        if (not((BoardAttackedByOpp = "")))
        {
            Data.ReplaceItem(TTNodeBoardAttackedByOpp, HashBucket, BoardAttackedByOpp);
            Data.ReplaceItem(TTNodeBoardAttackedByOppPiece, HashBucket, BoardAttackedByOppPiece);
        }
    }
    else
    {
        Data.ReplaceItem(TTNodeBestMove, HashBucket, BestMove);
        Data.ReplaceItem(TTNodeBoardAttackedByOpp, HashBucket, BoardAttackedByOpp);
        Data.ReplaceItem(TTNodeBoardAttackedByOppPiece, HashBucket, BoardAttackedByOppPiece);
    }
    Data.ReplaceItem(TTNodeHash, HashBucket, BoardHash);
    Data.ReplaceItem(TTNodeDepth, HashBucket, Depth);
    Data.ReplaceItem(TTNodeType, HashBucket, Type);
    Data.ReplaceItem(TTNodeChecked, HashBucket, Checked);
    Data.ReplaceItem(TTNodeBlackMobility, HashBucket, BlackMob);
    Data.ReplaceItem(TTNodeWhiteMobility, HashBucket, WhiteMob);
    Data.ReplaceItem(TTNodeScore, HashBucket, Score);
    Data.ReplaceItem(TTNodeHorizon, HashBucket, Horizon);
}

define QuickSort (warp=true)
{
    List.DeleteAll(QSPartStack);
    call QuickSortImpl("1")(List.Length(SortedList));
}

define BinarySort (warp=true)
{
    List.DeleteAll(SortedList2);
    Idx = "1";
    repeat (List.Length(SortedList))
    {
        FromIdx = "1";
        ToIdx = List.Length(SortedList2);
        MiddleIdx = floor(((FromIdx + ToIdx) / 2));
        repeat until((FromIdx > ToIdx))
        {
            if ((SortedList2[MiddleIdx] < SortedList[Idx]))
            {
                FromIdx = (MiddleIdx + 1);
            }
            else
            {
                if ((SortedList2[MiddleIdx] > SortedList[Idx]))
                {
                    ToIdx = (MiddleIdx - 1);
                }
                else
                {
                    FromIdx = (MiddleIdx - 1);
                    ToIdx = (MiddleIdx - 1);
                }
            }
            MiddleIdx = floor(((FromIdx + ToIdx) / 2));
        }
        Data.InsertItem(SortedList2, (MiddleIdx + 1), SortedList[Idx]);
        Idx += 1;
    }
    List.DeleteAll(SortedList);
    Idx = "1";
    repeat (List.Length(SortedList2))
    {
        List.Add(SortedList, SortedList2[Idx]);
        Idx += 1;
    }
}

define AddMoveToList(string Move)(string Score)(string Depth) (warp=true)
{
    if ((Depth < "6"))
    {
        if ((Depth = "5"))
        {
            List.Add(Moves5, Move);
            List.Add(Moves5Score, Score);
            Data.ReplaceItem(MovesCount, 5, List.Length(Moves5));
        }
        else
        {
            if ((Depth = "4"))
            {
                List.Add(Moves4, Move);
                List.Add(Moves4Score, Score);
                Data.ReplaceItem(MovesCount, 4, List.Length(Moves4));
            }
            else
            {
                if ((Depth = "3"))
                {
                    List.Add(Moves3, Move);
                    List.Add(Moves3Score, Score);
                    Data.ReplaceItem(MovesCount, 3, List.Length(Moves3));
                }
                else
                {
                    if ((Depth = "2"))
                    {
                        List.Add(Moves2, Move);
                        List.Add(Moves2Score, Score);
                        Data.ReplaceItem(MovesCount, 2, List.Length(Moves2));
                    }
                    else
                    {
                        if ((Depth = "1"))
                        {
                            List.Add(Moves1, Move);
                            List.Add(Moves1Score, Score);
                            Data.ReplaceItem(MovesCount, 1, List.Length(Moves1));
                        }
                    }
                }
            }
        }
    }
    else
    {
        if ((Depth < "11"))
        {
            if ((Depth = "6"))
            {
                List.Add(Moves6, Move);
                List.Add(Moves6Score, Score);
                Data.ReplaceItem(MovesCount, 6, List.Length(Moves6));
            }
            else
            {
                if ((Depth = "7"))
                {
                    List.Add(Moves7, Move);
                    List.Add(Moves7Score, Score);
                    Data.ReplaceItem(MovesCount, 7, List.Length(Moves7));
                }
                else
                {
                    if ((Depth = "8"))
                    {
                        List.Add(Moves8, Move);
                        List.Add(Moves8Score, Score);
                        Data.ReplaceItem(MovesCount, 8, List.Length(Moves8));
                    }
                    else
                    {
                        if ((Depth = "9"))
                        {
                            List.Add(Moves9, Move);
                            List.Add(Moves9Score, Score);
                            Data.ReplaceItem(MovesCount, 9, List.Length(Moves9));
                        }
                        else
                        {
                            if ((Depth = "10"))
                            {
                                List.Add(Moves10, Move);
                                List.Add(Moves10Score, Score);
                                Data.ReplaceItem(MovesCount, 10, List.Length(Moves10));
                            }
                        }
                    }
                }
            }
        }
        else
        {
            if ((Depth < "16"))
            {
                if ((Depth = "11"))
                {
                    List.Add(Moves11, Move);
                    List.Add(Moves11Score, Score);
                    Data.ReplaceItem(MovesCount, 11, List.Length(Moves11));
                }
                else
                {
                    if ((Depth = "12"))
                    {
                        List.Add(Moves12, Move);
                        List.Add(Moves12Score, Score);
                        Data.ReplaceItem(MovesCount, 12, List.Length(Moves12));
                    }
                    else
                    {
                        if ((Depth = "13"))
                        {
                            List.Add(Moves13, Move);
                            List.Add(Moves13Score, Score);
                            Data.ReplaceItem(MovesCount, 13, List.Length(Moves13));
                        }
                        else
                        {
                            if ((Depth = "14"))
                            {
                                List.Add(Moves14, Move);
                                List.Add(Moves14Score, Score);
                                Data.ReplaceItem(MovesCount, 14, List.Length(Moves14));
                            }
                            else
                            {
                                if ((Depth = "15"))
                                {
                                    List.Add(Moves15, Move);
                                    List.Add(Moves15Score, Score);
                                    Data.ReplaceItem(MovesCount, 15, List.Length(Moves15));
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                if ((Depth = "16"))
                {
                    List.Add(Moves16, Move);
                    List.Add(Moves16Score, Score);
                    Data.ReplaceItem(MovesCount, 16, List.Length(Moves16));
                }
                else
                {
                    if ((Depth = "17"))
                    {
                        List.Add(Moves17, Move);
                        List.Add(Moves17Score, Score);
                        Data.ReplaceItem(MovesCount, 17, List.Length(Moves17));
                    }
                    else
                    {
                        if ((Depth = "18"))
                        {
                            List.Add(Moves18, Move);
                            List.Add(Moves18Score, Score);
                            Data.ReplaceItem(MovesCount, 18, List.Length(Moves18));
                        }
                        else
                        {
                            if ((Depth = "19"))
                            {
                                List.Add(Moves19, Move);
                                List.Add(Moves19Score, Score);
                                Data.ReplaceItem(MovesCount, 19, List.Length(Moves19));
                            }
                            else
                            {
                                if ((Depth = "20"))
                                {
                                    List.Add(Moves20, Move);
                                    List.Add(Moves20Score, Score);
                                    Data.ReplaceItem(MovesCount, 20, List.Length(Moves20));
                                }
                                else
                                {
                                    if ((Depth = "21"))
                                    {
                                        List.Add(Moves21, Move);
                                        List.Add(Moves21Score, Score);
                                        Data.ReplaceItem(MovesCount, 21, List.Length(Moves21));
                                    }
                                    else
                                    {
                                        if ((Depth = "22"))
                                        {
                                            List.Add(Moves22, Move);
                                            List.Add(Moves22Score, Score);
                                            Data.ReplaceItem(MovesCount, 22, List.Length(Moves22));
                                        }
                                        else
                                        {
                                            if ((Depth = "23"))
                                            {
                                                List.Add(Moves23, Move);
                                                List.Add(Moves23Score, Score);
                                                Data.ReplaceItem(MovesCount, 23, List.Length(Moves23));
                                            }
                                            else
                                            {
                                                if ((Depth = "24"))
                                                {
                                                    List.Add(Moves24, Move);
                                                    List.Add(Moves24Score, Score);
                                                    Data.ReplaceItem(MovesCount, 24, List.Length(Moves24));
                                                }
                                                else
                                                {
                                                    if ((Depth = "25"))
                                                    {
                                                        List.Add(Moves25, Move);
                                                        List.Add(Moves25Score, Score);
                                                        Data.ReplaceItem(MovesCount, 25, List.Length(Moves25));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

WhenBroadCastReceived(fromsquareselected)
{
    if (((IsModeJunior = "1") AND not((FromSquareIdx = "-1"))))
    {
        BestMoveFromIdx = FromSquareIdx;
        List.DeleteAll(UserMoveTargets);
        call CalculateMoves(2);
        Data.ReplaceItem(MovesIdx, 2, "1");
        IdxOuter2 = "1";
        repeat (MovesCount[2])
        {
            call GetCurrentMove(2);
            if ((floor((CurrentMove / 100)) = FromSquareIdx))
            {
                call ApplyMove(2);
                call CalcBoardAttackedByMove(3);
                call RevertMove(2);
                if ((IsWhiteChecked = "0"))
                {
                    List.Add(UserMoveTargets, floor((CurrentMove % 100)));
                }
            }
            else
            {
                if ((Board[FromSquareIdx] = WhiteKing))
                {
                    if ((CurrentMove = WhiteKingsideCastling))
                    {
                        List.Add(UserMoveTargets, VirtualBoard[63]);
                    }
                    else
                    {
                        if ((CurrentMove = WhiteQueensideCastling))
                        {
                            List.Add(UserMoveTargets, VirtualBoard[59]);
                        }
                    }
                }
            }
            Data.ReplaceItem(MovesIdx, 2, (MovesIdx[2] + 1));
        }
        Event.BroadcastAndWait("StampUserMoveTargets");
    }
}

WhenKeyPressed(v)
{
    call SayAsync("Game of Kings Chess Version 3.10 (25.04.2021) by ArnoHu")(5);
}

define CalcBoardStats (warp=true)
{
    BlackKingIdx = "";
    WhiteKingIdx = "";
    CurrentBoardHash = "0";
    Idx = "1";
    repeat (8)
    {
        Data.ReplaceItem(BlackPawnCount, Idx, "0");
        Data.ReplaceItem(WhitePawnCount, Idx, "0");
        Idx += 1;
    }
    Idx = "1";
    repeat (64)
    {
        if ((Board[Idx] = WhitePawn))
        {
            Data.ReplaceItem(WhitePawnCount, IdxToFile[Idx], (WhitePawnCount[IdxToFile[Idx]] + 1));
        }
        else
        {
            if ((Board[Idx] = BlackPawn))
            {
                Data.ReplaceItem(BlackPawnCount, IdxToFile[Idx], (BlackPawnCount[IdxToFile[Idx]] + 1));
            }
            else
            {
                if ((Board[Idx] = WhiteKing))
                {
                    WhiteKingIdx = Idx;
                }
                else
                {
                    if ((Board[Idx] = BlackKing))
                    {
                        BlackKingIdx = Idx;
                    }
                }
            }
        }
        call GetPiecePosHash(Board[Idx])(Idx);
        CurrentBoardHash = (CurrentBoardHash + PiecePosHash);
        Idx += 1;
    }
    BlackMinorCount = "0";
    BlackQueenCount = "0";
    BlackPawnCount = "0";
    WhiteQueenCount = "0";
    WhiteMinorCount = "0";
    WhitePawnCount = "0";
    Idx = "1";
    repeat (64)
    {
        if ((Board[Idx] = WhiteQueen))
        {
            WhiteQueenCount += 1;
        }
        if ((Board[Idx] = BlackQueen))
        {
            BlackQueenCount += 1;
        }
        if (((Board[Idx] = WhiteKnight) OR ((Board[Idx] = WhiteBishop) OR (Board[Idx] = WhiteRook))))
        {
            WhiteMinorCount += 1;
        }
        if (((Board[Idx] = BlackKnight) OR ((Board[Idx] = BlackBishop) OR (Board[Idx] = BlackRook))))
        {
            BlackMinorCount += 1;
        }
        if ((Board[Idx] = WhitePawn))
        {
            WhitePawnCount += 1;
        }
        if ((Board[Idx] = BlackPawn))
        {
            BlackPawnCount += 1;
        }
        Idx += 1;
    }
    if ((((WhiteQueenCount + WhiteMinorCount) < "2") OR ((BlackQueenCount + BlackMinorCount) < "2")))
    {
        IsEndgame2 = "1";
        IsEndgame = "1";
    }
    else
    {
        if (((((WhiteQueenCount * 9) + (WhiteMinorCount * 4)) < "10") OR (((BlackQueenCount * 9) + (BlackMinorCount * 4)) < "10")))
        {
            IsEndgame2 = "0";
            IsEndgame = "1";
        }
        else
        {
            IsEndgame2 = "0";
            IsEndgame = "0";
        }
    }
    if (((HasBlackCastled = "0") AND ((HasBlackKingMoved = "0") AND ((HasBlackRookKSMoved = "0") OR (HasBlackRookQSMoved = "0")))))
    {
        IsBlackCastlingPossible = "1";
    }
    else
    {
        IsBlackCastlingPossible = "0";
    }
    if (((HasWhiteCastled = "0") AND ((HasWhiteKingMoved = "0") AND ((HasWhiteRookKSMoved = "0") OR (HasWhiteRookQSMoved = "0")))))
    {
        IsWhiteCastlingPossible = "1";
    }
    else
    {
        IsWhiteCastlingPossible = "0";
    }
}

WhenBroadCastReceived(switchmode)
{
    call SwitchMode;
}

define SwitchMode (warp=false)
{
    if ((IsModeJunior = "0"))
    {
        IsModeJunior = "1";
        call SayAsync("Junior mode enabled. Low playing strength. Easy and Medium play semi-random moves, Difficult searches one ply. Valid move advice activated.")(5);
        Event.Broadcast("JuniorModeEnabled");
    }
    else
    {
        IsModeJunior = "0";
        call SayAsync("Standard mode enabled. Normal playing strength. Valid move advice deactivated.")(5);
        Event.Broadcast("JuniorModeDisabled");
    }
}

WhenBroadCastReceived(triggerrestart)
{
    Looks.Say("");
}

WhenBroadCastReceived(evaluationvaluechangedinternal)
{
    Event.BroadcastAndWait("evaluationvaluechanged");
}

define OnEvaluationChanged(string Eval) (warp=true)
{
    if ((IsModeJunior = "0"))
    {
        if ((Eval > "1000"))
        {
            EvaluationValue = "100";
        }
        else
        {
            if ((Eval < "-1000"))
            {
                EvaluationValue = "-100";
            }
            else
            {
                EvaluationValue = (Eval / 10);
            }
        }
    }
    else
    {
        EvaluationValue = "0";
    }
    Event.Broadcast("evaluationvaluechanged");
    Control.Wait(0);
}

define StoreAttackInfo(string Depth)(string StoreDepth) (warp=true)
{
    if (((Depth % 2) = "1"))
    {
        CurrentValue = "";
        CurrentValue2 = "";
        Idx = "1";
        repeat (64)
        {
            CurrentValue = Operator.Join(CurrentValue, BoardAttackedByBlack[Idx]);
            if (not((BoardAttackedByBlackPiece[Idx] = "0")))
            {
                CurrentValue2 = Operator.Join(CurrentValue2, PieceIdxLookup[BoardAttackedByBlackPiece[Idx]]);
            }
            else
            {
                CurrentValue2 = Operator.Join(CurrentValue2, "0");
            }
            Idx += 1;
        }
        Data.ReplaceItem(BoardAttackedByBlackSnapshot, StoreDepth, CurrentValue);
        Data.ReplaceItem(BoardAttackedByBlackPieceSnapshot, StoreDepth, CurrentValue2);
    }
    else
    {
        CurrentValue = "";
        CurrentValue2 = "";
        Idx = "1";
        repeat (64)
        {
            CurrentValue = Operator.Join(CurrentValue, BoardAttackedByWhite[Idx]);
            if (not((BoardAttackedByWhitePiece[Idx] = "0")))
            {
                CurrentValue2 = Operator.Join(CurrentValue2, PieceIdxLookup[abs(BoardAttackedByWhitePiece[Idx])]);
            }
            else
            {
                CurrentValue2 = Operator.Join(CurrentValue2, "0");
            }
            Idx += 1;
        }
        Data.ReplaceItem(BoardAttackedByWhiteSnapshot, StoreDepth, CurrentValue);
        Data.ReplaceItem(BoardAttackedByWhitePieceSnapshot, StoreDepth, CurrentValue2);
    }
}

define IsDrawByMaterial (warp=true)
{
    IsDrawRes = "0";
    CurrentValue = "0";
    CurrentValue2 = "0";
    Idx = "1";
    repeat (64)
    {
        CurrentPiece = Board[Idx];
        if (not((CurrentPiece = "0")))
        {
            if (((CurrentPiece = BlackBishop) OR (CurrentPiece = BlackKnight)))
            {
                CurrentValue += 1;
            }
            else
            {
                if (((CurrentPiece = WhiteBishop) OR (CurrentPiece = WhiteKnight)))
                {
                    CurrentValue2 += 1;
                }
                else
                {
                    if (not((abs(CurrentPiece) = BlackKing)))
                    {
                        Stop(this script);
                    }
                }
            }
        }
        Idx += 1;
    }
    if (((CurrentValue + CurrentValue2) < "2"))
    {
        IsDrawRes = "1";
    }
}

if ((PickPhase[Depth] = "2"))
{
}

define AddMoveImplLookup(string SourceIdx)(string TargetIdx)(string Depth)(bool CalcAttackState)(bool CapturesOnly)(bool LookupMoveTypeKing) (warp=true)
{
    if ((LookupMoveTypeKing AND not(CalcAttackState)))
    {
        if ((BoardAttackedCalculated[Depth] = "0"))
        {
            CalculateMovesRequiresAttackRecalc = "1";
            Stop(this script);
        }
        if (((Depth % 2) = "1"))
        {
            if ((Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], TargetIdx) > "0"))
            {
                Stop(this script);
            }
        }
        else
        {
            if ((Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], TargetIdx) > "0"))
            {
                Stop(this script);
            }
        }
    }
    call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)(CalcAttackState)(CapturesOnly);
}

define GetSpecialMoveScore(string Move)(string Depth) (warp=true)
{
    MoveScoreRes = "0";
    if (((Move = BlackQueensideCastling) OR (Move = BlackKingsideCastling)))
    {
        MoveScoreRes = "50";
        Stop(this script);
    }
    else
    {
        if (((Move = WhiteQueensideCastling) OR (Move = WhiteKingsideCastling)))
        {
            MoveScoreRes = "-50";
            Stop(this script);
        }
    }
    if ((Variable.Length(Move) = "6"))
    {
        if (((Depth % 2) = "1"))
        {
            OrderFac = "1";
        }
        else
        {
            OrderFac = "-1";
        }
        if ((Operator.LetterOf(Move, 6) = "1"))
        {
            MoveScoreRes = (800 * OrderFac);
        }
        else
        {
            if ((Operator.LetterOf(Move, 6) = "2"))
            {
                MoveScoreRes = (400 * OrderFac);
            }
            else
            {
                if ((Operator.LetterOf(Move, 6) = "3"))
                {
                    MoveScoreRes = (220 * OrderFac);
                }
                else
                {
                    MoveScoreRes = (200 * OrderFac);
                }
            }
        }
    }
}
