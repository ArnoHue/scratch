//----- Green flag events ---------------------------------------------------------------------------------------------

WhenGreenFlagClicked()
{
    Level = 4;
    GoK_Level = 4;
    If is compiled?
    {
        IsScratch3 = 0;
    }
    Else
    {
        IsScratch3 = 1;
    }
    Call OnRestart;
}


//----- Key pressed events --------------------------------------------------------------------------------------------

WhenKeyPressed(l)
{
    If (DebugMode == -1)
    {
        Stop(this script);
    }
    List.Show(Logfile);
}

WhenKeyPressed(p)
{
    If (ProfilerMode == -1)
    {
        Stop(this script);
    }
    If ((ProfilerMode % 10) == 0)
    {
        ProfilerMode += 1;
        IsBlockProfilerEnabled = 0;
        Call SayAsync("Statistical profiling enabled. Press 'l' to view data.")(2);
    }
    Else
    {
        If ((ProfilerMode % 10) == 1)
        {
            ProfilerMode += 1;
            IsBlockProfilerEnabled = 1;
            Call SayAsync("Full profiling enabled. Press 'l' / 'r' to view data.")(2);
        }
        Else
        {
            If ((ProfilerMode % 10) == 2)
            {
                ProfilerMode += -2;
                IsBlockProfilerEnabled = 0;
                Call SayAsync("Profiling disabled.")(2);
            }
        }
    }
}

WhenKeyPressed(d)
{
    If (DebugMode == -1)
    {
        Stop(this script);
    }
    If (DebugMode == 0)
    {
        DebugMode = 1;
        Variable.Show(IdxDeepening);
        Variable.Show(BestMinMaxRes);
        Variable.Show(BestMove);
        Variable.Show(NPS);
        Variable.Show(MPS);
        Variable.Show(PV);
    }
    Else
    {
        DebugMode = 0;
        Variable.Hide(IdxDeepening);
        Variable.Hide(BestMinMaxRes);
        Variable.Hide(BestMove);
        Variable.Hide(NPS);
        Variable.Hide(MPS);
        Variable.Hide(PV);
    }
}

WhenKeyPressed(v)
{
    Call SayAsync("Game of Kings Chess Version 6.9247 (25.09.2025) by ArnoHu")(5);
}

WhenKeyPressed(r)
{
    If (ProfilerMode == -1)
    {
        Stop(this script);
    }
    If (ProfilerMode < 10)
    {
        ProfilerMode += 10;
        List.Show(Profile_Data);
    }
    Else
    {
        ProfilerMode += -10;
        List.Hide(Profile_Data);
    }
}

WhenKeyPressed(t)
{
    If (TimeControl == -1)
    {
        Stop(this script);
    }
    If (TimeControl == 0)
    {
        TimeControl = 1;
        Variable.Show(CustomThinkTime);
    }
    Else
    {
        TimeControl = 0;
        Variable.Hide(CustomThinkTime);
    }
}


//----- Broadcast received events -------------------------------------------------------------------------------------

WhenBroadcastReceived(advisor)
{
    If (IsExecutionRunning == 0)
    {
        If (IsAdvisorEnabled == 1)
        {
            IsAdvisorEnabled = 0;
            Call DrawBoardAndWait;
        }
        Else
        {
            IsAdvisorEnabled = 1;
            If (Not ((Stg_FromSquareIdx == -1)))
            {
                Event.BroadcastAndWait("fromsquareselected");
            }
        }
    }
}

WhenBroadcastReceived(export)
{
    If (IsExecutionRunning == 0)
    {
        Call ExportBoardFEN((IsPlayerBlack == 1))((1 == 1));
        List.DeleteItem(ExportData, all);
        List.Add(ExportData, "DATA EXPORT");
        List.Add(ExportData, "Select data row by triple-clicking. You can then copy to");
        List.Add(ExportData, "clipboard by right-click / Copy or by pressing Ctrl-C.");
        List.Add(ExportData, "");
        List.Add(ExportData, "PGN (Game Protocol):");
        Call ExportMovesPGN;
        List.Add(ExportData, ExportMovesPGN);
        List.Add(ExportData, "");
        List.Add(ExportData, "FEN (Current Board):");
        List.Add(ExportData, ExportDataFEN);
        List.Add(ExportData, "");
        List.Add(ExportData, "Board Analysis Link (lichess.org)");
        List.Add(ExportData, ExportDataFENLichess);
        List.Show(ExportData);
        If (1 == 0)
        {
            Call SayAsync("You can copy FEN data, lichess.org URL or PGN data to your clipboard via Ctrl-C. Select data by triple-click.")(5);
        }
    }
}

WhenBroadcastReceived(fromsquareselected)
{
    If ((IsAdvisorEnabled == 1) And (Not ((Stg_FromSquareIdx == -1))))
    {
        Stg_BestMoveFromIdx = Stg_FromSquareIdx;
        List.DeleteAll(Selection_UserMoveTargets);
        Call GenerateMovesPublic(2);
        List.ReplaceItem(MovesIdx, 2, 1);
        Repeat (MovesCount[2])
        {
            Call GetCurrentMove(2);
            CurrentMoveOuter = CurrentMove;
            If (floor((CurrentMoveOuter / 100)) == Stg_FromSquareIdx)
            {
                Call ApplyMove(2);
                Call CalcBoardAttackedByMove(3);
                Call RevertMove(2);
                If (IsWhiteChecked == 0)
                {
                    List.Add(Selection_UserMoveTargets, floor((CurrentMoveOuter % 100)));
                }
            }
            Else
            {
                If (Board[Stg_FromSquareIdx] == GoK_WhiteKing)
                {
                    If (CurrentMoveOuter == GoK_WhiteKingsideCastling)
                    {
                        List.Add(Selection_UserMoveTargets, VirtualBoard[63]);
                    }
                    Else
                    {
                        If (CurrentMoveOuter == GoK_WhiteQueensideCastling)
                        {
                            List.Add(Selection_UserMoveTargets, VirtualBoard[59]);
                        }
                    }
                }
            }
            List.ReplaceItem(MovesIdx, 2, (MovesIdx[2] + 1));
        }
        Call DrawBoardAndWait;
        Event.BroadcastAndWait("StampUserMoveTargets");
    }
}

WhenBroadcastReceived(import)
{
    If (IsExecutionRunning == 0)
    {
        Sensing.Ask("Board data import. Please paste FEN data from your clipboard into the text field by pressing Ctrl-V.");
        If (Variable.Length(Sensing.Answer()) > 0)
        {
            Call ImportBoard(Sensing.Answer());
        }
    }
}

WhenBroadcastReceived(levelchanged)
{
    Level = GoK_Level;
    Call DrawBoardAndWait;
}

WhenBroadcastReceived(sayasyncmsg)
{
    Looks.Say(SayAsyncText, SayAsyncDuration);
}

WhenBroadcastReceived(showmoves)
{
    Call ExportMovesPGN;
    List.DeleteItem(ExportMoves, all);
    List.Add(ExportMoves, ExportMovesPGN);
    List.Show(ExportMoves);
    Call SayAsync("You can copy PGN data to your clipboard via Ctrl-C")(5);
}

WhenBroadcastReceived(squareclicked)
{
    If ((IsExecutionRunning == 0) And (GoK_IsGameSuspended == 0))
    {
        Call EnterExecution;
        If (Board[Stg_SquareClickedIdx] < 0)
        {
            MoveFromIdx = Stg_SquareClickedIdx;
            Stg_FromSquareIdx = Stg_SquareClickedIdx;
            Event.BroadcastAndWait("fromsquareselected");
        }
        Else
        {
            If ((Not ((MoveFromIdx == -1))) And (Not ((Stg_FromSquareIdx == -1))))
            {
                MoveToIdx = Stg_SquareClickedIdx;
                Stg_ToSquareIdx = Stg_SquareClickedIdx;
                Event.BroadcastAndWait("tosquareselected");
                If ((Board[MoveFromIdx] < 0) And (Not ((MoveFromIdx == MoveToIdx))))
                {
                    UserMove = "";
                    If ((Board[MoveFromIdx] == GoK_WhiteKing) And (MoveFromIdx == VirtualBoard[61]))
                    {
                        If ((MoveToIdx == VirtualBoard[59]) And (Board[VirtualBoard[57]] == GoK_WhiteRook))
                        {
                            Call GenerateMovesPublic(2);
                            If List.ContainsItem(Moves2, GoK_WhiteQueensideCastling)
                            {
                                UserMove = GoK_WhiteQueensideCastling;
                            }
                            Else
                            {
                                UserMove = Operator.Join(VirtualBoard[61], VirtualBoard[59]);
                            }
                        }
                        If ((MoveToIdx == VirtualBoard[63]) And (Board[VirtualBoard[64]] == GoK_WhiteRook))
                        {
                            Call GenerateMovesPublic(2);
                            If List.ContainsItem(Moves2, GoK_WhiteKingsideCastling)
                            {
                                UserMove = GoK_WhiteKingsideCastling;
                            }
                            Else
                            {
                                UserMove = Operator.Join(VirtualBoard[61], VirtualBoard[63]);
                            }
                        }
                    }
                    If (UserMove == "")
                    {
                        UserMove = ((MoveFromIdx * 100) + MoveToIdx);
                        If ((Board[MoveFromIdx] == GoK_WhitePawn) And (MoveToIdx < 9))
                        {
                            UserMove = (UserMove + 0.1);
                        }
                    }
                }
                Call ExecuteUserMove(UserMove);
            }
        }
        Call ExitExecution;
    }
}

WhenBroadcastReceived(stageclicked)
{
    List.Hide(ExportData);
    List.Hide(ExportMoves);
    List.Hide(Logfile);
    If (Not ((ProfilerMode < 10)))
    {
        ProfilerMode += -10;
        List.Hide(Profile_Data);
    }
    If (IsExecutionRunning == 0)
    {
        Looks.Say("");
    }
}

WhenBroadcastReceived(startgame)
{
    Motion.GoToXY(240, 80);
    ExecutionDepth = 0;
    IsExecutionRunning = 0;
    IsPlayerBlack = GoK_IsPlayerBlack;
    Call EnterExecution;
    Call InitBoard;
    Call DrawBoardAndWait;
    Looks.Say("Initializing engine, please wait...");
    Control.Wait(0.1);
    Call InitBoardPhase2;
    Call ExitExecution;
    Call ExecuteInit;
    Looks.Say("");
}

WhenBroadcastReceived(triggerrestart)
{
    Call OnRestart;
}

WhenBroadcastReceived(undo)
{
    If (IsExecutionRunning == 0)
    {
        Call UndoMove;
        Call OnEvaluationChanged(0);
        Looks.Say("");
    }
}


//----- Custom blocks -------------------------------------------------------------------------------------------------

Define //(string Comment) (warp=true)
{
}

Define AddBoardToHistory(string WasEngineMove) (warp=true)
{
    Call GetBoardString;
    List.Add(BoardHistory, GetBoardStringRes);
    Call CreateCurrentBoardHash;
    List.Add(BoardHistoryHash, CurrentBoardHash);
    List.Add(BoardHistoryMetaState, Operator.Join(Operator.Join(Operator.Join(HasBlackCastled, HasBlackKingMoved), Operator.Join(HasBlackRookKSMoved, HasBlackRookQSMoved)), Operator.Join(Operator.Join(HasWhiteCastled, HasWhiteKingMoved), Operator.Join(HasWhiteRookKSMoved, HasWhiteRookQSMoved))));
    List.Add(BoardHistoryWasEngineMove, WasEngineMove);
}

Define AddLookupMove(string SourceIdx)(string Depth)(bool CalcAttackState)(bool CapturesOnly)(bool LookupMoveTypeKing) (warp=true)
{
    SourcePieceOuter = Board[(SourceIdx + 0)];
    IdxOuter = MoveLookupIndexOffset[(SourceIdx + 0)];
    Count1 = 1;
    Repeat (8)
    {
        If LookupMoveTypeKing
        {
            TargetIdxOuter = MoveLookupKing[(IdxOuter + Count1)];
        }
        Else
        {
            TargetIdxOuter = MoveLookupKnight[(IdxOuter + Count1)];
        }
        If (TargetIdxOuter == -1)
        {
            Stop(this script);
        }
        If CalcAttackState
        {
            Call AddMoveImplLookup(SourceIdx)(TargetIdxOuter)(Depth)(CalcAttackState)(CapturesOnly)(LookupMoveTypeKing);
        }
        Else
        {
            If (Board[(TargetIdxOuter + 0)] == 0)
            {
                If CapturesOnly
                {
                    If LookupMoveTypeKing
                    {
                        If (CheckedState[(Depth + 0)] == 1)
                        {
                            Call AddMoveImplLookup(SourceIdx)(TargetIdxOuter)(Depth)(CalcAttackState)(CapturesOnly)(LookupMoveTypeKing);
                        }
                        Else
                        {
                            Call AddPotentialQuiescenceMove(SourceIdx)(TargetIdxOuter)(SourcePieceOuter)(Depth);
                        }
                    }
                    Else
                    {
                        Call AddPotentialQuiescenceMove(SourceIdx)(TargetIdxOuter)(SourcePieceOuter)(Depth);
                    }
                }
                Else
                {
                    Call AddMoveImplLookup(SourceIdx)(TargetIdxOuter)(Depth)(CalcAttackState)(CapturesOnly)(LookupMoveTypeKing);
                }
            }
            Else
            {
                If (SourcePieceOuter > 0)
                {
                    If (Board[(TargetIdxOuter + 0)] < 0)
                    {
                        Call AddMoveImplLookup(SourceIdx)(TargetIdxOuter)(Depth)(CalcAttackState)(CapturesOnly)(LookupMoveTypeKing);
                    }
                }
                Else
                {
                    If (Board[(TargetIdxOuter + 0)] > 0)
                    {
                        Call AddMoveImplLookup(SourceIdx)(TargetIdxOuter)(Depth)(CalcAttackState)(CapturesOnly)(LookupMoveTypeKing);
                    }
                }
            }
        }
        Count1 += 1;
    }
}

Define AddMoveImpl(string SourceIdx)(string TargetIdx)(string Depth)(bool CalcAttackState)(bool CapturesOnly) (warp=true)
{
    If CalcAttackState
    {
        SourcePiece = Board[(SourceIdx + 0)];
        TargetPiece = Board[(TargetIdx + 0)];
        If (CalcAttackStateWithMobility == 1)
        {
            IdxSub2 = (((SourceIdx - 1) * 32) + 1);
            Count2 = (PieceMobilityPrep[(IdxSub2 + 0)] + 1);
            List.ReplaceItem(PieceMobilityPrep, (IdxSub2 + 0), Count2);
            List.ReplaceItem(PieceMobilityPrep, (IdxSub2 + Count2), TargetIdx);
        }
        If (SourcePiece > 0)
        {
            Attacked = BoardAttackedByBlack[(TargetIdx + 0)];
            If ((Attacked == 0) Or (Board[BoardAttackedByBlackPiece[(TargetIdx + 0)]] > SourcePiece))
            {
                List.ReplaceItem(BoardAttackedByBlackPiece, (TargetIdx + 0), SourceIdx);
            }
            If (Attacked < 9)
            {
                List.ReplaceItem(BoardAttackedByBlack, (TargetIdx + 0), (Attacked + 1));
            }
            If (TargetPiece == GoK_WhiteKing)
            {
                IsWhiteChecked = 1;
                List.Add(KingAttackLines, SourceIdx);
            }
        }
        Else
        {
            If (SourcePiece < 0)
            {
                Attacked = BoardAttackedByWhite[(TargetIdx + 0)];
                If ((Attacked == 0) Or (Board[BoardAttackedByWhitePiece[(TargetIdx + 0)]] < SourcePiece))
                {
                    List.ReplaceItem(BoardAttackedByWhitePiece, (TargetIdx + 0), SourceIdx);
                }
                If (Attacked < 9)
                {
                    List.ReplaceItem(BoardAttackedByWhite, (TargetIdx + 0), (Attacked + 1));
                }
                If (TargetPiece == GoK_BlackKing)
                {
                    IsBlackChecked = 1;
                    List.Add(KingAttackLines, SourceIdx);
                }
            }
        }
        Stop(this script);
    }
    If (CheckedState[(Depth + 0)] == 1)
    {
        If (Not ((Operator.LetterOf(CheckedStateAttackLines[(Depth + 0)], TargetIdx) == 1)))
        {
            If (Not ((abs(Board[(SourceIdx + 0)]) == GoK_BlackKing)))
            {
                If (Not ((abs(Board[(TargetIdx + 0)]) == GoK_BlackKing)))
                {
                    If (BoardAttackedCalculated[(Depth + 0)] == 1)
                    {
                        If ((Depth > 2) And (EnPassantTarget[(Depth + 0)] == ""))
                        {
                            Stop(this script);
                        }
                    }
                }
            }
        }
    }
    CurrentMove = ((SourceIdx * 100) + TargetIdx);
    If (abs(Board[(SourceIdx + 0)]) == GoK_BlackPawn)
    {
        If ((IdxToRank[(TargetIdx + 0)] == 1) Or (IdxToRank[(TargetIdx + 0)] == 8))
        {
            Call AddSpecialMove((CurrentMove + 0.1))(Depth);
            Call AddSpecialMove((CurrentMove + 0.2))(Depth);
            Call AddSpecialMove((CurrentMove + 0.3))(Depth);
            Call AddSpecialMove((CurrentMove + 0.4))(Depth);
            Stop(this script);
        }
    }
    List.Add(CalcMovesMoveList, CurrentMove);
    Call GetNormalizedMove(CurrentMove);
    If Operator.Contains(PickedMoves[(Depth + 0)], NormalizedMoveRes)
    {
        If ((Depth % 2) == 1)
        {
            List.Add(CalcMovesScoreList, MaxMoveOrderScore);
        }
        Else
        {
            List.Add(CalcMovesScoreList, (0 - MaxMoveOrderScore));
        }
        Stop(this script);
    }
    Call GetMoveScore(Board[(SourceIdx + 0)])(Board[(TargetIdx + 0)])(SourceIdx)(TargetIdx)(CurrentMove)(Depth);
    List.Add(CalcMovesScoreList, MoveScoreRes);
}

Define AddMoveImplLookup(string SourceIdx)(string TargetIdx)(string Depth)(bool CalcAttackState)(bool CapturesOnly)(bool IsKing) (warp=true)
{
    If IsKing
    {
        If (Not (CalcAttackState))
        {
            If ((Depth % 2) == 1)
            {
                If (ChebyshevDistance[((TargetIdx * 100) + WhiteKingIdx)] < 2)
                {
                    Stop(this script);
                }
            }
            Else
            {
                If (ChebyshevDistance[((TargetIdx * 100) + BlackKingIdx)] < 2)
                {
                    Stop(this script);
                }
            }
            If (BoardAttackedCalculated[(Depth + 0)] == 0)
            {
                GenerateMovesRequiresAttackRecalc = 1;
                Stop(this script);
            }
            Else
            {
                If ((Depth % 2) == 1)
                {
                    If (Operator.LetterOf(BoardAttackedByWhiteSnapshot[(Depth + 0)], TargetIdx) > 0)
                    {
                        Stop(this script);
                    }
                }
                Else
                {
                    If (Operator.LetterOf(BoardAttackedByBlackSnapshot[(Depth + 0)], TargetIdx) > 0)
                    {
                        Stop(this script);
                    }
                }
            }
        }
    }
    Call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)(CalcAttackState)(CapturesOnly);
}

Define AddMoveToList(string Move)(string Depth) (warp=true)
{
    List.ReplaceItem(Moves, (((Depth - 1) * MaxMovesPerGeneration) + (MovesCount[Depth] + 1)), Move);
    List.ReplaceItem(MovesCount, Depth, (MovesCount[Depth] + 1));
    If (Depth < 3)
    {
        If (Depth == 1)
        {
            List.Add(Moves1, Move);
        }
        Else
        {
            If (Depth == 2)
            {
                List.Add(Moves2, Move);
            }
        }
    }
}

Define AddPotentialQuiescenceMove(string SourceIdx)(string TargetIdx)(string Piece)(string Depth) (warp=true)
{
    Call //("Include move in quiescence search if it's a check or check evasion");
    If (CheckedState[Depth] == 1)
    {
        If (BoardAttackedCalculated[(Depth + 0)] == 0)
        {
            GenerateMovesRequiresAttackRecalc = 1;
            Stop(this script);
        }
        If (abs(Piece) == GoK_BlackKing)
        {
            If ((Depth % 2) == 1)
            {
                If (Operator.LetterOf(BoardAttackedByWhiteSnapshot[(Depth + 0)], TargetIdx) > 0)
                {
                    Stop(this script);
                }
            }
            Else
            {
                If (Operator.LetterOf(BoardAttackedByBlackSnapshot[(Depth + 0)], TargetIdx) > 0)
                {
                    Stop(this script);
                }
            }
            Call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)((1 == 0))((1 == 1));
        }
        Else
        {
            If (Operator.LetterOf(CheckedStateAttackLines[Depth], (TargetIdx + 0)) == 1)
            {
                Call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)((1 == 0))((1 == 1));
            }
        }
        Stop(this script);
    }
    If (Piece == GoK_BlackPawn)
    {
        If (IdxToRank[(TargetIdx + 0)] == 8)
        {
            Call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)((1 == 0))((1 == 1));
            Stop(this script);
        }
    }
    If (Piece == GoK_WhitePawn)
    {
        If (IdxToRank[(TargetIdx + 0)] == 1)
        {
            Call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)((1 == 0))((1 == 1));
            Stop(this script);
        }
    }
    If (IsPotentialNonCapQuiescMove == 0)
    {
        Stop(this script);
    }
    TargetPieceOuter = Board[(TargetIdx + 0)];
    List.ReplaceItem(Board, TargetIdx, Board[(SourceIdx + 0)]);
    List.ReplaceItem(Board, SourceIdx, 0);
    Call IsCheckingPieceDiscovery(SourceIdx)(TargetIdx)(Depth);
    List.ReplaceItem(Board, SourceIdx, Board[(TargetIdx + 0)]);
    List.ReplaceItem(Board, TargetIdx, TargetPieceOuter);
    If (IsCheckingPieceRes == 1)
    {
        Call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)((1 == 0))((1 == 1));
        Stop(this script);
    }
    If (abs(Piece) == GoK_BlackKing)
    {
        Stop(this script);
    }
    CurrentMove = "";
    If (Piece > 0)
    {
        If (MovePosLookupBlackLegal[((PieceIdxLookup[(Piece + 0)] * 10000) + ((TargetIdx * 100) + WhiteKingIdx))] == 0)
        {
            Stop(this script);
        }
        If (Piece == GoK_BlackPawn)
        {
            If (IdxToFile[(TargetIdx + 0)] == IdxToFile[(WhiteKingIdx + 0)])
            {
                Stop(this script);
            }
            Call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)((1 == 0))((1 == 1));
            Stop(this script);
        }
        If (Piece == GoK_BlackKnight)
        {
            Call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)((1 == 0))((1 == 1));
            Stop(this script);
        }
        CurrentMove = ((TargetIdx * 100) + WhiteKingIdx);
    }
    Else
    {
        If (MovePosLookupWhiteLegal[((PieceIdxLookup[(0 - Piece)] * 10000) + ((TargetIdx * 100) + BlackKingIdx))] == 0)
        {
            Stop(this script);
        }
        If (Piece == GoK_WhitePawn)
        {
            If (IdxToFile[(TargetIdx + 0)] == IdxToFile[(BlackKingIdx + 0)])
            {
                Stop(this script);
            }
            Call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)((1 == 0))((1 == 1));
            Stop(this script);
        }
        If (Piece == GoK_WhiteKnight)
        {
            Call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)((1 == 0))((1 == 1));
            Stop(this script);
        }
        CurrentMove = ((TargetIdx * 100) + BlackKingIdx);
    }
    SourceIdx = TargetIdx;
    IdxInc = MovePathStepInc[(CurrentMove + 0)];
    Repeat ((MovePathDelta[(CurrentMove + 0)] - 1))
    {
        SourceIdx += IdxInc;
        If (Not ((Board[(SourceIdx + 0)] == 0)))
        {
            Stop(this script);
        }
    }
    Call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)((1 == 0))((1 == 1));
}

Define AddSlidingMove(string SourceIdx)(string Depth)(bool CalcAttackState)(bool CapturesOnly)(bool SlidingMoveTypeStraight) (warp=true)
{
    If CalcAttackState
    {
        Call ASMAttack(SourceIdx)(Depth)(SlidingMoveTypeStraight);
    }
    Else
    {
        Call ASM(SourceIdx)(Depth)(CapturesOnly)(SlidingMoveTypeStraight);
    }
}

Define AddSpecialMove(string Move)(string Depth) (warp=true)
{
    List.Add(CalcMovesMoveList, Move);
    If (Variable.Length(PickedMoves[Depth]) > 0)
    {
        Call GetNormalizedMove(Move);
        If Operator.Contains(PickedMoves[Depth], NormalizedMoveRes)
        {
            If ((Depth % 2) == 1)
            {
                List.Add(CalcMovesScoreList, MaxMoveOrderScore);
            }
            Else
            {
                List.Add(CalcMovesScoreList, (0 - MaxMoveOrderScore));
            }
            Stop(this script);
        }
    }
    SourcePiece = "";
    If (Variable.Length(Move) == 6)
    {
        SourcePiece = GoK_BlackPawn;
    }
    If (floor((Move / 100)) == 0)
    {
        SourcePiece = GoK_BlackKing;
    }
    If ((Depth % 2) == 1)
    {
        Call GetMoveScore(SourcePiece)(0)("")("")(Move)(Depth);
    }
    Else
    {
        Call GetMoveScore((0 - SourcePiece))(0)("")("")(Move)(Depth);
    }
    List.Add(CalcMovesScoreList, MoveScoreRes);
}

Define AddToFiftyMoves(bool IsCaptureOrPawnMove) (warp=true)
{
    If IsCaptureOrPawnMove
    {
        List.Add(BoardHistoryFiftyMoves, 0);
    }
    Else
    {
        List.Add(BoardHistoryFiftyMoves, (BoardHistoryFiftyMoves[List.Length(BoardHistoryFiftyMoves)] + 1));
    }
}

Define AlphaBetaMinMax(string Alpha)(string Beta)(string MinDepth)(string MaxDepth)(bool InitialDeepening)(string QuiescenceDepth)(bool ShowProgress) (warp=true)
{
    MinMaxAlpha = Alpha;
    MinMaxBeta = Beta;
    MinMaxEvalRes = "";
    MinMaxMoveRes = "";
    Call InitAlphaBeta((MaxDepth - 1))(InitialDeepening);
    Call Evaluate(0)((1 == 0));
    List.ReplaceItem(Alphas, MinDepth, Alpha);
    List.ReplaceItem(Betas, MinDepth, Beta);
    MoveCount = 0;
    MoveCountQ = 0;
    NodeCount = 0;
    NodeCountQ = 0;
    ProfBestMoveCount = 0;
    ProfBestMoveIdxSum = 0;
    ProfBestMoveCountQ = 0;
    ProfBestMoveIdxSumQ = 0;
    MinMaxTimer = (Sensing.DaysSince2000() * 86400);
    Call AlphaBetaMinMaxImpl(MinDepth)(MinDepth)(MaxDepth)(InitialDeepening)(QuiescenceDepth)((1 == 0))((1 == 0))(ShowProgress)((MaxDepth - 1))((1 == 0))("");
    MinMaxTimer = ((Sensing.DaysSince2000() * 86400) - MinMaxTimer);
    Call ExportBoardFEN((IsPlayerBlack == 1))((1 == 0));
    Call Log("PV: ")("[FEN "")(ExportDataFEN)(""] ")(PV)("")("")("");
    If ((ProfilerMode % 10) > 0)
    {
        Call Log("========================================")("")("")("")("")("")("")("");
        Call Log("SEARCH STATS")("")("")("")("")("")("")("");
        Call Log("========================================")("")("")("")("")("")("")("");
        Call Log("Depth = ")((MaxDepth - 1))(", Time = ")((Operator.Round((MinMaxTimer * 100)) / 100))("")("")("")("");
        Call Log(MoveCount)(" moves (full), ")((Operator.Round(((MoveCount / MinMaxTimer) / 100)) / 10))("k MPS")("")("")("")("");
        Call Log(NodeCount)(" nodes (full), ")((Operator.Round(((NodeCount / MinMaxTimer) / 100)) / 10))("k NPS")("")("")("")("");
        Call Log(MoveCountQ)(" moves (q), ")((Operator.Round(((MoveCountQ / MinMaxTimer) / 100)) / 10))("k MPS")("")("")("")("");
        Call Log(NodeCountQ)(" nodes (q), ")((Operator.Round(((NodeCountQ / MinMaxTimer) / 100)) / 10))("k NPS")("")("")("")("");
        Call Log((MoveCount + MoveCountQ))(" moves (all), ")((Operator.Round((((MoveCount + MoveCountQ) / MinMaxTimer) / 100)) / 10))("k MPS")("")("")("")("");
        Call Log((NodeCount + NodeCountQ))(" nodes (all), ")((Operator.Round((((NodeCount + NodeCountQ) / MinMaxTimer) / 100)) / 10))("k NPS")("")("")("")("");
        Call Log("Avg. best move idx (full) = ")((Operator.Round(((ProfBestMoveIdxSum / ProfBestMoveCount) * 100)) / 100))("")("")("")("")("")("");
        Call Log("Avg. best move idx (q) = ")((Operator.Round(((ProfBestMoveIdxSumQ / ProfBestMoveCountQ) * 100)) / 100))("")("")("")("")("")("");
        Call Log("========================================")("")("")("")("")("")("")("");
    }
    MPS = Operator.Round(((MoveCount + MoveCountQ) / MinMaxTimer));
    NPS = Operator.Round(((NodeCount + NodeCountQ) / MinMaxTimer));
}

Define AlphaBetaMinMaxImpl(string Depth)(string MinDepth)(string MaxDepth)(bool InitialDeepening)(string QuiescenceDepth)(bool Quiescence)(bool PrevQuiescence)(bool ShowProgress)(string Horizon)(bool Cutnode)(string ExcludeMove) (warp=true)
{
    If (IsMinMaxTimeout == 1)
    {
        List.ReplaceItem(MinMaxResults, Depth, "");
        List.ReplaceItem(ScoreTypes, Depth, "");
        List.ReplaceItem(MinMaxResultsIsDynamic, Depth, "");
        Stop(this script);
    }
    Call //("Required for early TT access and draw detection");
    If (Depth == 1)
    {
        List.ReplaceItem(CastlingState, 1, Operator.Join(Operator.Join(Operator.Join(HasBlackCastled, HasBlackKingMoved), Operator.Join(HasBlackRookKSMoved, HasBlackRookQSMoved)), Operator.Join(Operator.Join(HasWhiteCastled, HasWhiteKingMoved), Operator.Join(HasWhiteRookKSMoved, HasWhiteRookQSMoved))));
        List.ReplaceItem(CheckedState, 1, "");
    }
    Else
    {
        List.ReplaceItem(CastlingState, Depth, CastlingState[(Depth - 1)]);
        List.ReplaceItem(CheckedState, Depth, PutsInCheck[(Depth - 1)]);
    }
    Call //("Search tree leaf reached");
    If (Depth == MaxDepth)
    {
        Call TTProbeBoard(CurrentBoardHash)((Depth - 1));
        If ((TTProbeRes == 1) And (Not ((TTProbeBoardScoreSumRes == ""))))
        {
            List.ReplaceItem(MinMaxResults, Depth, TTProbeBoardScoreSumRes);
            List.ReplaceItem(ScoreTypes, Depth, "E");
            List.ReplaceItem(MinMaxResultsIsDynamic, Depth, 0);
            Stop(this script);
        }
    }
    If (Depth > 1)
    {
        Call //("Virtual king captures on previous ply => depth-corrected checkmate evaluation");
        If (TargetPieces[(Depth - 1)] == GoK_WhiteKing)
        {
            List.ReplaceItem(MinMaxResults, Depth, (100000 - ((Depth - 1) * 1000)));
            List.ReplaceItem(ScoreTypes, Depth, "E");
            List.ReplaceItem(MinMaxResultsIsDynamic, Depth, 0);
            Stop(this script);
        }
        If (TargetPieces[(Depth - 1)] == GoK_BlackKing)
        {
            List.ReplaceItem(MinMaxResults, Depth, (-100000 + ((Depth - 1) * 1000)));
            List.ReplaceItem(ScoreTypes, Depth, "E");
            List.ReplaceItem(MinMaxResultsIsDynamic, Depth, 0);
            Stop(this script);
        }
    }
    If ((Depth > 1) And (IsInNullMove == 0))
    {
        Call //("Rule of 50 moves");
        If (BoardHistoryFiftyMoves[List.Length(BoardHistoryFiftyMoves)] > (99 - 0))
        {
            List.ReplaceItem(MinMaxResults, (Depth + 0), DrawByRepetitionEval);
            List.ReplaceItem(ScoreTypes, (Depth + 0), "E");
            List.ReplaceItem(MinMaxResultsIsDynamic, (Depth + 0), 1);
            Stop(this script);
        }
        Call //("Draw-by-repetition detection. This happens on every ply and could be costly, so we check previous plies for pawn moves and captures, and the history tables for board hash. Only then we count hash occurrences for same side.");
        If (BoardHistoryFiftyMoves[List.Length(BoardHistoryFiftyMoves)] > 5)
        {
            Count1 = 1;
            If List.ContainsItem(PreviousBoardHash, CurrentBoardHash)
            {
                Idx = (Depth - 2);
                Repeat Until ((Idx < 2) Or (Count1 > 2))
                {
                    If (CurrentBoardHash == PreviousBoardHash[Idx])
                    {
                        Count1 += 1;
                    }
                    Idx += -2;
                }
            }
            If List.ContainsItem(BoardHistoryHash, CurrentBoardHash)
            {
                Idx = ((List.Length(BoardHistoryHash) - 1) + (Depth % 2));
                Repeat Until ((Idx < 1) Or (Count1 > 2))
                {
                    If (CurrentBoardHash == BoardHistoryHash[Idx])
                    {
                        Count1 += 1;
                    }
                    Idx += -2;
                }
            }
            If (Count1 > 1)
            {
                List.ReplaceItem(MinMaxResults, (Depth + 0), DrawByRepetitionEval);
                List.ReplaceItem(ScoreTypes, (Depth + 0), "E");
                List.ReplaceItem(MinMaxResultsIsDynamic, (Depth + 0), 1);
                Stop(this script);
            }
        }
    }
    If ((Depth > 1) And (ExcludeMove == ""))
    {
        If (((Betas[(Depth + 0)] - Alphas[(Depth + 0)]) == 1) Or (1 == 0))
        {
            Call //("Probe transposition table for cached node evaluations");
            Call TTProbeNode(CurrentBoardHash)(Depth);
            If ((TTProbeRes == 1) And ((Not ((TTProbeNodeScoreRes == ""))) And (Not ((TTProbeHorizonRes == "")))))
            {
                If (((Not (Quiescence)) And (Not ((TTProbeHorizonRes < Horizon)))) Or ((Quiescence And (TTProbeHorizonRes == -1)) And ((IsScratch3 == 0) Or (TTProbeNodeAgeRes == TTCurrentAge))))
                {
                    If ((TTProbeNodeTypeRes == "E") Or (((TTProbeNodeTypeRes == "A") And (Not ((TTProbeNodeScoreRes > Alphas[(Depth + 0)])))) Or ((TTProbeNodeTypeRes == "B") And (Not ((TTProbeNodeScoreRes < Betas[(Depth + 0)]))))))
                    {
                        If ((TTProbeNodeScoreIsDynamicRes == 0) Or (floor((TTProbeNodeAgeRes % 100)) == floor((TTCurrentAge % 100))))
                        {
                            If (Not ((abs(TTProbeNodeScoreRes) > AbsMinCheckmateEval)))
                            {
                                List.ReplaceItem(MinMaxResults, Depth, TTProbeNodeScoreRes);
                                List.ReplaceItem(MinMaxResultsIsDynamic, Depth, TTProbeNodeScoreIsDynamicRes);
                                Stop(this script);
                            }
                        }
                    }
                }
            }
        }
    }
    If ((Depth > 1) And (IsInNullMove == 0))
    {
        Call //("Draw-by-stalemate detection. This is expensive, and is only applied at low search depth or during late endgame stage (no minor pieces left)");
        If (Not (Quiescence))
        {
            If (Not ((CheckedState[(Depth + 0)] == 1)))
            {
                If ((((Depth % 2) == 1) And ((BlackQueenCountLocal == 0) And (BlackMinorCountLocal < 2))) Or (((Depth % 2) == 0) And ((WhiteQueenCountLocal == 0) And (WhiteMinorCountLocal < 2))))
                {
                    If ((Depth < 4) Or (Horizon > 2))
                    {
                        Call IsDrawByStalemate((Depth + 2));
                        If (IsDrawRes == 1)
                        {
                            Call StoreMinMaxDrawResult(CurrentBoardHash)(Depth);
                            Stop(this script);
                        }
                    }
                }
            }
        }
        Call //("Fast draw-by-material verification");
        If (((BlackQueenCountLocal == 0) And (WhiteQueenCountLocal == 0)) And ((BlackPawnCountLocal == 0) And (WhitePawnCountLocal == 0)))
        {
            If (((BlackRookCountLocal == 0) And (BlackMinorCountLocal < 2)) And ((WhiteRookCountLocal == 0) And (WhiteMinorCountLocal < 2)))
            {
                Call StoreMinMaxDrawResult(CurrentBoardHash)(Depth);
                Stop(this script);
            }
        }
        Call //("Special K-KP endgame draw detection, according to pawn and king position. Finds draws otherwise not visible within search horizon");
        If ((Depth > 1) And (Not (PrevQuiescence)))
        {
            If (((WhiteQueenCountLocal + WhiteMinorCountLocal) == 0) And ((BlackQueenCountLocal + BlackMinorCountLocal) == 0))
            {
                If ((BlackPawnCountLocal + WhitePawnCountLocal) == 1)
                {
                    Idx = 1;
                    Repeat (64)
                    {
                        CurrentPiece = Board[(Idx + 0)];
                        If ((CurrentPiece == GoK_WhitePawn) And ((Depth % 2) == 0))
                        {
                            If ((IdxToFile[Idx] == 1) Or (IdxToFile[Idx] == 8))
                            {
                                If ((IdxToFile[Idx] == IdxToFile[BlackKingIdx]) And (IdxToRank[BlackKingIdx] < IdxToRank[Idx]))
                                {
                                    Call StoreMinMaxDrawResult(CurrentBoardHash)(Depth);
                                    Stop(this script);
                                }
                            }
                            Else
                            {
                                If (((Idx - 8) == BlackKingIdx) Or ((Idx - 16) == BlackKingIdx))
                                {
                                    If (Not ((((Idx - 1) == WhiteKingIdx) Or ((Idx + 1) == WhiteKingIdx))))
                                    {
                                        Call StoreMinMaxDrawResult(CurrentBoardHash)(Depth);
                                        Stop(this script);
                                    }
                                }
                                If ((Idx - 24) == BlackKingIdx)
                                {
                                    If ((IdxToRank[Idx] > 4) And ((Idx - 8) == WhiteKingIdx))
                                    {
                                        Call StoreMinMaxDrawResult(CurrentBoardHash)(Depth);
                                        Stop(this script);
                                    }
                                }
                            }
                        }
                        Else
                        {
                            If ((CurrentPiece == GoK_BlackPawn) And ((Depth % 2) == 1))
                            {
                                If ((IdxToFile[Idx] == 1) Or (IdxToFile[Idx] == 8))
                                {
                                    If ((IdxToFile[Idx] == IdxToFile[WhiteKingIdx]) And (IdxToRank[WhiteKingIdx] > IdxToRank[Idx]))
                                    {
                                        Call StoreMinMaxDrawResult(CurrentBoardHash)(Depth);
                                        Stop(this script);
                                    }
                                }
                                Else
                                {
                                    If (((Idx + 8) == WhiteKingIdx) Or ((Idx + 16) == WhiteKingIdx))
                                    {
                                        If (Not ((((Idx - 1) == BlackKingIdx) Or ((Idx + 1) == BlackKingIdx))))
                                        {
                                            Call StoreMinMaxDrawResult(CurrentBoardHash)(Depth);
                                            Stop(this script);
                                        }
                                    }
                                    If ((Idx + 24) == WhiteKingIdx)
                                    {
                                        If ((IdxToRank[Idx] < 5) And ((Idx + 8) == BlackKingIdx))
                                        {
                                            Call StoreMinMaxDrawResult(CurrentBoardHash)(Depth);
                                            Stop(this script);
                                        }
                                    }
                                }
                            }
                        }
                        Idx += 1;
                    }
                }
            }
        }
    }
    Call //("Search function (minimax / alpha-beta pruning)");
    List.ReplaceItem(MinMaxResults, (Depth + 0), "");
    List.ReplaceItem(MinMaxResultsIsDynamic, (Depth + 0), 0);
    List.ReplaceItem(ScoreTypes, (Depth + 0), "E");
    List.ReplaceItem(BestMoves, (Depth + 0), "");
    List.ReplaceItem(BoardEval, (Depth + 0), "");
    List.ReplaceItem(PV, (((Depth - 1) * MaxSearchDepthStackFrames) + 1), 0);
    Call //("Initialize local variables or forward state from previous ply");
    If (Depth == 1)
    {
        List.ReplaceItem(CheckedState, (Depth + 0), "");
        Call CalcBoardAttackedByMove(1);
        Call StoreAttackInfo(1)(2);
        List.ReplaceItem(BoardAttackedByBlackSnapshot, 1, BoardAttackedByBlackSnapshot[2]);
        List.ReplaceItem(BoardAttackedByBlackPieceSnapshot, 1, BoardAttackedByBlackPieceSnapshot[2]);
        Call CalcBoardAttackedByMove(2);
        Call StoreAttackInfo(2)(1);
        List.ReplaceItem(BoardAttackedCalculated, 1, 1);
        List.ReplaceItem(CastlingState, 1, Operator.Join(Operator.Join(Operator.Join(HasBlackCastled, HasBlackKingMoved), Operator.Join(HasBlackRookKSMoved, HasBlackRookQSMoved)), Operator.Join(Operator.Join(HasWhiteCastled, HasWhiteKingMoved), Operator.Join(HasWhiteRookKSMoved, HasWhiteRookQSMoved))));
    }
    Else
    {
        List.ReplaceItem(CheckedState, (Depth + 0), PutsInCheck[(Depth - 1)]);
        List.ReplaceItem(BoardAttackedByBlackSnapshot, Depth, BoardAttackedByBlackSnapshot[(Depth - 1)]);
        List.ReplaceItem(BoardAttackedByBlackPieceSnapshot, Depth, BoardAttackedByBlackPieceSnapshot[(Depth - 1)]);
        List.ReplaceItem(BoardAttackedByWhiteSnapshot, Depth, BoardAttackedByWhiteSnapshot[(Depth - 1)]);
        List.ReplaceItem(BoardAttackedByWhitePieceSnapshot, Depth, BoardAttackedByWhitePieceSnapshot[(Depth - 1)]);
        List.ReplaceItem(BoardAttackedCalculated, Depth, 0);
        List.ReplaceItem(CheckedState, Depth, PutsInCheck[(Depth - 1)]);
        List.ReplaceItem(CheckedStateAttackLines, Depth, "");
        List.ReplaceItem(CastlingState, Depth, CastlingState[(Depth - 1)]);
    }
    List.ReplaceItem(AlphasOld, Depth, Alphas[Depth]);
    List.ReplaceItem(BetasOld, Depth, Betas[Depth]);
    List.ReplaceItem(PutsInCheck, Depth, 0);
    If Quiescence
    {
        List.ReplaceItem(Quiescence, (Depth + 0), 1);
    }
    Else
    {
        List.ReplaceItem(Quiescence, (Depth + 0), 0);
    }
    Call //("Invoke board evaluation to calculate intermediate results if required");
    Call Evaluate((Depth - 1))((1 == 0));
    If Quiescence
    {
        If (CheckedState[Depth] == 1)
        {
            If ((Depth % 2) == 1)
            {
                List.ReplaceItem(MinMaxResults, Depth, (-100000 + (Depth * 1000)));
            }
            Else
            {
                List.ReplaceItem(MinMaxResults, Depth, (100000 - (Depth * 1000)));
            }
        }
        Else
        {
            Call //("Standing pat");
            Call Evaluate((Depth - 1))((1 == 1));
            List.ReplaceItem(BoardEval, Depth, EvaluateRes);
            List.ReplaceItem(MinMaxResults, Depth, EvaluateRes);
            List.ReplaceItem(MinMaxResultsIsDynamic, Depth, EvaluateResIsDynamic);
            If ((Depth % 2) == 1)
            {
                If (Not ((EvaluateRes < Betas[Depth])))
                {
                    List.ReplaceItem(MinMaxResults, Depth, EvaluateRes);
                    List.ReplaceItem(MinMaxResultsIsDynamic, Depth, EvaluateResIsDynamic);
                    If (1 == 0)
                    {
                        Call TTStoreNode(CurrentBoardHash)(Depth)(MinMaxResults[Depth])("")("B")("")(-1)("")("")("")("")("")(MinMaxResultsIsDynamic[Depth]);
                    }
                    Stop(this script);
                }
                If (EvaluateRes > Alphas[Depth])
                {
                    List.ReplaceItem(Alphas, Depth, EvaluateRes);
                }
            }
            Else
            {
                If (Not ((EvaluateRes > Alphas[Depth])))
                {
                    List.ReplaceItem(MinMaxResults, Depth, EvaluateRes);
                    List.ReplaceItem(MinMaxResultsIsDynamic, Depth, EvaluateResIsDynamic);
                    If (1 == 0)
                    {
                        Call TTStoreNode(CurrentBoardHash)(Depth)(MinMaxResults[Depth])("")("A")("")(-1)("")("")("")("")("")(MinMaxResultsIsDynamic[Depth]);
                    }
                    Stop(this script);
                }
                If (EvaluateRes < Betas[Depth])
                {
                    List.ReplaceItem(Betas, Depth, EvaluateRes);
                }
            }
        }
    }
    If (((Not (Quiescence)) And (Depth > 1)) And ((IsInNullMove == 0) And ((ExcludeMove == "") And (CheckedState[Depth] == 0))))
    {
        Call //("IIR");
        HorizonLoc = Horizon;
        Call TTProbeNode(CurrentBoardHash)(Depth);
        If (TTProbeRes == 0)
        {
            If (Horizon > 2)
            {
                HorizonLoc += -1;
            }
            If (Not (((Betas[Depth] - Alphas[Depth]) == 1)))
            {
                HorizonLoc += -1;
            }
            If (HorizonLoc < 1)
            {
                List.ReplaceItem(Alphas, (Depth + 1), Alphas[Depth]);
                List.ReplaceItem(Betas, (Depth + 1), Betas[Depth]);
                Call AlphaBetaMinMaxImpl((Depth + 1))(MinDepth)((MaxDepth + 1))(InitialDeepening)((QuiescenceDepth - 1))((1 == 1))((1 == 0))(ShowProgress)(1)((1 == 1))("");
                List.ReplaceItem(MinMaxResults, Depth, MinMaxResults[(Depth + 1)]);
                List.ReplaceItem(MinMaxResultsIsDynamic, Depth, MinMaxResultsIsDynamic[(Depth + 1)]);
                Stop(this script);
            }
        }
        Call //("Reverse futility pruning");
        If ((1 == 0) And ((((Depth > 1) And (Horizon < 7)) And (IsEndgame == 0)) And (((Betas[Depth] - Alphas[Depth]) == 1) And (CheckedState[Depth] == 0))))
        {
            If ((((Depth % 2) == 1) And (abs(Betas[Depth]) < AbsMinCheckmateEval)) Or (((Depth % 2) == 0) And (abs(Alphas[Depth]) < AbsMinCheckmateEval)))
            {
                Call Evaluate((Depth - 1))((1 == 1));
                List.ReplaceItem(BoardEval, Depth, EvaluateRes);
                If ((Depth % 2) == 1)
                {
                    If (Not (((EvaluateRes - (120 + (120 * Horizon))) < Betas[Depth])))
                    {
                        List.ReplaceItem(MinMaxResults, Depth, Betas[Depth]);
                        List.ReplaceItem(MinMaxResultsIsDynamic, Depth, 0);
                        Stop(this script);
                    }
                }
                Else
                {
                    If (Not (((EvaluateRes + (120 + (120 * Horizon))) > Alphas[Depth])))
                    {
                        List.ReplaceItem(MinMaxResults, Depth, Alphas[Depth]);
                        List.ReplaceItem(MinMaxResultsIsDynamic, Depth, 0);
                        Stop(this script);
                    }
                }
            }
        }
        Call //("Null move pruning");
        If (IsInNullMove == 0)
        {
            If ((Horizon > 2) And (((Betas[Depth] - Alphas[Depth]) == 1) And (CheckedState[Depth] == 0)))
            {
                If ((((Depth % 2) == 1) And ((BlackQueenCountLocal + BlackMinorCountLocal) > 1)) Or (((Depth % 2) == 0) And ((WhiteQueenCountLocal + WhiteMinorCountLocal) > 1)))
                {
                    IsInNullMove += 1;
                    If (BoardEval[Depth] == "")
                    {
                        Call Evaluate((Depth - 1))((1 == 1));
                        List.ReplaceItem(BoardEval, Depth, EvaluateRes);
                    }
                    If ((((Depth % 2) == 1) And (Not ((BoardEval[Depth] < Betas[Depth])))) Or (((Depth % 2) == 0) And (Not ((BoardEval[Depth] > Alphas[Depth])))))
                    {
                        Reduction = (2 + floor((Horizon / 4)));
                        If (Reduction > (Horizon - 1))
                        {
                            Reduction = (Horizon - 1);
                        }
                        If (Reduction < 0)
                        {
                            Reduction = 0;
                        }
                        Call ClearMoveList((Depth + 0));
                        Call AddMoveToList(0)((Depth + 0));
                        List.ReplaceItem(MovesIdx, (Depth + 0), 1);
                        Call ApplyMove((Depth + 0));
                        Call Evaluate((Depth + 0))((1 == 0));
                        If ((Depth % 2) == 1)
                        {
                            List.ReplaceItem(Alphas, (Depth + 1), (Betas[Depth] - 1));
                            List.ReplaceItem(Betas, (Depth + 1), Betas[Depth]);
                        }
                        Else
                        {
                            List.ReplaceItem(Alphas, (Depth + 1), Alphas[Depth]);
                            List.ReplaceItem(Betas, (Depth + 1), (Alphas[Depth] + 1));
                        }
                        Call AlphaBetaMinMaxNextPly(Depth)(MinDepth)(MaxDepth)(InitialDeepening)(QuiescenceDepth)(Quiescence)(ShowProgress)(Horizon)(Reduction)((Not (Cutnode)))("");
                        Score = MinMaxResults[(Depth + 1)];
                        ScoreIsDynamic = MinMaxResultsIsDynamic[(Depth + 1)];
                        Call RevertMove((Depth + 0));
                        If (((((Depth % 2) == 1) And (Not ((Score < Betas[Depth])))) Or (((Depth % 2) == 0) And (Not ((Score > Alphas[Depth]))))) And (Not ((abs(Score) > AbsMinCheckmateEval))))
                        {
                            List.ReplaceItem(MinMaxResults, Depth, Score);
                            List.ReplaceItem(MinMaxResultsIsDynamic, Depth, ScoreIsDynamic);
                            IsInNullMove += -1;
                            Stop(this script);
                        }
                    }
                    IsInNullMove += -1;
                }
            }
        }
    }
    If (BoardEval[Depth] == "")
    {
        If (CheckedState[Depth] == 0)
        {
            If (((Not (Quiescence)) And (((Depth > 1) And (Horizon < 6)) And ((Betas[Depth] - Alphas[Depth]) == 1))) Or Quiescence)
            {
                Call Evaluate((Depth - 1))((1 == 1));
                List.ReplaceItem(BoardEval, Depth, EvaluateRes);
            }
        }
    }
    List.ReplaceItem(PickPhase, Depth, 1);
    List.ReplaceItem(PickMoveRes, Depth, 1);
    Call //("Move generation and application loop, recursive search invocation");
    Repeat Until (PickMoveRes[Depth] == 0)
    {
        If ((Not (Quiescence)) And ((Depth == 1) Or (Horizon > 2)))
        {
            If ((IsMinMaxTimeout == 0) And ((Not (InitialDeepening)) Or (Not ((MinMaxMoveRes == "")))))
            {
                If (((Sensing.DaysSince2000() * 86400) - ThinkTimeStart) > ThinkTimeLimitMinMax)
                {
                    IsMinMaxTimeout = 1;
                }
            }
        }
        If (IsMinMaxTimeout == 1)
        {
            If (Quiescence[Depth] == 0)
            {
                MoveCount += MovesCount[Depth];
            }
            Else
            {
                MoveCountQ += MovesCount[Depth];
            }
            Stop(this script);
        }
        If ((((Not (Quiescence)) And (Horizon > 5)) And (CheckedState[Depth] == 0)) And (Not (((Betas[Depth] - Alphas[Depth]) == 1))))
        {
            Call TTProbeNode(CurrentBoardHash)(Depth);
            If ((TTProbeRes == 0) Or (TTProbeBestMoveRes == ""))
            {
                Call AlphaBetaMinMaxImpl((Depth + 1))(MinDepth)((MaxDepth - 2))(InitialDeepening)(QuiescenceDepth)(Quiescence)(Quiescence)(ShowProgress)((Horizon - 3))((1 == 0))("");
            }
        }
        If (IsBlockProfilerEnabled == 1)
        {
            Call Profile_MethodEnter(((5 * MaxSearchDepthStackFrames) + Depth));
        }
        Call //("Invoke move generator and apply next move from list");
        Call PickMove(Depth)(Quiescence);
        If (IsBlockProfilerEnabled == 1)
        {
            Call Profile_MethodExit(((5 * MaxSearchDepthStackFrames) + Depth));
        }
        If (PickMoveRes[Depth] == 1)
        {
            Call //("Show progress and collect statistics");
            If (ShowProgress And ((Not (Quiescence)) And ((Depth == 1) Or (Horizon > 2))))
            {
                CurrentValue = (Sensing.DaysSince2000() * 86400);
                If (CurrentValue > (PrevProgressUpdate + 1))
                {
                    Call OnProgressChanged((((CurrentValue - ThinkTimeStart) / ThinkTimeLimitMinMax) * 100));
                    PrevProgressUpdate = CurrentValue;
                }
            }
            List.ReplaceItem(PutsInCheck, Depth, 0);
            List.ReplaceItem(PlyExtensionTagged, Depth, 0);
            List.ReplaceItem(PlyExtension, Depth, 0);
            If (Depth == 1)
            {
                List.ReplaceItem(MinMaxPly1Scores, floor((AppliedMove[Depth] * 10)), "");
            }
            SourceIdxOuter2 = floor((AppliedMove[Depth] / 100));
            TargetIdxOuter2 = floor((AppliedMove[Depth] % 100));
            Call //("Fast check detection for current move");
            Call IsCheckingPiece(TargetIdxOuter2);
            If (IsCheckingPieceRes == 1)
            {
                List.ReplaceItem(PutsInCheck, Depth, 1);
                Call TTStoreNode(CurrentBoardHash)((Depth + 1))("")("")("")(1)("")("")("")("")("")("")("");
            }
            Call //("Fast discovered check detection for current move");
            Call IsCheckingPieceDiscovery(SourceIdxOuter2)(TargetIdxOuter2)(Depth);
            If (IsCheckingPieceRes == 1)
            {
                List.ReplaceItem(PutsInCheck, Depth, 1);
                Call TTStoreNode(CurrentBoardHash)((Depth + 1))("")("")("")(1)("")("")("")("")("")("")("");
            }
            If ((Not (Quiescence)) And ((Level > 3) And ((IsScratch3 == 1) And (Not ((AppliedMove[Depth] == ExcludeMove))))))
            {
                SourceIdxOuter2 = floor((AppliedMove[Depth] % 100));
                SourcePieceOuter2 = Board[SourceIdxOuter2];
                If (((IsScratch3 == 1) And (Depth < 5)) And ((IsEndgame == 0) And (abs(SourcePieceOuter2) < GoK_BlackRook)))
                {
                    Call //("Fork detection for Scratch 3 runtime. Forks at low search depth will trigger search extension");
                    Factor = (((Depth % 2) * 2) - 1);
                    IdxOuter2 = ((PieceIdxLookup[abs(SourcePieceOuter2)] * 10000) + (SourceIdxOuter2 * 100));
                    CountOuter1 = 0;
                    TargetIdxOuter2 = 1;
                    Repeat (64)
                    {
                        If ((Board[TargetIdxOuter2] * Factor) < 0)
                        {
                            If (abs(SourcePieceOuter2) < abs(Board[TargetIdxOuter2]))
                            {
                                If ((((Depth % 2) == 1) And (MovePosLookupBlackLegal[(IdxOuter2 + TargetIdxOuter2)] == 1)) Or (((Depth % 2) == 0) And (MovePosLookupWhiteLegal[(IdxOuter2 + TargetIdxOuter2)] == 1)))
                                {
                                    CountOuter1 += 1;
                                }
                            }
                        }
                        TargetIdxOuter2 += 1;
                    }
                    If (CountOuter1 > 1)
                    {
                        CountOuter2 = 0;
                        Call ClearMoveList((Depth + 2));
                        Call GenerateMovesForSourceEx((Depth + 2))(floor((AppliedMove[Depth] % 100)))((1 == 0))((1 == 1));
                        List.ReplaceItem(MovesIdx, (Depth + 2), 1);
                        Repeat Until ((MovesIdx[(Depth + 2)] > MovesCount[(Depth + 2)]) Or (CountOuter2 > 1))
                        {
                            Call GetCurrentMove((Depth + 2));
                            SourceIdxOuter2 = floor((CurrentMove / 100));
                            TargetIdxOuter2 = floor((CurrentMove % 100));
                            If (abs(Board[SourceIdxOuter2]) < abs(Board[TargetIdxOuter2]))
                            {
                                CountOuter2 += 1;
                            }
                            List.ReplaceItem(MovesIdx, (Depth + 2), (MovesIdx[(Depth + 2)] + 1));
                        }
                        If (CountOuter2 > 1)
                        {
                            List.ReplaceItem(PlyExtensionTagged, Depth, 1);
                        }
                    }
                }
            }
            Score = "";
            ScoreIsDynamic = 0;
            Call //("Futility pruning");
            IsFutile = 0;
            If ((CheckedState[Depth] == 0) And ((PutsInCheck[Depth] == 0) And ((PromotionPieces[Depth] == 0) And (Not ((AppliedMove[Depth] == ExcludeMove))))))
            {
                FP.Eval = "";
                FP.SEE = "";
                If (Not ((BoardEval[Depth] == "")))
                {
                    FutilityMargin = "";
                    If Quiescence
                    {
                        If ((Not ((TargetPieces[Depth] == 0))) And ((((Depth % 2) == 1) And ((BlackQueenCountLocal + BlackMinorCountLocal) > 0)) Or (((Depth % 2) == 0) And ((WhiteQueenCountLocal + WhiteMinorCountLocal) > 0))))
                        {
                            FutilityMargin = 400;
                        }
                    }
                    Else
                    {
                        If ((Depth > 1) And (Horizon < 6))
                        {
                            If (((TargetPieces[Depth] == 0) And (PickedMoveCount[Depth] > 1)) And ((Betas[Depth] - Alphas[Depth]) == 1))
                            {
                                Rank = IdxToRank[floor((AppliedMove[Depth] % 100))];
                                If (((Not ((SourcePieces[Depth] == GoK_BlackPawn))) Or (Rank < 6)) And ((Not ((SourcePieces[Depth] == GoK_WhitePawn))) Or (Rank > 3)))
                                {
                                    FutilityMargin = (Horizon * 125);
                                }
                            }
                        }
                    }
                    EvaluateRes = BoardEval[Depth];
                    If ((Not ((FutilityMargin == ""))) And (Not ((EvaluateRes == ""))))
                    {
                        If ((Depth % 2) == 1)
                        {
                            FP.Eval = (((EvaluateRes + PosScoreDelta[Depth]) - TargetPieces[Depth]) + FutilityMargin);
                        }
                        Else
                        {
                            FP.Eval = (((EvaluateRes + PosScoreDelta[Depth]) - TargetPieces[Depth]) - FutilityMargin);
                        }
                        If ((((Depth % 2) == 1) And (Not ((FP.Eval > Alphas[(Depth + 0)])))) Or (((Depth % 2) == 0) And (Not ((FP.Eval < Betas[(Depth + 0)])))))
                        {
                            IsFutile = 1;
                            If Quiescence
                            {
                                If ((((Depth % 2) == 1) And (FP.Eval > MinMaxResults[(Depth + 0)])) Or (((Depth % 2) == 0) And (FP.Eval < MinMaxResults[(Depth + 0)])))
                                {
                                    Score = FP.Eval;
                                }
                            }
                        }
                        Else
                        {
                            If Quiescence
                            {
                                If ((Depth % 2) == 1)
                                {
                                    FP.Eval = (EvaluateRes + FutilityMargin);
                                }
                                Else
                                {
                                    FP.Eval = (EvaluateRes - FutilityMargin);
                                }
                                If ((((Depth % 2) == 1) And (Not ((FP.Eval > Alphas[(Depth + 0)])))) Or (((Depth % 2) == 0) And (Not ((FP.Eval < Betas[(Depth + 0)])))))
                                {
                                    Call SEE(Depth);
                                    FP.SEE = SEE.Result;
                                    If ((((Depth % 2) == 1) And (Not ((FP.SEE > 0)))) Or (((Depth % 2) == 0) And (Not ((FP.SEE < 0)))))
                                    {
                                        IsFutile = 1;
                                        If ((((Depth % 2) == 1) And (FP.Eval > MinMaxResults[(Depth + 0)])) Or (((Depth % 2) == 0) And (FP.Eval < MinMaxResults[(Depth + 0)])))
                                        {
                                            Score = FP.Eval;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                If (1 == 1)
                {
                    If (IsFutile == 0)
                    {
                        If Quiescence
                        {
                            If ((CheckedState[Depth] == 0) And (PutsInCheck[Depth] == 0))
                            {
                                If (FP.SEE == "")
                                {
                                    Call SEE(Depth);
                                    FP.SEE = SEE.Result;
                                }
                                If ((((Depth % 2) == 1) And (FP.SEE < 0)) Or (((Depth % 2) == 0) And (FP.SEE > 0)))
                                {
                                    IsFutile = 1;
                                }
                            }
                        }
                    }
                }
            }
            If ((IsFutile == 1) Or (AppliedMove[Depth] == ExcludeMove))
            {
                If (IsMinMaxTimeout == 0)
                {
                    If (Depth == 1)
                    {
                        List.Add(MinMaxPly1EvalMoves, AppliedMove[Depth]);
                    }
                }
                Call RevertMove(Depth);
            }
            Else
            {
                If (((Not (Quiescence)) And (Depth > 1)) And ((CheckedState[Depth] == 1) Or ((IsScratch3 == 1) And (PlyExtensionTagged[Depth] == 1))))
                {
                    If (1 == 0)
                    {
                        Call SEE(Depth);
                        If ((((Depth % 2) == 1) And (Not ((SEE.Result < 0)))) Or (((Depth % 2) == 0) And (Not ((SEE.Result > 0)))))
                        {
                            List.ReplaceItem(PlyExtension, Depth, 1);
                        }
                    }
                }
                If ((PlyExtension[Depth] == 0) And (1 == 0))
                {
                    Call //("Singular extensions, temporarily disabled");
                    If (((Not (Quiescence)) And ((Depth > 1) And (Horizon > 7))) And ((HashMove[Depth] == AppliedMove[Depth]) And (ExcludeMove == "")))
                    {
                        Call TTProbeNode(PreviousBoardHash[Depth])(Depth);
                        If ((TTProbeRes == 1) And ((Not ((TTProbeNodeScoreRes == ""))) And (Not ((TTProbeHorizonRes == "")))))
                        {
                            If (Not ((TTProbeHorizonRes < (Horizon - 3))))
                            {
                                If ((((Depth % 2) == 1) And (TTProbeNodeTypeRes == "B")) Or (((Depth % 2) == 0) And (TTProbeNodeTypeRes == "A")))
                                {
                                    SE.BoundEval = TTProbeNodeScoreRes;
                                    Call RevertMove(Depth);
                                    Call ClearMoveList((Depth + 1));
                                    Call AddMoveToList(0)((Depth + 1));
                                    List.ReplaceItem(MovesIdx, (Depth + 1), 1);
                                    Call ApplyMove((Depth + 1));
                                    If ((Depth % 2) == 1)
                                    {
                                        SE.BoundEval += (0 - (Horizon * 3));
                                        List.ReplaceItem(Alphas, (Depth + 2), (SE.BoundEval - 1));
                                        List.ReplaceItem(Betas, (Depth + 2), SE.BoundEval);
                                    }
                                    Else
                                    {
                                        SE.BoundEval += (Horizon * 3);
                                        List.ReplaceItem(Alphas, (Depth + 2), SE.BoundEval);
                                        List.ReplaceItem(Betas, (Depth + 2), (SE.BoundEval + 1));
                                    }
                                    Reduction = ceiling((Horizon / 2));
                                    Call AlphaBetaMinMaxNextPly((Depth + 2))(MinDepth)(MaxDepth)(InitialDeepening)(QuiescenceDepth)(Quiescence)(ShowProgress)(Horizon)(Reduction)(Cutnode)(HashMove[Depth]);
                                    Score = MinMaxResults[(Depth + 2)];
                                    Call RevertMove((Depth + 1));
                                    Call ApplyMove(Depth);
                                    If ((((Depth % 2) == 1) And (Score < Betas[(Depth + 2)])) Or (((Depth % 2) == 0) And (Score > Alphas[(Depth + 2)])))
                                    {
                                        List.ReplaceItem(PlyExtension, Depth, 1);
                                    }
                                }
                            }
                        }
                    }
                }
                Score = "";
                ScoreIsDynamic = 0;
                Call //("Late move reduction preparation");
                IsReductionAndDone = 0;
                If ((Not (Quiescence)) And (IsMinMaxTimeout == 0))
                {
                    If (((Horizon > 2) And ((CheckedState[Depth] == 0) And ((TargetPieces[Depth] == 0) And (PromotionPieces[Depth] == 0)))) And (((WhiteQueenCountLocal + WhiteMinorCountLocal) + (BlackQueenCountLocal + BlackMinorCountLocal)) > 0))
                    {
                        Reduction = 0;
                        If (PickedMoveCount[Depth] > (1 + (Not (((Betas[Depth] - Alphas[Depth]) == 1)))))
                        {
                            Reduction = floor((1 + ((ln(Horizon) * ln(PickedMoveCount[Depth])) / (2.32 + ((Not ((TargetPieces[Depth] == 0))) * 1.44)))));
                            If (Not (((Betas[Depth] - Alphas[Depth]) == 1)))
                            {
                                Reduction += -1;
                            }
                            If (PutsInCheck[Depth] == 1)
                            {
                                Reduction += -1;
                            }
                            If (1 == 1)
                            {
                                If ((((Depth % 2) == 1) And ((BlackQueenCountLocal + BlackMinorCountLocal) < 2)) Or (((Depth % 2) == 0) And ((WhiteQueenCountLocal + WhiteMinorCountLocal) < 2)))
                                {
                                    Reduction += 1;
                                }
                            }
                            If (1 == 1)
                            {
                                If Cutnode
                                {
                                    Reduction += 1;
                                }
                            }
                            If (1 == 1)
                            {
                                If (Reduction > 3)
                                {
                                    Reduction = 3;
                                }
                            }
                            If (Reduction > (Horizon - 1))
                            {
                                Reduction = (Horizon - 1);
                            }
                            If (Reduction < 0)
                            {
                                Reduction = 0;
                            }
                            Call //("Late move reduction");
                            If (Reduction > 0)
                            {
                                If ((Depth % 2) == 1)
                                {
                                    List.ReplaceItem(Alphas, (Depth + 1), Alphas[Depth]);
                                    List.ReplaceItem(Betas, (Depth + 1), (Alphas[Depth] + 1));
                                }
                                Else
                                {
                                    List.ReplaceItem(Alphas, (Depth + 1), (Betas[Depth] - 1));
                                    List.ReplaceItem(Betas, (Depth + 1), Betas[Depth]);
                                }
                                Call AlphaBetaMinMaxNextPly(Depth)(MinDepth)(MaxDepth)(InitialDeepening)(QuiescenceDepth)(Quiescence)(ShowProgress)(Horizon)(Reduction)((1 == 1))("");
                                Score = MinMaxResults[(Depth + 1)];
                                ScoreIsDynamic = MinMaxResultsIsDynamic[(Depth + 1)];
                                IsReductionAndDone = 1;
                            }
                        }
                    }
                    Call //("Non-PV search");
                    If ((((IsReductionAndDone == 1) And ((((Depth % 2) == 1) And (Score > Alphas[Depth])) Or (((Depth % 2) == 0) And (Score < Betas[Depth])))) Or ((IsReductionAndDone == 0) And ((PickedMoveCount[Depth] > 1) Or ((Betas[Depth] - Alphas[Depth]) == 1)))) And (IsMinMaxTimeout == 0))
                    {
                        If ((Depth % 2) == 1)
                        {
                            List.ReplaceItem(Alphas, (Depth + 1), Alphas[Depth]);
                            List.ReplaceItem(Betas, (Depth + 1), (Alphas[Depth] + 1));
                        }
                        Else
                        {
                            List.ReplaceItem(Alphas, (Depth + 1), (Betas[Depth] - 1));
                            List.ReplaceItem(Betas, (Depth + 1), Betas[Depth]);
                        }
                        Call AlphaBetaMinMaxNextPly(Depth)(MinDepth)(MaxDepth)(InitialDeepening)(QuiescenceDepth)(Quiescence)(ShowProgress)(Horizon)(0)((Not (Cutnode)))("");
                        Score = MinMaxResults[(Depth + 1)];
                        ScoreIsDynamic = MinMaxResultsIsDynamic[(Depth + 1)];
                        If ((Score > Alphas[Depth]) And ((Depth == 1) Or (Score < Betas[Depth])))
                        {
                            IsReductionAndDone = 0;
                        }
                        Else
                        {
                            IsReductionAndDone = 1;
                        }
                    }
                }
                Call //("Move was not pruned upfront, enter standard search");
                If ((IsReductionAndDone == 0) And (IsMinMaxTimeout == 0))
                {
                    List.ReplaceItem(Alphas, (Depth + 1), Alphas[Depth]);
                    List.ReplaceItem(Betas, (Depth + 1), Betas[Depth]);
                    Call AlphaBetaMinMaxNextPly(Depth)(MinDepth)(MaxDepth)(InitialDeepening)(QuiescenceDepth)(Quiescence)(ShowProgress)(Horizon)(0)((1 == 0))("");
                    Score = MinMaxResults[(Depth + 1)];
                    ScoreIsDynamic = MinMaxResultsIsDynamic[(Depth + 1)];
                }
                If (IsMinMaxTimeout == 0)
                {
                    If (Depth == 1)
                    {
                        List.Add(MinMaxPly1EvalMoves, AppliedMove[Depth]);
                        If ((Score > Alphas[Depth]) And (Score < Betas[Depth]))
                        {
                            List.ReplaceItem(MinMaxPly1Scores, floor((AppliedMove[Depth] * 10)), Score);
                        }
                    }
                }
                Call //("Revert applied move, restore board to previous state");
                Call RevertMove(Depth);
                If (IsMinMaxTimeout == 1)
                {
                    If (Quiescence[Depth] == 0)
                    {
                        MoveCount += MovesCount[Depth];
                    }
                    Else
                    {
                        MoveCountQ += MovesCount[Depth];
                    }
                    Stop(this script);
                }
            }
            If (Not ((Score == "")))
            {
                Call //("Compare node evaluation with search window, adapt node evaluation result and alpha/beta funnel accordingly");
                If ((Depth % 2) == 1)
                {
                    If ((Score > MinMaxResults[Depth]) Or (MinMaxResults[Depth] == ""))
                    {
                        List.ReplaceItem(MinMaxResults, Depth, Score);
                        List.ReplaceItem(MinMaxResultsIsDynamic, Depth, ScoreIsDynamic);
                        If (Score > Alphas[Depth])
                        {
                            Call GetCurrentMove(Depth);
                            List.ReplaceItem(BestMoves, Depth, CurrentMove);
                            List.ReplaceItem(MovesIdxBestMove, Depth, MovesIdx[Depth]);
                            Call UpdatePV(Depth)(CurrentMove);
                            If Quiescence
                            {
                                If ((Not (((Betas[Depth] - Alphas[Depth]) == 1))) And (Score < Betas[Depth]))
                                {
                                    List.ReplaceItem(Alphas, Depth, Score);
                                }
                                Else
                                {
                                    Call //("Cutoff");
                                    List.ReplaceItem(MovesIdx, Depth, (MovesCount[Depth] + 1));
                                    List.ReplaceItem(PickPhase, Depth, "*");
                                }
                            }
                            Else
                            {
                                List.ReplaceItem(Alphas, Depth, Score);
                                If (Not ((Score < Betas[Depth])))
                                {
                                    If (Depth > 1)
                                    {
                                        If ((floor((BestMoves[Depth] / 100)) == 0) Or (Board[floor((BestMoves[Depth] % 100))] == 0))
                                        {
                                            Call StoreKillerMove(Depth)(BestMoves[Depth])(MaxDepth);
                                        }
                                        Call //("Cutoff");
                                        List.ReplaceItem(MovesIdx, Depth, (MovesCount[Depth] + 1));
                                        List.ReplaceItem(PickPhase, Depth, "*");
                                    }
                                }
                                Else
                                {
                                    If ((Depth == 1) And (IsMinMaxTimeout == 0))
                                    {
                                        If (Not ((Score < (0 - AbsMaxCheckmateEval))))
                                        {
                                            Call //("Best move found for depth = 1, special handling (re-use history for iterative deepening order, logging, move preview visualization)");
                                            If ((Score > MinMaxAlpha) And (Score < MinMaxBeta))
                                            {
                                                MinMaxMoveRes = BestMoves[Depth];
                                                MinMaxEvalRes = Score;
                                                If (1 == 1)
                                                {
                                                    Call Log((MaxDepth - 1))(" : ")(MinMaxMoveRes)(" : ")(MinMaxEvalRes)("")("")("");
                                                }
                                                Call OnEvaluationChanged(Score);
                                            }
                                            If (MinMaxMoveRes == GoK_BlackKingsideCastling)
                                            {
                                                Stg_BestMoveFromIdx = VirtualBoard[5];
                                                Stg_BestMoveToIdx = VirtualBoard[7];
                                            }
                                            Else
                                            {
                                                If (MinMaxMoveRes == GoK_BlackQueensideCastling)
                                                {
                                                    Stg_BestMoveFromIdx = VirtualBoard[5];
                                                    Stg_BestMoveToIdx = VirtualBoard[3];
                                                }
                                                Else
                                                {
                                                    Stg_BestMoveFromIdx = floor((MinMaxMoveRes / 100));
                                                    Stg_BestMoveToIdx = floor((MinMaxMoveRes % 100));
                                                }
                                            }
                                            Event.Broadcast("showbestmove");
                                            If (Score > (AbsMaxCheckmateEval - ((MaxDepth - 1) * 1000)))
                                            {
                                                IsMinMaxTimeout = 1;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                Else
                {
                    If ((Score < MinMaxResults[Depth]) Or (MinMaxResults[Depth] == ""))
                    {
                        List.ReplaceItem(MinMaxResults, Depth, Score);
                        List.ReplaceItem(MinMaxResultsIsDynamic, Depth, ScoreIsDynamic);
                        If (Score < Betas[Depth])
                        {
                            Call GetCurrentMove(Depth);
                            List.ReplaceItem(BestMoves, Depth, CurrentMove);
                            List.ReplaceItem(MovesIdxBestMove, Depth, MovesIdx[Depth]);
                            Call UpdatePV(Depth)(CurrentMove);
                            If Quiescence
                            {
                                If ((Not (((Betas[Depth] - Alphas[Depth]) == 1))) And (Score > Alphas[Depth]))
                                {
                                    List.ReplaceItem(Betas, Depth, Score);
                                }
                                Else
                                {
                                    List.ReplaceItem(MovesIdx, Depth, (MovesCount[Depth] + 1));
                                    List.ReplaceItem(PickPhase, Depth, "*");
                                    Call //("Cutoff");
                                }
                            }
                            Else
                            {
                                List.ReplaceItem(Betas, Depth, Score);
                                If (Not ((Score > Alphas[Depth])))
                                {
                                    If ((floor((BestMoves[Depth] / 100)) == 0) Or (Board[floor((BestMoves[Depth] % 100))] == 0))
                                    {
                                        Call StoreKillerMove(Depth)(BestMoves[Depth])(MaxDepth);
                                    }
                                    List.ReplaceItem(MovesIdx, Depth, (MovesCount[Depth] + 1));
                                    List.ReplaceItem(PickPhase, Depth, "*");
                                    Call //("Cutoff");
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    If (Quiescence[Depth] == 0)
    {
        MoveCount += MovesCount[Depth];
    }
    Else
    {
        MoveCountQ += MovesCount[Depth];
    }
    Call //("Evaluation alpha-bound, beta-bound or exact?");
    If ((Depth % 2) == 1)
    {
        If (Not ((MinMaxResults[Depth] < Betas[Depth])))
        {
            List.ReplaceItem(ScoreTypes, Depth, "B");
        }
        Else
        {
            If ((Not (((Betas[Depth] - Alphas[Depth]) == 1))) And ((Not (Quiescence)) And (Not ((BestMoves[Depth] == "")))))
            {
                List.ReplaceItem(ScoreTypes, Depth, "E");
            }
            Else
            {
                List.ReplaceItem(ScoreTypes, Depth, "A");
            }
        }
    }
    Else
    {
        If (Not ((MinMaxResults[Depth] > Alphas[Depth])))
        {
            List.ReplaceItem(ScoreTypes, Depth, "A");
        }
        Else
        {
            If ((Not (((Betas[Depth] - Alphas[Depth]) == 1))) And ((Not (Quiescence)) And (Not ((BestMoves[Depth] == "")))))
            {
                List.ReplaceItem(ScoreTypes, Depth, "E");
            }
            Else
            {
                List.ReplaceItem(ScoreTypes, Depth, "B");
            }
        }
    }
    Call //("Fast quiescence search checkmate detection (no check evasion found)");
    If (Quiescence And ((MovesCount[Depth] == 0) And (CheckedState[Depth] == 1)))
    {
        List.ReplaceItem(ScoreTypes, Depth, "E");
        If ((Depth % 2) == 1)
        {
            List.ReplaceItem(MinMaxResults, Depth, (-100000 + ((Depth + 1) * 1000)));
        }
        Else
        {
            List.ReplaceItem(MinMaxResults, Depth, (100000 - ((Depth + 1) * 1000)));
        }
        List.ReplaceItem(MinMaxResultsIsDynamic, Depth, 0);
    }
    Call //("Fast full search checkmate and stalemate detection");
    If ((Not (Quiescence)) And ((MovesCount[Depth] == 0) And (ExcludeMove == "")))
    {
        List.ReplaceItem(ScoreTypes, Depth, "E");
        If ((Depth % 2) == 1)
        {
            If (CheckedState[Depth] == 1)
            {
                List.ReplaceItem(MinMaxResults, Depth, (-100000 + ((Depth + 1) * 1000)));
            }
            Else
            {
                Call CalcBoardAttackedByMoveChecked((Depth + 1));
                If (IsBlackChecked == 1)
                {
                    List.ReplaceItem(MinMaxResults, Depth, (-100000 + ((Depth + 1) * 1000)));
                }
                Else
                {
                    List.ReplaceItem(MinMaxResults, Depth, 0);
                }
            }
        }
        Else
        {
            If (CheckedState[Depth] == 1)
            {
                List.ReplaceItem(MinMaxResults, Depth, (100000 - ((Depth + 1) * 1000)));
            }
            Else
            {
                Call CalcBoardAttackedByMoveChecked((Depth + 1));
                If (IsWhiteChecked == 1)
                {
                    List.ReplaceItem(MinMaxResults, Depth, (100000 - ((Depth + 1) * 1000)));
                }
                Else
                {
                    List.ReplaceItem(MinMaxResults, Depth, 0);
                }
            }
        }
        List.ReplaceItem(MinMaxResultsIsDynamic, Depth, 0);
        Call TTStoreNode(CurrentBoardHash)(Depth)(MinMaxResults[Depth])("")(ScoreTypes[Depth])("")(99)("")("")("")("")("")(0);
    }
    If (BestMoves[Depth] == "")
    {
        If (MovesCount[Depth] > 0)
        {
            List.ReplaceItem(MovesIdx, Depth, 1);
            Call GetCurrentMove(Depth);
            List.ReplaceItem(BestMoves, Depth, CurrentMove);
        }
    }
    If (((IsMinMaxTimeout == 0) And (Depth > 1)) And (ExcludeMove == ""))
    {
        Call //("Store evaluations, hash moves, attack tables, check state, mobility, ... to transposition table");
        If Quiescence
        {
            Call TTStoreNode(CurrentBoardHash)(Depth)(MinMaxResults[Depth])(BestMoves[Depth])(ScoreTypes[Depth])("")(-1)("")("")("")("")("")(MinMaxResultsIsDynamic[Depth]);
        }
        Else
        {
            Call TTStoreNode(CurrentBoardHash)(Depth)(MinMaxResults[Depth])(BestMoves[Depth])(ScoreTypes[Depth])("")(Horizon)("")("")("")("")("")(MinMaxResultsIsDynamic[Depth]);
        }
    }
    Call //("Collect statistics");
    If (MovesIdxBestMove[Depth] > 0)
    {
        If Quiescence
        {
            ProfBestMoveCountQ += 1;
            ProfBestMoveIdxSumQ += MovesIdxBestMove[Depth];
        }
        Else
        {
            ProfBestMoveCount += 1;
            ProfBestMoveIdxSum += MovesIdxBestMove[Depth];
        }
        If (1 == 0)
        {
            If (IsBlockProfilerEnabled == 1)
            {
                If (MovesIdxBestMove[Depth] > (3 - (Quiescence[Depth] * 2)))
                {
                    Call ExportBoardFEN((IsPlayerBlack == 1))(((Depth % 2) == 0));
                    Call Log("Move ordering indication")(Operator.Join(Operator.Join(":", Depth), Operator.Join(":", MovesIdxBestMove[Depth])))(Operator.Join(Operator.Join(":", Board[floor((BestMoves[Depth] / 100))]), Operator.Join(":", BestMoves[Depth])))(Operator.Join(Operator.Join(":", Board[floor((BestMoves[Depth] % 100))]), Operator.Join(":", Quiescence[Depth])))(":")(ExportDataFEN)("")("");
                }
            }
        }
    }
}

Define AlphaBetaMinMaxNextPly(string CurrentDepth)(string MinDepth)(string MaxDepth)(bool CurrentInitialDeepening)(string QuiescenceDepth)(bool CurrentQuiescence)(bool ShowProgress)(string CurrentHorizon)(string Reduction)(bool CurrentCutnode)(string ExcludeNode) (warp=true)
{
    If ((QuiescenceDepth > 0) And ((CurrentHorizon - Reduction) == 1))
    {
        Call //("If on full search and max depth reached, extend or switch to quiescence. If on quiescence search, continue");
        Call AlphaBetaMinMaxImpl((CurrentDepth + 1))(MinDepth)((MaxDepth + 1))(CurrentInitialDeepening)((QuiescenceDepth - 1))((CurrentQuiescence Or (PlyExtension[CurrentDepth] == 0)))(CurrentQuiescence)(ShowProgress)(1)((1 == 1))(ExcludeNode);
    }
    Else
    {
        Call AlphaBetaMinMaxImpl((CurrentDepth + 1))(MinDepth)(((MaxDepth + PlyExtension[CurrentDepth]) - Reduction))(CurrentInitialDeepening)(QuiescenceDepth)(CurrentQuiescence)(CurrentQuiescence)(ShowProgress)((((CurrentHorizon + PlyExtension[CurrentDepth]) - Reduction) - 1))(CurrentCutnode)(ExcludeNode);
    }
}

Define ApplyMove(num Depth) (warp=true)
{
    Call TaperedEval.Init;
    List.ReplaceItem(PosScoreDelta, (Depth + 0), 0);
    List.ReplaceItem(SourcePieces, (Depth + 0), 0);
    List.ReplaceItem(TargetPiecesIdx, (Depth + 0), "");
    List.ReplaceItem(TargetPieces, (Depth + 0), 0);
    List.ReplaceItem(PromotionPieces, (Depth + 0), 0);
    If (Depth == 1)
    {
        List.ReplaceItem(CastlingState, (Depth + 0), Operator.Join(Operator.Join(Operator.Join(HasBlackCastled, HasBlackKingMoved), Operator.Join(HasBlackRookKSMoved, HasBlackRookQSMoved)), Operator.Join(Operator.Join(HasWhiteCastled, HasWhiteKingMoved), Operator.Join(HasWhiteRookKSMoved, HasWhiteRookQSMoved))));
    }
    Else
    {
        List.ReplaceItem(CastlingState, (Depth + 0), CastlingState[(Depth - 1)]);
    }
    List.ReplaceItem(EnPassantTarget, (Depth + 1), "");
    List.ReplaceItem(PreviousBoardHash, (Depth + 0), CurrentBoardHash);
    List.ReplaceItem(PreviousBoardHash2, (Depth + 0), CurrentBoardHash2);
    Call GetCurrentMove(Depth);
    List.ReplaceItem(AppliedMove, (Depth + 0), CurrentMove);
    Call AddToFiftyMoves(((abs(Board[floor((CurrentMove / 100))]) == GoK_BlackPawn) Or (Not ((Board[floor((CurrentMove % 100))] == 0)))));
    SourceIdx = floor((CurrentMove / 100));
    If (SourceIdx > 0)
    {
        TargetIdx = floor((CurrentMove % 100));
        SourcePiece = Board[(SourceIdx + 0)];
        TargetPiece = Board[(TargetIdx + 0)];
        List.ReplaceItem(SourcePieces, (Depth + 0), SourcePiece);
        List.ReplaceItem(TargetPiecesIdx, (Depth + 0), TargetIdx);
        List.ReplaceItem(TargetPieces, (Depth + 0), TargetPiece);
        List.ReplaceItem(PromotionPieces, (Depth + 0), 0);
        List.ReplaceItem(Board, (TargetIdx + 0), SourcePiece);
        List.ReplaceItem(Board, (SourceIdx + 0), 0);
        If (SourcePiece > 0)
        {
            IdxSub = ((PieceIdxLookup[(SourcePiece + 0)] * 10000) + ((SourceIdx * 100) + TargetIdx));
            If ((Not (((SourcePiece == GoK_BlackKing) And ((IsEndgame == 1) And (WhiteQueenCountLocal > 0))))) Or (1 == 1))
            {
                Call TaperedEval.GetScalarResult(MovePosLookupBlackMg[(IdxSub + 0)])(MovePosLookupBlackEg[(IdxSub + 0)])(TaperedEval.ScaleFactor)(TaperedEval.Phase);
                List.ReplaceItem(PosScoreDelta, (Depth + 0), (PosScoreDelta[(Depth + 0)] + TaperedEval.ScalarResult));
            }
            CurrentBoardHash += MoveHashLookupBlack[(IdxSub + 0)];
            If (SourcePiece == GoK_BlackPawn)
            {
                CurrentBoardHash2 += MoveHashLookupBlack[(IdxSub + 0)];
                If (Not ((IdxToFile[(SourceIdx + 0)] == IdxToFile[(TargetIdx + 0)])))
                {
                    If (TargetPieces[(Depth + 0)] == 0)
                    {
                        List.ReplaceItem(TargetPiecesIdx, (Depth + 0), (TargetIdx - 8));
                        List.ReplaceItem(TargetPieces, (Depth + 0), Board[(TargetIdx - 8)]);
                        TargetPiece = Board[(TargetIdx - 8)];
                        List.ReplaceItem(Board, (TargetIdx - 8), 0);
                        If (1 == 0)
                        {
                            Call GetPiecePosHash(Board[(TargetIdx - 8)])((TargetIdx - 8));
                            CurrentBoardHash = (CurrentBoardHash - PiecePosHash);
                            CurrentBoardHash2 = (CurrentBoardHash2 - PiecePosHash);
                        }
                    }
                }
                If ((TargetIdx - SourceIdx) == 16)
                {
                    List.ReplaceItem(EnPassantTarget, (Depth + 1), TargetIdx);
                }
                If (TargetIdx > 56)
                {
                    PromotionVal = Operator.LetterOf(CurrentMove, Variable.Length(CurrentMove));
                    If (PromotionVal == 1)
                    {
                        List.ReplaceItem(PromotionPieces, Depth, GoK_BlackQueen);
                        BlackQueenCountLocal += 1;
                    }
                    If (PromotionVal == 2)
                    {
                        List.ReplaceItem(PromotionPieces, Depth, GoK_BlackRook);
                        BlackRookCountLocal += 1;
                        BlackMinorCountLocal += 1;
                    }
                    If (PromotionVal == 3)
                    {
                        List.ReplaceItem(PromotionPieces, Depth, GoK_BlackBishop);
                        BlackBishopCountLocal += 1;
                        BlackMinorCountLocal += 1;
                    }
                    If (PromotionVal == 4)
                    {
                        List.ReplaceItem(PromotionPieces, Depth, GoK_BlackKnight);
                        BlackMinorCountLocal += 1;
                    }
                    BlackPawnCountLocal += -1;
                    Call GetPiecePosHash(GoK_BlackPawn)(SourceIdx);
                    CurrentBoardHash = (CurrentBoardHash - PiecePosHash);
                    CurrentBoardHash2 = (CurrentBoardHash2 - PiecePosHash);
                    List.ReplaceItem(Board, TargetIdx, PromotionPieces[(Depth + 0)]);
                    Call GetPiecePosHash(PromotionPieces[(Depth + 0)])(TargetIdx);
                    CurrentBoardHash = (CurrentBoardHash + PiecePosHash);
                }
            }
            Else
            {
                If (SourcePiece == GoK_BlackKing)
                {
                    BlackKingIdx = TargetIdx;
                    CurrentBoardHash2 += MoveHashLookupBlack[(IdxSub + 0)];
                    Call SetCastlingStateFlag(Depth)(2)(1);
                }
                If (SourcePiece == GoK_BlackRook)
                {
                    If (Operator.LetterOf(CastlingState[(Depth + 0)], 3) == 0)
                    {
                        If (SourceIdx == VirtualBoard[8])
                        {
                            Call SetCastlingStateFlag(Depth)(3)(1);
                        }
                    }
                    If (Operator.LetterOf(CastlingState[(Depth + 0)], 4) == 0)
                    {
                        If (SourceIdx == VirtualBoard[1])
                        {
                            Call SetCastlingStateFlag(Depth)(4)(1);
                        }
                    }
                }
            }
        }
        Else
        {
            IdxSub = ((PieceIdxLookup[(0 - SourcePiece)] * 10000) + ((SourceIdx * 100) + TargetIdx));
            If ((Not (((SourcePiece == GoK_WhiteKing) And ((IsEndgame == 1) And (BlackQueenCountLocal > 0))))) Or (1 == 1))
            {
                Call TaperedEval.GetScalarResult(MovePosLookupWhiteMg[(IdxSub + 0)])(MovePosLookupWhiteEg[(IdxSub + 0)])(TaperedEval.ScaleFactor)(TaperedEval.Phase);
                List.ReplaceItem(PosScoreDelta, (Depth + 0), (PosScoreDelta[(Depth + 0)] + TaperedEval.ScalarResult));
            }
            CurrentBoardHash += MoveHashLookupWhite[(IdxSub + 0)];
            If (SourcePiece == GoK_WhitePawn)
            {
                CurrentBoardHash2 += MoveHashLookupWhite[(IdxSub + 0)];
                If (Not ((IdxToFile[(SourceIdx + 0)] == IdxToFile[(TargetIdx + 0)])))
                {
                    If (TargetPieces[(Depth + 0)] == 0)
                    {
                        List.ReplaceItem(TargetPiecesIdx, (Depth + 0), (TargetIdx + 8));
                        List.ReplaceItem(TargetPieces, (Depth + 0), Board[(TargetIdx + 8)]);
                        TargetPiece = Board[(TargetIdx + 8)];
                        List.ReplaceItem(Board, (TargetIdx + 8), 0);
                        If (1 == 0)
                        {
                            Call GetPiecePosHash(Board[(TargetIdx + 8)])((TargetIdx + 8));
                            CurrentBoardHash = (CurrentBoardHash - PiecePosHash);
                            CurrentBoardHash2 = (CurrentBoardHash2 - PiecePosHash);
                        }
                    }
                }
                If ((TargetIdx - SourceIdx) == -16)
                {
                    List.ReplaceItem(EnPassantTarget, (Depth + 1), TargetIdx);
                }
                If (TargetIdx < 9)
                {
                    PromotionVal = Operator.LetterOf(CurrentMove, Variable.Length(CurrentMove));
                    If (PromotionVal == 1)
                    {
                        List.ReplaceItem(PromotionPieces, Depth, GoK_WhiteQueen);
                        WhiteQueenCountLocal += 1;
                    }
                    If (PromotionVal == 2)
                    {
                        List.ReplaceItem(PromotionPieces, Depth, GoK_WhiteRook);
                        WhiteRookCountLocal += 1;
                        WhiteMinorCountLocal += 1;
                    }
                    If (PromotionVal == 3)
                    {
                        List.ReplaceItem(PromotionPieces, Depth, GoK_WhiteBishop);
                        WhiteBishopCountLocal += 1;
                        WhiteMinorCountLocal += 1;
                    }
                    If (PromotionVal == 4)
                    {
                        List.ReplaceItem(PromotionPieces, Depth, GoK_WhiteKnight);
                        WhiteMinorCountLocal += 1;
                    }
                    WhitePawnCountLocal += -1;
                    Call GetPiecePosHash(GoK_WhitePawn)(SourceIdx);
                    CurrentBoardHash = (CurrentBoardHash - PiecePosHash);
                    CurrentBoardHash2 = (CurrentBoardHash2 - PiecePosHash);
                    List.ReplaceItem(Board, TargetIdx, PromotionPieces[(Depth + 0)]);
                    Call GetPiecePosHash(PromotionPieces[Depth])(TargetIdx);
                    CurrentBoardHash = (CurrentBoardHash + PiecePosHash);
                }
            }
            Else
            {
                If (SourcePiece == GoK_WhiteKing)
                {
                    WhiteKingIdx = TargetIdx;
                    CurrentBoardHash2 += MoveHashLookupWhite[(IdxSub + 0)];
                    Call SetCastlingStateFlag(Depth)(6)(1);
                }
                If (SourcePiece == GoK_WhiteRook)
                {
                    If (Operator.LetterOf(CastlingState[(Depth + 0)], 7) == 0)
                    {
                        If (SourceIdx == VirtualBoard[64])
                        {
                            Call SetCastlingStateFlag(Depth)(7)(1);
                        }
                    }
                    If (Operator.LetterOf(CastlingState[(Depth + 0)], 8) == 0)
                    {
                        If (SourceIdx == VirtualBoard[57])
                        {
                            Call SetCastlingStateFlag(Depth)(8)(1);
                        }
                    }
                }
            }
        }
        If (TargetPiece > 0)
        {
            IdxSub = ((PieceIdxLookup[(TargetPiece + 0)] * 10000) + (TargetPiecesIdx[(Depth + 0)] * 100));
            Call TaperedEval.GetScalarResult(MovePosLookupBlackMg[(IdxSub + 0)])(MovePosLookupBlackEg[(IdxSub + 0)])(TaperedEval.ScaleFactor)(TaperedEval.Phase);
            List.ReplaceItem(PosScoreDelta, (Depth + 0), (PosScoreDelta[(Depth + 0)] + TaperedEval.ScalarResult));
            CurrentBoardHash += MoveHashLookupBlack[(IdxSub + 0)];
            If ((TargetPiece == GoK_BlackPawn) Or (TargetPiece == GoK_BlackKing))
            {
                CurrentBoardHash2 += MoveHashLookupBlack[(IdxSub + 0)];
            }
            If (TargetPiece == GoK_BlackPawn)
            {
                BlackPawnCountLocal += -1;
            }
            Else
            {
                If (TargetPiece < GoK_BlackQueen)
                {
                    BlackMinorCountLocal += -1;
                    If (TargetPiece == GoK_BlackRook)
                    {
                        BlackRookCountLocal += -1;
                    }
                    If (TargetPiece == GoK_BlackBishop)
                    {
                        BlackBishopCountLocal += -1;
                    }
                }
                Else
                {
                    If (TargetPiece == GoK_BlackQueen)
                    {
                        BlackQueenCountLocal += -1;
                    }
                }
            }
        }
        Else
        {
            If (TargetPiece < 0)
            {
                IdxSub = ((PieceIdxLookup[(0 - TargetPiece)] * 10000) + (TargetPiecesIdx[(Depth + 0)] * 100));
                Call TaperedEval.GetScalarResult(MovePosLookupWhiteMg[(IdxSub + 0)])(MovePosLookupWhiteEg[(IdxSub + 0)])(TaperedEval.ScaleFactor)(TaperedEval.Phase);
                List.ReplaceItem(PosScoreDelta, (Depth + 0), (PosScoreDelta[(Depth + 0)] + TaperedEval.ScalarResult));
                CurrentBoardHash += MoveHashLookupWhite[(IdxSub + 0)];
                If ((TargetPiece == GoK_WhitePawn) Or (TargetPiece == GoK_WhiteKing))
                {
                    CurrentBoardHash2 += MoveHashLookupWhite[(IdxSub + 0)];
                }
                If (TargetPiece == GoK_WhitePawn)
                {
                    WhitePawnCountLocal += -1;
                }
                Else
                {
                    If (TargetPiece > GoK_WhiteQueen)
                    {
                        WhiteMinorCountLocal += -1;
                        If (TargetPiece == GoK_WhiteRook)
                        {
                            WhiteRookCountLocal += -1;
                        }
                        If (TargetPiece == GoK_WhiteBishop)
                        {
                            WhiteBishopCountLocal += -1;
                        }
                    }
                    Else
                    {
                        If (TargetPiece == GoK_WhiteQueen)
                        {
                            WhiteQueenCountLocal += -1;
                        }
                    }
                }
            }
        }
    }
    Else
    {
        If (CurrentMove == GoK_WhiteKingsideCastling)
        {
            List.ReplaceItem(SourcePieces, Depth, GoK_WhiteKing);
            List.ReplaceItem(Board, VirtualBoard[61], 0);
            List.ReplaceItem(Board, VirtualBoard[62], GoK_WhiteRook);
            List.ReplaceItem(Board, VirtualBoard[63], GoK_WhiteKing);
            List.ReplaceItem(Board, VirtualBoard[64], 0);
            WhiteKingIdx = VirtualBoard[63];
            Call UpdateMoveHashPosScore(GoK_WhiteKing)(VirtualBoard[61])(VirtualBoard[63])((1 == 0))(Depth);
            Call UpdateMoveHashPosScore(GoK_WhiteRook)(VirtualBoard[64])(VirtualBoard[62])((1 == 1))(Depth);
            Call SetCastlingStateFlag(Depth)(5)(1);
        }
        Else
        {
            If (CurrentMove == GoK_WhiteQueensideCastling)
            {
                List.ReplaceItem(SourcePieces, Depth, GoK_WhiteKing);
                List.ReplaceItem(Board, VirtualBoard[57], 0);
                List.ReplaceItem(Board, VirtualBoard[59], GoK_WhiteKing);
                List.ReplaceItem(Board, VirtualBoard[60], GoK_WhiteRook);
                List.ReplaceItem(Board, VirtualBoard[61], 0);
                WhiteKingIdx = VirtualBoard[59];
                Call UpdateMoveHashPosScore(GoK_WhiteKing)(VirtualBoard[61])(VirtualBoard[59])((1 == 0))(Depth);
                Call UpdateMoveHashPosScore(GoK_WhiteRook)(VirtualBoard[57])(VirtualBoard[60])((1 == 1))(Depth);
                Call SetCastlingStateFlag(Depth)(5)(1);
            }
            Else
            {
                If (CurrentMove == GoK_BlackKingsideCastling)
                {
                    List.ReplaceItem(SourcePieces, Depth, GoK_BlackKing);
                    List.ReplaceItem(Board, VirtualBoard[5], 0);
                    List.ReplaceItem(Board, VirtualBoard[6], GoK_BlackRook);
                    List.ReplaceItem(Board, VirtualBoard[7], GoK_BlackKing);
                    List.ReplaceItem(Board, VirtualBoard[8], 0);
                    BlackKingIdx = VirtualBoard[7];
                    Call UpdateMoveHashPosScore(GoK_BlackKing)(VirtualBoard[5])(VirtualBoard[7])((1 == 0))(Depth);
                    Call UpdateMoveHashPosScore(GoK_BlackRook)(VirtualBoard[8])(VirtualBoard[6])((1 == 1))(Depth);
                    Call SetCastlingStateFlag(Depth)(1)(1);
                }
                Else
                {
                    If (CurrentMove == GoK_BlackQueensideCastling)
                    {
                        List.ReplaceItem(SourcePieces, Depth, GoK_BlackKing);
                        List.ReplaceItem(Board, VirtualBoard[1], 0);
                        List.ReplaceItem(Board, VirtualBoard[3], GoK_BlackKing);
                        List.ReplaceItem(Board, VirtualBoard[4], GoK_BlackRook);
                        List.ReplaceItem(Board, VirtualBoard[5], 0);
                        BlackKingIdx = VirtualBoard[3];
                        Call UpdateMoveHashPosScore(GoK_BlackKing)(VirtualBoard[5])(VirtualBoard[3])((1 == 0))(Depth);
                        Call UpdateMoveHashPosScore(GoK_BlackRook)(VirtualBoard[1])(VirtualBoard[4])((1 == 1))(Depth);
                        Call SetCastlingStateFlag(Depth)(1)(1);
                    }
                }
            }
        }
    }
    If (Not ((AppliedMove[Depth] == 0)))
    {
        If (Quiescence[Depth] == 0)
        {
            NodeCount += 1;
        }
        Else
        {
            NodeCountQ += 1;
        }
    }
}

Define ApplyMoveLight(string Depth) (warp=true)
{
    List.ReplaceItem(PreviousBoardHash, Depth, CurrentBoardHash);
    Call GetCurrentMove(Depth);
    List.ReplaceItem(AppliedMove, Depth, CurrentMove);
    SourceIdx = floor((CurrentMove / 100));
    If (SourceIdx > 0)
    {
        TargetIdx = floor((CurrentMove % 100));
        SourcePiece = Board[(SourceIdx + 0)];
        TargetPiece = Board[(TargetIdx + 0)];
        List.ReplaceItem(SourcePieces, Depth, SourcePiece);
        List.ReplaceItem(TargetPiecesIdx, Depth, TargetIdx);
        List.ReplaceItem(TargetPieces, Depth, TargetPiece);
        List.ReplaceItem(PromotionPieces, Depth, 0);
        List.ReplaceItem(Board, TargetIdx, SourcePiece);
        List.ReplaceItem(Board, SourceIdx, 0);
        If (SourcePiece > 0)
        {
            CurrentBoardHash += MoveHashLookupBlack[((PieceIdxLookup[(SourcePiece + 0)] * 10000) + ((SourceIdx * 100) + TargetIdx))];
        }
        Else
        {
            CurrentBoardHash += MoveHashLookupWhite[((PieceIdxLookup[(0 - SourcePiece)] * 10000) + ((SourceIdx * 100) + TargetIdx))];
        }
        If (TargetPiece > 0)
        {
            CurrentBoardHash += MoveHashLookupBlack[((PieceIdxLookup[(TargetPiece + 0)] * 10000) + (TargetIdx * 100))];
        }
        Else
        {
            If (TargetPiece < 0)
            {
                CurrentBoardHash += MoveHashLookupWhite[((PieceIdxLookup[(0 - TargetPiece)] * 10000) + (TargetIdx * 100))];
            }
        }
    }
    Else
    {
        List.ReplaceItem(PosScoreDelta, Depth, 0);
        List.ReplaceItem(SourcePieces, Depth, 0);
        List.ReplaceItem(TargetPiecesIdx, Depth, "");
        List.ReplaceItem(TargetPieces, Depth, 0);
        List.ReplaceItem(PromotionPieces, Depth, 0);
        If (CurrentMove == GoK_WhiteKingsideCastling)
        {
            List.ReplaceItem(SourcePieces, Depth, GoK_WhiteKing);
            List.ReplaceItem(Board, VirtualBoard[61], 0);
            List.ReplaceItem(Board, VirtualBoard[62], GoK_WhiteRook);
            List.ReplaceItem(Board, VirtualBoard[63], GoK_WhiteKing);
            List.ReplaceItem(Board, VirtualBoard[64], 0);
            WhiteKingIdx = VirtualBoard[63];
            Call UpdateMoveHashPosScore(GoK_WhiteKing)(VirtualBoard[61])(VirtualBoard[63])((1 == 0))(Depth);
            Call UpdateMoveHashPosScore(GoK_WhiteRook)(VirtualBoard[64])(VirtualBoard[62])((1 == 1))(Depth);
            Call SetCastlingStateFlag(Depth)(5)(1);
        }
        Else
        {
            If (CurrentMove == GoK_WhiteQueensideCastling)
            {
                List.ReplaceItem(SourcePieces, Depth, GoK_WhiteKing);
                List.ReplaceItem(Board, VirtualBoard[57], 0);
                List.ReplaceItem(Board, VirtualBoard[59], GoK_WhiteKing);
                List.ReplaceItem(Board, VirtualBoard[60], GoK_WhiteRook);
                List.ReplaceItem(Board, VirtualBoard[61], 0);
                WhiteKingIdx = VirtualBoard[59];
                Call UpdateMoveHashPosScore(GoK_WhiteKing)(VirtualBoard[61])(VirtualBoard[59])((1 == 0))(Depth);
                Call UpdateMoveHashPosScore(GoK_WhiteRook)(VirtualBoard[57])(VirtualBoard[60])((1 == 1))(Depth);
                Call SetCastlingStateFlag(Depth)(5)(1);
            }
            Else
            {
                If (CurrentMove == GoK_BlackKingsideCastling)
                {
                    List.ReplaceItem(SourcePieces, Depth, GoK_BlackKing);
                    List.ReplaceItem(Board, VirtualBoard[5], 0);
                    List.ReplaceItem(Board, VirtualBoard[6], GoK_BlackRook);
                    List.ReplaceItem(Board, VirtualBoard[7], GoK_BlackKing);
                    List.ReplaceItem(Board, VirtualBoard[8], 0);
                    BlackKingIdx = VirtualBoard[7];
                    Call UpdateMoveHashPosScore(GoK_BlackKing)(VirtualBoard[5])(VirtualBoard[7])((1 == 0))(Depth);
                    Call UpdateMoveHashPosScore(GoK_BlackRook)(VirtualBoard[8])(VirtualBoard[6])((1 == 1))(Depth);
                    Call SetCastlingStateFlag(Depth)(1)(1);
                }
                Else
                {
                    If (CurrentMove == GoK_BlackQueensideCastling)
                    {
                        List.ReplaceItem(SourcePieces, Depth, GoK_BlackKing);
                        List.ReplaceItem(Board, VirtualBoard[1], 0);
                        List.ReplaceItem(Board, VirtualBoard[3], GoK_BlackKing);
                        List.ReplaceItem(Board, VirtualBoard[4], GoK_BlackRook);
                        List.ReplaceItem(Board, VirtualBoard[5], 0);
                        BlackKingIdx = VirtualBoard[3];
                        Call UpdateMoveHashPosScore(GoK_BlackKing)(VirtualBoard[5])(VirtualBoard[3])((1 == 0))(Depth);
                        Call UpdateMoveHashPosScore(GoK_BlackRook)(VirtualBoard[1])(VirtualBoard[4])((1 == 1))(Depth);
                        Call SetCastlingStateFlag(Depth)(1)(1);
                    }
                }
            }
        }
    }
}

Define ASM(string SourceIdx)(string Depth)(bool CapturesOnly)(bool SlidingMoveTypeStraight) (warp=true)
{
    SourcePieceOuter = Board[(SourceIdx + 0)];
    IdxOuter = MoveLookupLineIndexOffset[(SourceIdx + 0)];
    Count1 = 1;
    InvIdxOuter = 8;
    Repeat Until (Count1 > 32)
    {
        If SlidingMoveTypeStraight
        {
            TargetIdxOuter = MoveLookupStraight[(IdxOuter + Count1)];
        }
        Else
        {
            TargetIdxOuter = MoveLookupCross[(IdxOuter + Count1)];
        }
        If (TargetIdxOuter == -1)
        {
            Count1 += InvIdxOuter;
            InvIdxOuter = 8;
        }
        Else
        {
            If (Board[(TargetIdxOuter + 0)] == 0)
            {
                If CapturesOnly
                {
                    Call AddPotentialQuiescenceMove(SourceIdx)(TargetIdxOuter)(SourcePieceOuter)(Depth);
                }
                Else
                {
                    Call AddMoveImpl(SourceIdx)(TargetIdxOuter)(Depth)((1 == 0))(CapturesOnly);
                }
                Count1 += 1;
                InvIdxOuter += -1;
            }
            Else
            {
                If (SourcePieceOuter > 0)
                {
                    If (Board[(TargetIdxOuter + 0)] < 0)
                    {
                        Call AddMoveImpl(SourceIdx)(TargetIdxOuter)(Depth)((1 == 0))(CapturesOnly);
                    }
                }
                Else
                {
                    If (Board[(TargetIdxOuter + 0)] > 0)
                    {
                        Call AddMoveImpl(SourceIdx)(TargetIdxOuter)(Depth)((1 == 0))(CapturesOnly);
                    }
                }
                Count1 += InvIdxOuter;
                InvIdxOuter = 8;
            }
        }
    }
}

Define ASMAttack(string SourceIdx)(string Depth)(bool SlidingMoveTypeStraight) (warp=true)
{
    SourcePieceOuter = Board[(SourceIdx + 0)];
    IdxOuter = MoveLookupLineIndexOffset[(SourceIdx + 0)];
    Count1 = 1;
    InvIdxOuter = 8;
    List.DeleteAll(KingAttackLinesTemp);
    Repeat Until (Count1 > 32)
    {
        If SlidingMoveTypeStraight
        {
            TargetIdxOuter = MoveLookupStraight[(IdxOuter + Count1)];
        }
        Else
        {
            TargetIdxOuter = MoveLookupCross[(IdxOuter + Count1)];
        }
        If (TargetIdxOuter == -1)
        {
            Count1 += InvIdxOuter;
            InvIdxOuter = 8;
            List.DeleteAll(KingAttackLinesTemp);
        }
        Else
        {
            Call AddMoveImpl(SourceIdx)(TargetIdxOuter)(Depth)((1 == 1))((1 == 0));
            TargetPieceOuter = Board[(TargetIdxOuter + 0)];
            If (TargetPieceOuter == 0)
            {
                List.Add(KingAttackLinesTemp, TargetIdxOuter);
                Count1 += 1;
                InvIdxOuter += -1;
            }
            Else
            {
                IsXRay = 0;
                TargetPieceOuterAbs = abs(TargetPieceOuter);
                If (TargetPieceOuterAbs == GoK_BlackKing)
                {
                    If (((SourcePieceOuter > 0) And (TargetPieceOuter == GoK_WhiteKing)) Or ((SourcePieceOuter < 0) And (TargetPieceOuter == GoK_BlackKing)))
                    {
                        Idx = 1;
                        Repeat (List.Length(KingAttackLinesTemp))
                        {
                            List.Add(KingAttackLines, KingAttackLinesTemp[(Idx + 0)]);
                            Idx += 1;
                        }
                    }
                }
                Else
                {
                    If (TargetPieceOuterAbs > GoK_BlackKnight)
                    {
                        If (((SourcePieceOuter > 0) And (TargetPieceOuter > 0)) Or ((SourcePieceOuter < 0) And (TargetPieceOuter < 0)))
                        {
                            If SlidingMoveTypeStraight
                            {
                                If ((TargetPieceOuterAbs == GoK_BlackQueen) Or (TargetPieceOuterAbs == GoK_BlackRook))
                                {
                                    IsXRay = 1;
                                }
                            }
                            Else
                            {
                                If ((TargetPieceOuterAbs == GoK_BlackQueen) Or (TargetPieceOuterAbs == GoK_BlackBishop))
                                {
                                    IsXRay = 1;
                                }
                            }
                        }
                    }
                }
                If (IsXRay == 1)
                {
                    Count1 += 1;
                    InvIdxOuter += -1;
                }
                Else
                {
                    Count1 += InvIdxOuter;
                    InvIdxOuter = 8;
                }
                List.DeleteAll(KingAttackLinesTemp);
            }
        }
    }
}

Define CalcBoardAttackedByMove(string Depth) (warp=true)
{
    Call ClearBoardAttackedByMove(Depth);
    Call GenerateMovesImplWrapper(Depth)((1 == 1))((1 == 0));
}

Define CalcBoardAttackedByMoveChecked(string Depth) (warp=true)
{
    Call TTProbeNode(CurrentBoardHash)((Depth + 1));
    If ((TTProbeRes == 1) And (Not ((TTProbeCheckedRes == ""))))
    {
        If ((Depth % 2) == 1)
        {
            IsWhiteChecked = TTProbeCheckedRes;
        }
        Else
        {
            IsBlackChecked = TTProbeCheckedRes;
        }
        Stop(this script);
    }
    If ((Depth % 2) == 1)
    {
        IsWhiteChecked = 0;
        IdxOuter2 = 1;
        Repeat (64)
        {
            If (Board[(IdxOuter2 + 0)] > 0)
            {
                Call IsCheckingPiece(IdxOuter2);
                If (IsCheckingPieceRes == 1)
                {
                    IsWhiteChecked = 1;
                }
            }
            IdxOuter2 += 1;
        }
        Call TTStoreNode(CurrentBoardHash)((Depth + 1))("")("")("")(IsWhiteChecked)("")("")("")("")("")("")("");
    }
    Else
    {
        IsBlackChecked = 0;
        IdxOuter2 = 1;
        Repeat (64)
        {
            If (Board[(IdxOuter2 + 0)] < 0)
            {
                Call IsCheckingPiece(IdxOuter2);
                If (IsCheckingPieceRes == 1)
                {
                    IsBlackChecked = 1;
                }
            }
            IdxOuter2 += 1;
        }
        Call TTStoreNode(CurrentBoardHash)((Depth + 1))("")("")("")(IsBlackChecked)("")("")("")("")("")("")("");
    }
}

Define CalcBoardAttackedOnDemand(string Depth)(bool Quiescence)(bool ForceOnCheck)(string MaxDepth) (warp=true)
{
    If (BoardAttackedCalculated[Depth] == 0)
    {
        If ((ForceOnCheck And (CheckedState[Depth] == 1)) Or ((Not ((Depth > MaxDepth))) And (Not (Quiescence))))
        {
            Call CalcBoardAttackedByMove((Depth + 1));
            Call StoreAttackInfo((Depth + 1))(Depth);
            List.ReplaceItem(BoardAttackedCalculated, Depth, 1);
        }
    }
}

Define CalcBoardStats (warp=true)
{
    BlackKingIdx = "";
    WhiteKingIdx = "";
    CurrentBoardHash = 0;
    CurrentBoardHash2 = 0;
    Idx = 1;
    Repeat (8)
    {
        List.ReplaceItem(BlackPawnCount, Idx, 0);
        List.ReplaceItem(WhitePawnCount, Idx, 0);
        Idx += 1;
    }
    Idx = 1;
    Repeat (64)
    {
        If (Board[Idx] == GoK_WhitePawn)
        {
            List.ReplaceItem(WhitePawnCount, IdxToFile[Idx], (WhitePawnCount[IdxToFile[Idx]] + 1));
        }
        Else
        {
            If (Board[Idx] == GoK_BlackPawn)
            {
                List.ReplaceItem(BlackPawnCount, IdxToFile[Idx], (BlackPawnCount[IdxToFile[Idx]] + 1));
            }
            Else
            {
                If (Board[Idx] == GoK_WhiteKing)
                {
                    WhiteKingIdx = Idx;
                }
                Else
                {
                    If (Board[Idx] == GoK_BlackKing)
                    {
                        BlackKingIdx = Idx;
                    }
                }
            }
        }
        Call GetPiecePosHash(Board[Idx])(Idx);
        CurrentBoardHash = (CurrentBoardHash + PiecePosHash);
        If ((abs(Board[Idx]) == GoK_BlackPawn) Or (abs(Board[Idx]) == GoK_BlackKing))
        {
            CurrentBoardHash2 = (CurrentBoardHash2 + PiecePosHash);
        }
        Idx += 1;
    }
    BlackMinorCount = 0;
    BlackQueenCount = 0;
    BlackPawnCount = 0;
    BlackRookCount = 0;
    BlackBishopCount = 0;
    WhiteQueenCount = 0;
    WhiteMinorCount = 0;
    WhitePawnCount = 0;
    WhiteRookCount = 0;
    WhiteBishopCount = 0;
    Idx = 1;
    Repeat (64)
    {
        If (Board[Idx] == GoK_WhiteQueen)
        {
            WhiteQueenCount += 1;
        }
        If (Board[Idx] == GoK_BlackQueen)
        {
            BlackQueenCount += 1;
        }
        If ((Board[Idx] == GoK_WhiteKnight) Or ((Board[Idx] == GoK_WhiteBishop) Or (Board[Idx] == GoK_WhiteRook)))
        {
            WhiteMinorCount += 1;
            If (Board[Idx] == GoK_WhiteRook)
            {
                WhiteRookCount += 1;
            }
            If (Board[Idx] == GoK_WhiteBishop)
            {
                WhiteBishopCount += 1;
            }
        }
        If ((Board[Idx] == GoK_BlackKnight) Or ((Board[Idx] == GoK_BlackBishop) Or (Board[Idx] == GoK_BlackRook)))
        {
            BlackMinorCount += 1;
            If (Board[Idx] == GoK_BlackRook)
            {
                BlackRookCount += 1;
            }
            If (Board[Idx] == GoK_BlackBishop)
            {
                BlackBishopCount += 1;
            }
        }
        If (Board[Idx] == GoK_WhitePawn)
        {
            WhitePawnCount += 1;
        }
        If (Board[Idx] == GoK_BlackPawn)
        {
            BlackPawnCount += 1;
        }
        Idx += 1;
    }
    If ((((WhiteQueenCount + WhiteMinorCount) + (BlackQueenCount + BlackMinorCount)) < 3) And ((WhiteQueenCount == 0) Or (BlackQueenCount == 0)))
    {
        IsEndgame2 = 1;
        IsEndgame = 1;
    }
    Else
    {
        IsEndgame2 = 0;
        IsEndgame = 0;
        Call GetAttackForce((1 == 0));
        If (AttackForce < 12)
        {
            IsEndgame = 1;
        }
        Call GetAttackForce((1 == 1));
        If (AttackForce < 12)
        {
            IsEndgame = 1;
        }
    }
    If ((HasBlackCastled == 0) And ((HasBlackKingMoved == 0) And ((HasBlackRookKSMoved == 0) Or (HasBlackRookQSMoved == 0))))
    {
        IsBlackCastlingPossible = 1;
    }
    Else
    {
        IsBlackCastlingPossible = 0;
    }
    If ((HasWhiteCastled == 0) And ((HasWhiteKingMoved == 0) And ((HasWhiteRookKSMoved == 0) Or (HasWhiteRookQSMoved == 0))))
    {
        IsWhiteCastlingPossible = 1;
    }
    Else
    {
        IsWhiteCastlingPossible = 0;
    }
    WhiteQueenCountLocal = WhiteQueenCount;
    WhiteMinorCountLocal = WhiteMinorCount;
    BlackQueenCountLocal = BlackQueenCount;
    BlackMinorCountLocal = BlackMinorCount;
    WhiteRookCountLocal = WhiteRookCount;
    BlackRookCountLocal = BlackRookCount;
    WhitePawnCountLocal = WhitePawnCount;
    BlackPawnCountLocal = BlackPawnCount;
    WhiteBishopCountLocal = WhiteBishopCount;
    BlackBishopCountLocal = BlackBishopCount;
    List.ReplaceItem(CastlingState, 1, Operator.Join(Operator.Join(Operator.Join(HasBlackCastled, HasBlackKingMoved), Operator.Join(HasBlackRookKSMoved, HasBlackRookQSMoved)), Operator.Join(Operator.Join(HasWhiteCastled, HasWhiteKingMoved), Operator.Join(HasWhiteRookKSMoved, HasWhiteRookQSMoved))));
    List.ReplaceItem(CastlingState, 2, CastlingState[1]);
}

Define CalculateMaterialImbalance(string Depth) (warp=true)
{
    MaterialImbalanceRes = 0;
    List.DeleteAll(TmpList1);
    List.DeleteAll(TmpList2);
    If (BlackBishopCountLocal == 2)
    {
        List.Add(TmpList1, 1);
    }
    Else
    {
        List.Add(TmpList1, 0);
    }
    List.Add(TmpList1, BlackPawnCountLocal);
    List.Add(TmpList1, (BlackMinorCountLocal - (BlackRookCountLocal + BlackBishopCountLocal)));
    List.Add(TmpList1, BlackBishopCountLocal);
    List.Add(TmpList1, BlackRookCountLocal);
    List.Add(TmpList1, BlackQueenCountLocal);
    If (WhiteBishopCountLocal == 2)
    {
        List.Add(TmpList2, 1);
    }
    Else
    {
        List.Add(TmpList2, 0);
    }
    List.Add(TmpList2, WhitePawnCountLocal);
    List.Add(TmpList2, (WhiteMinorCountLocal - (WhiteRookCountLocal + WhiteBishopCountLocal)));
    List.Add(TmpList2, WhiteBishopCountLocal);
    List.Add(TmpList2, WhiteRookCountLocal);
    List.Add(TmpList2, WhiteQueenCountLocal);
    Idx = 1;
    Repeat (6)
    {
        CurrentValue = 0;
        If ((((Depth % 2) == 1) And (TmpList1[Idx] > 0)) Or (((Depth % 2) == 0) And (TmpList2[Idx] > 0)))
        {
            IdxSub = 1;
            Repeat Until (IdxSub > Idx)
            {
                If ((Depth % 2) == 1)
                {
                    CurrentValue += ((ImbalanceSameSide[(((Idx - 1) * 6) + IdxSub)] * TmpList1[IdxSub]) + (ImbalanceOppSide[(((Idx - 1) * 6) + IdxSub)] * TmpList2[IdxSub]));
                }
                Else
                {
                    CurrentValue += ((ImbalanceSameSide[(((Idx - 1) * 6) + IdxSub)] * TmpList2[IdxSub]) + (ImbalanceOppSide[(((Idx - 1) * 6) + IdxSub)] * TmpList1[IdxSub]));
                }
                IdxSub += 1;
            }
            If ((Depth % 2) == 1)
            {
                MaterialImbalanceRes += (TmpList1[Idx] * CurrentValue);
            }
            Else
            {
                MaterialImbalanceRes += (TmpList2[Idx] * CurrentValue);
            }
        }
        Idx += 1;
    }
}

Define ClearBoardAttackedByMove(num Depth) (warp=true)
{
    If ((Depth % 2) == 1)
    {
        List.DeleteAll(BoardAttackedByBlack);
        List.DeleteAll(BoardAttackedByBlackPiece);
        Repeat (64)
        {
            List.Add(BoardAttackedByBlack, 0);
            List.Add(BoardAttackedByBlackPiece, 0);
        }
        IsWhiteChecked = 0;
    }
    Else
    {
        List.DeleteAll(BoardAttackedByWhite);
        List.DeleteAll(BoardAttackedByWhitePiece);
        Repeat (64)
        {
            List.Add(BoardAttackedByWhite, 0);
            List.Add(BoardAttackedByWhitePiece, 0);
        }
        IsBlackChecked = 0;
    }
    List.DeleteAll(KingAttackLines);
}

Define ClearMoveList(num Depth) (warp=true)
{
    List.ReplaceItem(MovesCount, Depth, 0);
    If (Depth == 1)
    {
        List.DeleteAll(Moves1);
    }
    Else
    {
        If (Depth == 2)
        {
            List.DeleteAll(Moves2);
        }
    }
}

Define ClearTT (warp=true)
{
    If (IsScratch3 == 1)
    {
        Call ClearTTImpl(100000);
    }
    Else
    {
        Call ClearTTImpl(1000000);
    }
}

Define ClearTTImpl(string Size) (warp=true)
{
    List.DeleteItem(TTNodeHash, all);
    List.DeleteItem(TTNodeBestMove, all);
    List.DeleteItem(TTNodeScore, all);
    List.DeleteItem(TTNodeDepth, all);
    List.DeleteItem(TTNodeAge, all);
    List.DeleteItem(TTNodeIsDynamic, all);
    List.DeleteItem(TTNodeType, all);
    List.DeleteItem(TTNodeChecked, all);
    List.DeleteItem(TTNodeHorizon, all);
    List.DeleteItem(TTNodeBoardAttackedByOpp, all);
    List.DeleteItem(TTNodeBoardAttackedByOppPiece, all);
    List.DeleteItem(TTNodeCheckedAttackLines, all);
    List.DeleteItem(TTBoardAge, all);
    List.DeleteItem(TTBoardHash, all);
    List.DeleteItem(TTBoardScore1, all);
    List.DeleteItem(TTBoardScore2, all);
    List.DeleteItem(TTBoardScore3, all);
    List.DeleteItem(TTBoardScoreSum, all);
    Repeat (Size)
    {
        List.Add(TTNodeHash, 0);
        List.Add(TTNodeAge, 0);
        List.Add(TTNodeIsDynamic, "");
        List.Add(TTNodeBestMove, "");
        List.Add(TTNodeScore, "");
        List.Add(TTNodeDepth, "");
        List.Add(TTNodeType, "");
        List.Add(TTNodeChecked, "");
        List.Add(TTNodeHorizon, "");
        List.Add(TTNodeBoardAttackedByOpp, "");
        List.Add(TTNodeBoardAttackedByOppPiece, "");
        List.Add(TTNodeCheckedAttackLines, "");
        List.Add(TTBoardAge, 0);
        List.Add(TTBoardHash, 0);
        List.Add(TTBoardScore1, "");
        List.Add(TTBoardScore2, "");
        List.Add(TTBoardScore3, "");
        List.Add(TTBoardScoreSum, "");
    }
}

Define CreateCurrentBoardHash (warp=true)
{
    CurrentBoardHash = 0;
    CurrentBoardHash2 = 0;
    Idx = 1;
    Repeat (64)
    {
        Call GetPiecePosHash(Board[Idx])(Idx);
        CurrentBoardHash = (CurrentBoardHash + PiecePosHash);
        If ((abs(Board[Idx]) == GoK_BlackPawn) Or (abs(Board[Idx]) == GoK_BlackKing))
        {
            CurrentBoardHash2 = (CurrentBoardHash2 + PiecePosHash);
        }
        Idx += 1;
    }
}

Define DrawBoardAndWait (warp=false)
{
    List.DeleteAll(GoK_Board);
    List.DeleteAll(GoK_VirtualBoard);
    Idx = 1;
    Repeat (64)
    {
        List.Add(GoK_Board, Board[Idx]);
        List.Add(GoK_VirtualBoard, VirtualBoard[Idx]);
        Idx += 1;
    }
    GoK_ProgressValue = 0;
    Event.BroadcastAndWait("drawboard");
    Event.BroadcastAndWait("progressvaluechanged");
    Event.BroadcastAndWait("evaluationvaluechanged");
}

Define EnterExecution (warp=false)
{
    ExecutionDepth += 1;
    If (ExecutionDepth == 1)
    {
        IsExecutionRunning = 1;
        Event.BroadcastAndWait("calcmode");
    }
}

Define Evaluate(string Depth)(bool FullEval) (warp=true)
{
    EvaluateRes = "";
    EvaluateResIsDynamic = 0;
    If (Depth == 0)
    {
        Call EvaluateBoard;
        EvalResultBase = Eval;
        Stop(this script);
    }
    If (IsBlockProfilerEnabled == 1)
    {
        Call Profile_MethodEnter(Depth);
    }
    Call //("Incremental Evaluation");
    If (Depth == 1)
    {
        List.ReplaceItem(PosScoreDeltaSum, Depth, PosScoreDelta[Depth]);
        List.ReplaceItem(CapturesDeltaSum, Depth, TargetPieces[Depth]);
        Call PrepareEvalPiecesData(Depth);
        Call EvaluatePawns(Depth);
        List.ReplaceItem(EvalExtended1, Depth, EvalPawnsResult);
        Call EvaluateMajorsMinors(Depth);
        List.ReplaceItem(EvalExtended2, Depth, EvalMajorsMinorsResult);
        Call EvaluateThreats(Depth);
        List.ReplaceItem(EvalExtended3, Depth, EvalThreatsResult);
    }
    Else
    {
        List.ReplaceItem(PosScoreDeltaSum, Depth, (PosScoreDeltaSum[(Depth - 1)] + PosScoreDelta[Depth]));
        List.ReplaceItem(CapturesDeltaSum, Depth, (CapturesDeltaSum[(Depth - 1)] + TargetPieces[Depth]));
        List.ReplaceItem(EvalExtended1, Depth, EvalExtended1[(Depth - 1)]);
        List.ReplaceItem(EvalExtended2, Depth, EvalExtended2[(Depth - 1)]);
        List.ReplaceItem(EvalExtended3, Depth, EvalExtended3[(Depth - 1)]);
    }
    If (Not ((PromotionPieces[Depth] == 0)))
    {
        List.ReplaceItem(CapturesDeltaSum, Depth, ((CapturesDeltaSum[Depth] - PromotionPieces[Depth]) + SourcePieces[Depth]));
    }
    If FullEval
    {
        Call TTProbeBoard(CurrentBoardHash)(Depth);
        If ((TTProbeRes == 1) And (Not ((TTProbeBoardScoreSumRes == ""))))
        {
            EvaluateRes = TTProbeBoardScoreSumRes;
            If (IsBlockProfilerEnabled == 1)
            {
                Call Profile_MethodExit(Depth);
            }
            Stop(this script);
        }
        Call PrepareEvalPiecesData(Depth);
        Call EvaluatePawns(Depth);
        List.ReplaceItem(EvalExtended1, Depth, EvalPawnsResult);
        Call EvaluateMajorsMinors(Depth);
        List.ReplaceItem(EvalExtended2, Depth, EvalMajorsMinorsResult);
        Call EvaluateThreats(Depth);
        List.ReplaceItem(EvalExtended3, Depth, EvalThreatsResult);
        EvaluateRes = ((EvalResultBase + ((EvalExtended1[Depth] + EvalExtended2[Depth]) + EvalExtended3[Depth])) + (PosScoreDeltaSum[Depth] - CapturesDeltaSum[Depth]));
        Call //("Tempo");
        If ((Depth % 2) == 1)
        {
            EvaluateRes += -11;
        }
        Else
        {
            EvaluateRes += 11;
        }
        EvaluateResIsDynamic = 0;
        If (1 == 1)
        {
            Call CalculateMaterialImbalance(1);
            CountOuter1 = MaterialImbalanceRes;
            Call CalculateMaterialImbalance(2);
            CountOuter2 = MaterialImbalanceRes;
            EvaluateRes += Operator.Round(((CountOuter1 - CountOuter2) / 1));
        }
        Call TTStoreBoard(CurrentBoardHash)(Depth)("")("")("")(EvaluateRes);
    }
    If (IsBlockProfilerEnabled == 1)
    {
        Call Profile_MethodExit(Depth);
    }
}

Define EvaluateBoard (warp=true)
{
    Call TaperedEval.Init;
    Eval = 0;
    Idx = 1;
    Repeat (64)
    {
        CurrentPiece = Board[Idx];
        If (Not ((CurrentPiece == 0)))
        {
            Eval += CurrentPiece;
            Call TaperedEval.GetPiecePosResult(CurrentPiece)(Idx);
            Eval += TaperedEval.PiecePosResult;
        }
        Idx += 1;
    }
}

Define EvaluateMajorsMinors(string Depth) (warp=true)
{
    If (1 == 1)
    {
        Call TTProbeBoard(CurrentBoardHash)(Depth);
        If ((TTProbeRes == 1) And (Not ((TTProbeBoardScore2Res == ""))))
        {
            EvalMajorsMinorsResult = TTProbeBoardScore2Res;
            Stop(this script);
        }
    }
    Call //("Tapered evaluation, interpolating between midgame and game");
    Call EvaluateMajorsMinorsImpl(Depth);
    Call TTStoreBoard(CurrentBoardHash)(Depth)("")(EvalMajorsMinorsResult)("")("");
}

Define EvaluateMajorsMinorsImpl(string Depth) (warp=true)
{
    EvalMajorsMinorsResult = 0;
    If (((WhiteQueenCountLocal + WhiteMinorCountLocal) + (BlackQueenCountLocal + BlackMinorCountLocal)) == 0)
    {
        Stop(this script);
    }
    Call TaperedEval.Init;
    EvalPieceIdx = 1;
    Repeat (List.Length(EvalPiecesIdx_NonPawns))
    {
        Idx = EvalPiecesIdx_NonPawns[(EvalPieceIdx + 0)];
        CurrentPiece = Board[(Idx + 0)];
        Factor = (((CurrentPiece > 0) * 2) - 1);
        CurrentPieceAbs = abs(CurrentPiece);
        If (CurrentPiece > 0)
        {
            Attacked = BoardAttackedByWhite[(Idx + 0)];
            AttackerIdx = BoardAttackedByWhitePiece[(Idx + 0)];
            Defended = BoardAttackedByBlack[(Idx + 0)];
            DefenderIdx = BoardAttackedByBlackPiece[(Idx + 0)];
            KingIdx = BlackKingIdx;
        }
        Else
        {
            Attacked = BoardAttackedByBlack[(Idx + 0)];
            AttackerIdx = BoardAttackedByBlackPiece[(Idx + 0)];
            Defended = BoardAttackedByWhite[(Idx + 0)];
            DefenderIdx = BoardAttackedByWhitePiece[(Idx + 0)];
            KingIdx = WhiteKingIdx;
        }
        AttackerPieceAbs = abs(Board[(AttackerIdx + 0)]);
        DefenderPieceAbs = abs(Board[(DefenderIdx + 0)]);
        If (Not ((CurrentPieceAbs == GoK_BlackKing)))
        {
            IdxSub = ((PieceMobility[(Idx + 0)] * 2) + 1);
            If (CurrentPieceAbs == GoK_BlackRook)
            {
                Call TaperedEval.Add((RookMobilityBonus[(IdxSub + 0)] * Factor))((RookMobilityBonus[(IdxSub + 1)] * Factor));
            }
            Else
            {
                If (CurrentPieceAbs == GoK_BlackBishop)
                {
                    Call TaperedEval.Add((BishopMobilityBonus[(IdxSub + 0)] * Factor))((BishopMobilityBonus[(IdxSub + 1)] * Factor));
                }
                Else
                {
                    If (CurrentPieceAbs == GoK_BlackKnight)
                    {
                        Call TaperedEval.Add((KnightMobilityBonus[(IdxSub + 0)] * Factor))((KnightMobilityBonus[(IdxSub + 1)] * Factor));
                    }
                    Else
                    {
                        If (CurrentPieceAbs == GoK_BlackQueen)
                        {
                            Call TaperedEval.Add((QueenMobilityBonus[(IdxSub + 0)] * Factor))((QueenMobilityBonus[(IdxSub + 1)] * Factor));
                        }
                    }
                }
            }
        }
        If ((CurrentPieceAbs == GoK_BlackKnight) Or (CurrentPieceAbs == GoK_BlackBishop))
        {
            Rank = IdxToRank[(Idx + 0)];
            If ((Rank > (2 + (CurrentPiece > 0))) And (Rank < (6 + (CurrentPiece > 0))))
            {
                If ((Defended > 0) And (DefenderPieceAbs == GoK_BlackPawn))
                {
                    If ((Attacked == 0) Or (AttackerPieceAbs > GoK_BlackPawn))
                    {
                        Call //("Outposts");
                        If (CurrentPieceAbs == GoK_BlackKnight)
                        {
                            Call TaperedEval.Add((34 * Factor))((11 * Factor));
                        }
                        Else
                        {
                            Call TaperedEval.Add((17 * Factor))((6 * Factor));
                        }
                    }
                }
            }
            If (Board[(Idx - (8 * Factor))] == (GoK_BlackPawn * Factor))
            {
                Call TaperedEval.Add((8 * Factor))((1 * Factor));
            }
            Delta = ChebyshevDistance[((Idx * 100) + KingIdx)];
            Call TaperedEval.Add(((-3 * Delta) * Factor))(((-4 * Delta) * Factor));
            If (CurrentPieceAbs == GoK_BlackBishop)
            {
                CurrentValue = 0;
                EvalPieceIdx2 = 1;
                Repeat (List.Length(EvalPiecesIdx_Pawns))
                {
                    IdxSub = EvalPiecesIdx_Pawns[(EvalPieceIdx2 + 0)];
                    If (((IdxToFile[(Idx + 0)] + IdxToRank[(Idx + 0)]) % 2) == ((IdxToFile[(IdxSub + 0)] + IdxToRank[(IdxSub + 0)]) % 2))
                    {
                        If (((CurrentPiece > 0) And (Board[(IdxSub + 0)] > 0)) Or ((CurrentPiece < 0) And (Board[(IdxSub + 0)] < 0)))
                        {
                            CurrentValue += (1 + ((IdxToFile[(IdxSub + 0)] == 4) Or (IdxToFile[(IdxSub + 0)] == 5)));
                        }
                    }
                    EvalPieceIdx2 += 1;
                }
                Call TaperedEval.Add((-1 * (CurrentValue * Factor)))((-3 * (CurrentValue * Factor)));
                If ((Idx % 2) == 1)
                {
                    Call IsReachableSlider(Idx)(28);
                    If (IsReachableRes == 1)
                    {
                        Call IsReachableSlider(Idx)(37);
                        If (IsReachableRes == 1)
                        {
                            Call TaperedEval.Add((21 * Factor))(0);
                        }
                    }
                }
                Else
                {
                    Call IsReachableSlider(Idx)(29);
                    If (IsReachableRes == 1)
                    {
                        Call IsReachableSlider(Idx)(36);
                        If (IsReachableRes == 1)
                        {
                            Call TaperedEval.Add((21 * Factor))(0);
                        }
                    }
                }
            }
            If (1 == 0)
            {
                If (PieceMobility[(Idx + 0)] == 0)
                {
                    If (CurrentPiece > 0)
                    {
                        If ((Rank > 6) And (Not ((BoardAttackedByBlack[(Idx + 0)] > BoardAttackedByWhite[(Idx + 0)]))))
                        {
                            Call TaperedEval.AddIdentical(-250);
                        }
                    }
                    Else
                    {
                        If ((Rank < 3) And (Not ((BoardAttackedByWhite[(Idx + 0)] > BoardAttackedByBlack[(Idx + 0)]))))
                        {
                            Call TaperedEval.AddIdentical(250);
                        }
                    }
                }
            }
        }
        EvalPieceIdx += 1;
    }
    EvalPieceIdx = 1;
    Repeat (List.Length(EvalPiecesIdx_Rooks))
    {
        IdxOuter = EvalPiecesIdx_Rooks[(EvalPieceIdx + 0)];
        SourcePieceOuter = Board[(IdxOuter + 0)];
        Factor = (((SourcePieceOuter > 0) * 2) - 1);
        File = IdxToFile[(IdxOuter + 0)];
        If (SourcePieceOuter > 0)
        {
            Count1 = BlackPawnCount[(File + 0)];
            Count2 = WhitePawnCount[(File + 0)];
        }
        Else
        {
            Count1 = WhitePawnCount[(File + 0)];
            Count2 = BlackPawnCount[(File + 0)];
        }
        If (Count1 == 0)
        {
            If (Count2 == 0)
            {
                Call TaperedEval.Add((16 * Factor))((12 * Factor));
            }
            Else
            {
                Call TaperedEval.Add((8 * Factor))((6 * Factor));
            }
        }
        If (PieceMobility[(IdxOuter + 0)] < 4)
        {
            If (SourcePieceOuter > 0)
            {
                KingIdx = BlackKingIdx;
            }
            Else
            {
                KingIdx = WhiteKingIdx;
            }
            If ((IdxToFile[(IdxOuter + 0)] < 4) == (IdxToFile[(IdxOuter + 0)] < IdxToFile[(KingIdx + 0)]))
            {
                If (SourcePieceOuter > 0)
                {
                    If ((IdxToRank[(IdxOuter + 0)] < 3) And (IdxToRank[(KingIdx + 0)] < 3))
                    {
                        Call TaperedEval.AddIdentical(-35);
                    }
                }
                Else
                {
                    If ((IdxToRank[(IdxOuter + 0)] > 6) And (IdxToRank[(KingIdx + 0)] > 6))
                    {
                        Call TaperedEval.AddIdentical(35);
                    }
                }
            }
        }
        EvalPieceIdx += 1;
    }
    If (Not ((Board[VirtualBoard[4]] == GoK_BlackQueen)))
    {
        Count1 = 0;
        Count1 += ((Board[VirtualBoard[2]] == GoK_BlackKnight) + (Board[VirtualBoard[3]] == GoK_BlackBishop));
        Count1 += ((Board[VirtualBoard[6]] == GoK_BlackBishop) + (Board[VirtualBoard[7]] == GoK_BlackKnight));
        Count1 += ((Board[VirtualBoard[12]] == GoK_BlackPawn) + (Board[VirtualBoard[13]] == GoK_BlackPawn));
        Call TaperedEval.Add((-3 * Count1))(0);
    }
    If (Not ((Board[VirtualBoard[60]] == GoK_WhiteQueen)))
    {
        Count1 = 0;
        Count1 += ((Board[VirtualBoard[63]] == GoK_WhiteKnight) + (Board[VirtualBoard[62]] == GoK_WhiteBishop));
        Count1 += ((Board[VirtualBoard[59]] == GoK_WhiteBishop) + (Board[VirtualBoard[58]] == GoK_WhiteKnight));
        Count1 += ((Board[VirtualBoard[53]] == GoK_WhitePawn) + (Board[VirtualBoard[52]] == GoK_WhitePawn));
        Call TaperedEval.Add((3 * Count1))(0);
    }
    Call //("Evaluate early castling > enabled castling > possible castling > impossible castling");
    CurrentValue = CastlingState[Depth];
    Side = 1;
    Repeat (2)
    {
        Factor = (((Side == 1) * 2) - 1);
        Idx = ((Side - 1) * 4);
        If (Operator.LetterOf(CurrentValue, (Idx + 1)) == 1)
        {
            If (1 == 1)
            {
                Call TaperedEval.Add((15 * Factor))((10 * Factor));
            }
        }
        Else
        {
            If ((Operator.LetterOf(CurrentValue, (Idx + 2)) == 1) Or ((Operator.LetterOf(CurrentValue, (Idx + 3)) == 1) And (Operator.LetterOf(CurrentValue, (Idx + 4)) == 1)))
            {
                Call TaperedEval.Add((-45 * Factor))((-25 * Factor));
            }
        }
        Side += 1;
    }
    If (1 == 1)
    {
        If (BlackBishopCountLocal > 1)
        {
            Call TaperedEval.Add(20)(55);
        }
        If (WhiteBishopCountLocal > 1)
        {
            Call TaperedEval.Add(-20)(-55);
        }
    }
    Count1 = ((BlackQueenCountLocal * 9) + ((BlackRookCountLocal * 5) + ((BlackMinorCountLocal - BlackRookCountLocal) * 3)));
    Count2 = ((WhiteQueenCountLocal * 9) + ((WhiteRookCountLocal * 5) + ((WhiteMinorCountLocal - WhiteRookCountLocal) * 3)));
    If ((Count1 + Count2) > 42)
    {
        BlockedCount = 0;
        Idx = 9;
        Repeat (48)
        {
            CurrentPiece = Board[(Idx + 0)];
            If (abs(CurrentPiece) == GoK_BlackPawn)
            {
                Factor = (((CurrentPiece > 0) * 2) - 1);
                If (Board[(Idx + (8 * Factor))] == (GoK_WhitePawn * Factor))
                {
                    BlockedCount += 1;
                }
                Else
                {
                    File = IdxToFile[(Idx + 0)];
                    If ((File > 1) And (File < 8))
                    {
                        If (Board[(Idx + (15 * Factor))] == (GoK_WhitePawn * Factor))
                        {
                            If (Board[(Idx + (17 * Factor))] == (GoK_WhitePawn * Factor))
                            {
                                BlockedCount += 1;
                            }
                        }
                    }
                }
            }
            Idx += 1;
        }
        Side = 1;
        Repeat (2)
        {
            SpaceBonus = 0;
            Factor = (((Side == 1) * 2) - 1);
            If (Side == 1)
            {
                Rank = 2;
            }
            Else
            {
                Rank = 5;
            }
            Repeat (3)
            {
                File = 3;
                Repeat (4)
                {
                    Idx = (((Rank - 1) * 8) + File);
                    If (Not ((Board[(Idx + 0)] == (GoK_BlackPawn * Factor))))
                    {
                        If (Side == 1)
                        {
                            Attacked = (abs(Board[(BoardAttackedByWhitePiece[(Idx + 0)] + 0)]) == GoK_BlackPawn);
                        }
                        Else
                        {
                            Attacked = (abs(Board[(BoardAttackedByBlackPiece[(Idx + 0)] + 0)]) == GoK_BlackPawn);
                        }
                        If (Attacked == 0)
                        {
                            SpaceBonus += 1;
                            If (Side == 1)
                            {
                                Attacked = (BoardAttackedByWhite[(Idx + 0)] > 0);
                            }
                            Else
                            {
                                Attacked = (BoardAttackedByBlack[(Idx + 0)] > 0);
                            }
                            If (Attacked == 0)
                            {
                                If ((Board[(Idx + (8 * Factor))] == (GoK_BlackPawn * Factor)) Or ((Board[(Idx + (16 * Factor))] == (GoK_BlackPawn * Factor)) Or (Board[(Idx + (24 * Factor))] == (GoK_BlackPawn * Factor))))
                                {
                                    SpaceBonus += 1;
                                }
                            }
                        }
                    }
                    File += 1;
                }
                Rank += 1;
            }
            If (Side == 1)
            {
                Weight = ((BlackMinorCountLocal + (BlackQueenCountLocal + BlackPawnCountLocal)) - 2);
            }
            Else
            {
                Weight = ((WhiteMinorCountLocal + (WhiteQueenCountLocal + WhitePawnCountLocal)) - 2);
            }
            If (BlockedCount > 9)
            {
                Weight += 9;
            }
            Else
            {
                Weight += BlockedCount;
            }
            CurrentValue = floor((((SpaceBonus * (Weight * Weight)) / 32) * (((Count1 + Count2) - 42) / (62 - 42))));
            Call TaperedEval.Add((CurrentValue * Factor))(0);
            Side += 1;
        }
    }
    Call TaperedEval.GetSumResult;
    EvalMajorsMinorsResult = TaperedEval.SumResult;
}

Define EvaluatePawns(string Depth) (warp=true)
{
    EvalPawnsResult = 0;
    Call //("Positional evaluation: king and pawn structure");
    TTHash = (BlackQueenCountLocal > 0);
    TTHash = ((TTHash * 31) + (WhiteQueenCountLocal > 0));
    TTHash = ((TTHash * 31) + CurrentBoardHash2);
    Call TTProbeBoard(TTHash)(Depth);
    If ((TTProbeRes == 1) And (Not ((TTProbeBoardScore1Res == ""))))
    {
        EvalPawnsResult = TTProbeBoardScore1Res;
        Stop(this script);
    }
    Call EvaluatePawnsImpl(Depth);
    Call TTStoreBoard(TTHash)(Depth)(EvalPawnsResult)("")("")("");
}

Define EvaluatePawnsImpl(string Depth) (warp=true)
{
    EvalPawnsResult = 0;
    Call TaperedEval.Init;
    If (1 == 1)
    {
        Call TaperedEval.Add(0)((30 * BlackPawnCountLocal));
        Call TaperedEval.Add(0)((-30 * WhitePawnCountLocal));
    }
    If (((Operator.LetterOf(CastlingState[Depth], 1) == 0) And (Operator.LetterOf(CastlingState[Depth], 2) == 0)) And ((Operator.LetterOf(CastlingState[Depth], 3) == 0) Or (Operator.LetterOf(CastlingState[Depth], 4) == 0)))
    {
        IsBlackCastlingPossibleLocal = 1;
    }
    Else
    {
        IsBlackCastlingPossibleLocal = 0;
    }
    If (((Operator.LetterOf(CastlingState[Depth], 5) == 0) And (Operator.LetterOf(CastlingState[Depth], 6) == 0)) And ((Operator.LetterOf(CastlingState[Depth], 7) == 0) Or (Operator.LetterOf(CastlingState[Depth], 8) == 0)))
    {
        IsWhiteCastlingPossibleLocal = 1;
    }
    Else
    {
        IsWhiteCastlingPossibleLocal = 0;
    }
    BlackEndgameTargetIdx = 0;
    WhiteEndgameTargetIdx = 0;
    Call //("Collect pawn data, bonus for pawn chains if not king shelter");
    KingFile = IdxToFile[(BlackKingIdx + 0)];
    KingRank = IdxToRank[(BlackKingIdx + 0)];
    File = IdxToFile[(WhiteKingIdx + 0)];
    Rank = IdxToRank[(WhiteKingIdx + 0)];
    Sum1 = 0;
    Sum2 = 0;
    Idx = 1;
    Repeat (64)
    {
        SourcePiece = Board[(Idx + 0)];
        If (abs(SourcePiece) == GoK_BlackPawn)
        {
            Sum1 += (abs((KingFile - IdxToFile[(Idx + 0)])) + abs((KingRank - IdxToRank[(Idx + 0)])));
            Sum2 += (abs((File - IdxToFile[(Idx + 0)])) + abs((Rank - IdxToRank[(Idx + 0)])));
        }
        Idx += 1;
    }
    Count1 = (BlackPawnCountLocal + WhitePawnCountLocal);
    If (Count1 > 0)
    {
        Call TaperedEval.Add(Operator.Round((-2 * (Sum1 / Count1))))(Operator.Round((-4 * (Sum1 / Count1))));
        Call TaperedEval.Add(Operator.Round((2 * (Sum2 / Count1))))(Operator.Round((4 * (Sum2 / Count1))));
    }
    Call //("Doubled pawns, passed pawns, open-file pawns");
    Call //("MiniMax-caused code duplication, requires refactoring via lookup-tables");
    Idx = 1;
    Repeat (8)
    {
        WhitePawnBackwardRank = PawnAdvancePerFile[(Idx + 0)];
        WhitePawnForwardRank = PawnAdvancePerFile[(Idx + 8)];
        BlackPawnBackwardRank = PawnAdvancePerFile[(Idx + 16)];
        BlackPawnForwardRank = PawnAdvancePerFile[(Idx + 24)];
        If (WhitePawnCount[(Idx + 0)] > 0)
        {
            If ((((BlackQueenCountLocal == 0) And (BlackRookCountLocal < 2)) Or ((Idx == 4) Or (Idx == 5))) Or ((IsWhiteCastlingPossibleLocal == 0) And (((Idx < 4) And (IdxToFile[WhiteKingIdx] > 5)) Or ((Idx > 5) And (IdxToFile[WhiteKingIdx] < 4)))))
            {
                IsPawnShelter = 0;
            }
            Else
            {
                IsPawnShelter = 1;
            }
            Blocked = ((WhitePawnForwardRank > BlackPawnBackwardRank) And (BlackPawnBackwardRank > 0));
            If (WhitePawnCount[(Idx + 0)] > 1)
            {
                If (((WhitePawnBackwardRank - WhitePawnForwardRank) == 1) Or (1 == 1))
                {
                    Call TaperedEval.Add((8 * (WhitePawnCount[(Idx - 0)] - 1)))((14 * (WhitePawnCount[(Idx - 0)] - 1)));
                }
            }
            If (IsPawnShelter == 0)
            {
                If (WhitePawnForwardRank > 0)
                {
                    BlockerIdx = (((WhitePawnForwardRank - 1) * 8) + (Idx - 8));
                    WhiteEndgameTargetIdx = BlockerIdx;
                    If (WhitePawnForwardRank < 7)
                    {
                        Call TaperedEval.AddIdentical((-3 * (7 - WhitePawnForwardRank)));
                    }
                    If (Blocked == 0)
                    {
                        If (1 == 1)
                        {
                            Call TaperedEval.AddIdentical((-1 * ((7 - WhitePawnForwardRank) * (7 - WhitePawnForwardRank))));
                        }
                        LeftOppPawnRank = PawnAdvancePerFile[((Idx + 16) - 1)];
                        RightOppPawnRank = PawnAdvancePerFile[((Idx + 16) + 1)];
                        CurrentValue = (((Idx == 1) Or (LeftOppPawnRank == 0)) Or (Not ((WhitePawnForwardRank > LeftOppPawnRank))));
                        CurrentValue2 = (((Idx == 8) Or (RightOppPawnRank == 0)) Or (Not ((WhitePawnForwardRank > RightOppPawnRank))));
                        If ((CurrentValue == 1) And (CurrentValue2 == 1))
                        {
                            Call TaperedEval.AddIdentical(Operator.Round((0 - ((PawnPassedRankBonus[(9 - WhitePawnForwardRank)] - PawnPassedFilePenalty[Idx]) / (1 + (0.5 * (Board[BlockerIdx] > 0)))))));
                            If ((IsEndgameLocal == 1) And (WhiteEndgameTargetIdx == 0))
                            {
                                Call TaperedEval.Add(0)((-5 * ChebyshevDistance[((WhiteEndgameTargetIdx * 100) + BlackKingIdx)]));
                                Call TaperedEval.Add(0)((2 * ChebyshevDistance[((WhiteEndgameTargetIdx * 100) + WhiteKingIdx)]));
                            }
                        }
                    }
                    Call TaperedEval.AddIdentical((10 * (Board[BlockerIdx] == GoK_BlackPawn)));
                }
            }
            If (((Idx == 1) Or (WhitePawnCount[(Idx - 1)] == 0)) And ((Idx == 8) Or (WhitePawnCount[(Idx + 1)] == 0)))
            {
                Call TaperedEval.Add(10)(16);
            }
            Else
            {
                Delta = "";
                Delta2 = "";
                If (Idx > 1)
                {
                    Delta = (WhitePawnForwardRank - PawnAdvancePerFile[((Idx - 1) + 0)]);
                }
                If (Idx < 8)
                {
                    Delta2 = (WhitePawnForwardRank - PawnAdvancePerFile[((Idx + 1) + 0)]);
                }
                Count1 = ((Delta == 0) + (Delta2 == 0));
                Count2 = ((Delta == -1) + (Delta2 == -1));
                If ((Count1 > 0) Or (Count2 > 0))
                {
                    CurrentValue = (0 - Operator.Round(((PawnConnectedBonus[(9 - WhitePawnForwardRank)] * ((2 + ((Count1 > 0) * 1)) / (1 + Blocked))) + (Count2 * 8))));
                    Call TaperedEval.Add(CurrentValue)(Operator.Round(((CurrentValue * (7 - WhitePawnForwardRank)) / 4)));
                }
            }
        }
        If (BlackPawnCount[(Idx + 0)] > 0)
        {
            If ((((WhiteQueenCountLocal == 0) And (WhiteRookCountLocal < 2)) Or ((Idx == 4) Or (Idx == 5))) Or ((IsBlackCastlingPossibleLocal == 0) And (((Idx < 4) And (IdxToFile[BlackKingIdx] > 5)) Or ((Idx > 5) And (IdxToFile[BlackKingIdx] < 4)))))
            {
                IsPawnShelter = 0;
            }
            Else
            {
                IsPawnShelter = 1;
            }
            Blocked = (BlackPawnForwardRank < WhitePawnBackwardRank);
            If (BlackPawnCount[(Idx + 0)] > 1)
            {
                If (((BlackPawnForwardRank - BlackPawnBackwardRank) == 1) Or (1 == 1))
                {
                    Call TaperedEval.Add((-8 * (BlackPawnCount[(Idx + 0)] - 1)))((-14 * (BlackPawnCount[(Idx + 0)] - 1)));
                }
            }
            If (IsPawnShelter == 0)
            {
                If (BlackPawnForwardRank > 0)
                {
                    BlockerIdx = (((BlackPawnForwardRank - 1) * 8) + (Idx + 8));
                    BlackEndgameTargetIdx = BlockerIdx;
                    If (BlackPawnForwardRank > 2)
                    {
                        Call TaperedEval.AddIdentical((3 * (BlackPawnForwardRank - 2)));
                    }
                    If (Blocked == 0)
                    {
                        If (1 == 1)
                        {
                            Call TaperedEval.AddIdentical((1 * ((BlackPawnForwardRank - 2) * (BlackPawnForwardRank - 2))));
                        }
                        LeftOppPawnRank = PawnAdvancePerFile[(Idx - 1)];
                        RightOppPawnRank = PawnAdvancePerFile[(Idx + 1)];
                        CurrentValue = (((Idx == 1) Or (LeftOppPawnRank == 0)) Or (Not ((BlackPawnForwardRank < LeftOppPawnRank))));
                        CurrentValue2 = (((Idx == 8) Or (RightOppPawnRank == 0)) Or (Not ((BlackPawnForwardRank < RightOppPawnRank))));
                        If ((CurrentValue == 1) And (CurrentValue2 == 1))
                        {
                            Call TaperedEval.AddIdentical(Operator.Round(((PawnPassedRankBonus[BlackPawnForwardRank] - PawnPassedFilePenalty[Idx]) / (1 + (0.5 * (Board[BlockerIdx] < 0))))));
                            If ((IsEndgameLocal == 1) And (BlackEndgameTargetIdx == 0))
                            {
                                Call TaperedEval.Add(0)((5 * ChebyshevDistance[((BlackEndgameTargetIdx * 100) + WhiteKingIdx)]));
                                Call TaperedEval.Add(0)((-2 * ChebyshevDistance[((BlackEndgameTargetIdx * 100) + BlackKingIdx)]));
                            }
                        }
                    }
                    Call TaperedEval.AddIdentical((-10 * (Board[BlockerIdx] == GoK_WhitePawn)));
                }
            }
            If (((Idx == 1) Or (BlackPawnCount[(Idx - 1)] == 0)) And ((Idx == 8) Or (BlackPawnCount[(Idx + 1)] == 0)))
            {
                Call TaperedEval.Add(-10)(-16);
            }
            Else
            {
                Delta = "";
                Delta2 = "";
                If (Idx > 1)
                {
                    Delta = (PawnAdvancePerFile[((Idx - 1) + 16)] - BlackPawnForwardRank);
                }
                If (Idx < 8)
                {
                    Delta2 = (PawnAdvancePerFile[((Idx + 1) + 16)] - BlackPawnForwardRank);
                }
                Count1 = ((Delta == 0) + (Delta2 == 0));
                Count2 = ((Delta == -1) + (Delta2 == -1));
                If ((Count1 > 0) Or (Count2 > 0))
                {
                    CurrentValue = Operator.Round(((PawnConnectedBonus[BlackPawnForwardRank] * ((2 + ((Count1 > 0) * 1)) / (1 + Blocked))) + (Count2 * 8)));
                    Call TaperedEval.Add(CurrentValue)(Operator.Round(((CurrentValue * (BlackPawnForwardRank - 2)) / 4)));
                }
            }
        }
        Idx += 1;
    }
    Call TaperedEval.GetSumResult;
    EvalPawnsResult = TaperedEval.SumResult;
    Call //("Early promotion detection via Rule-of-Squares / Chebyshev distance");
    If (((WhiteQueenCountLocal + WhiteMinorCountLocal) == 0) And ((BlackQueenCountLocal + BlackMinorCountLocal) == 0))
    {
        PromoRank1 = -1;
        PromoRank2 = -1;
        Count1 = 0;
        Count2 = 0;
        Idx = 1;
        Repeat (8)
        {
            WhitePawnForwardRank = PawnAdvancePerFile[(Idx + 8)];
            BlackPawnForwardRank = PawnAdvancePerFile[(Idx + 24)];
            If ((BlackQueenCountLocal + BlackMinorCountLocal) == 0)
            {
                If ((WhitePawnForwardRank < 7) And (WhitePawnForwardRank > 0))
                {
                    BlackPawnBackwardRank = PawnAdvancePerFile[(Idx + 16)];
                    If ((WhitePawnForwardRank < BlackPawnBackwardRank) Or (BlackPawnBackwardRank == 0))
                    {
                        LeftOppPawnRank = PawnAdvancePerFile[((Idx + 16) - 1)];
                        If (((Idx == 1) Or (LeftOppPawnRank == 0)) Or (WhitePawnForwardRank < LeftOppPawnRank))
                        {
                            RightOppPawnRank = PawnAdvancePerFile[((Idx + 16) + 1)];
                            If (((Idx == 8) Or (RightOppPawnRank == 0)) Or (WhitePawnForwardRank < RightOppPawnRank))
                            {
                                TargetIdx = Idx;
                                Delta = (WhitePawnForwardRank - 1);
                                If (Delta > 5)
                                {
                                    Delta = 5;
                                }
                                If ((ChebyshevDistance[((BlackKingIdx * 100) + TargetIdx)] - ((Depth + 1) % 2)) > Delta)
                                {
                                    If ((PromoRank1 == -1) Or (WhitePawnForwardRank < PromoRank1))
                                    {
                                        PromoRank1 = WhitePawnForwardRank;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            If ((WhiteQueenCountLocal + WhiteMinorCountLocal) == 0)
            {
                If (BlackPawnForwardRank > 2)
                {
                    WhitePawnBackwardRank = PawnAdvancePerFile[Idx];
                    If (BlackPawnForwardRank > WhitePawnBackwardRank)
                    {
                        LeftOppPawnRank = PawnAdvancePerFile[(Idx - 1)];
                        If (((Idx == 1) Or (LeftOppPawnRank == 0)) Or (BlackPawnForwardRank > LeftOppPawnRank))
                        {
                            RightOppPawnRank = PawnAdvancePerFile[(Idx + 1)];
                            If (((Idx == 8) Or (RightOppPawnRank == 0)) Or (BlackPawnForwardRank > RightOppPawnRank))
                            {
                                TargetIdx = (56 + Idx);
                                Delta = (8 - BlackPawnForwardRank);
                                If (Delta > 5)
                                {
                                    Delta = 5;
                                }
                                If ((ChebyshevDistance[((WhiteKingIdx * 100) + TargetIdx)] - (Depth % 2)) > Delta)
                                {
                                    If ((PromoRank2 == -1) Or (BlackPawnForwardRank > PromoRank2))
                                    {
                                        PromoRank2 = BlackPawnForwardRank;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            Idx += 1;
        }
        If ((Not ((PromoRank2 == -1))) And (PromoRank1 == -1))
        {
            EvalPawnsResult += ((GoK_WhiteQueen - GoK_WhitePawn) + 100);
        }
        Else
        {
            If ((Not ((PromoRank1 == -1))) And (PromoRank2 == -1))
            {
                EvalPawnsResult += ((GoK_BlackQueen - GoK_BlackPawn) - 100);
            }
            Else
            {
                If ((9 - PromoRank1) == PromoRank2)
                {
                    PromoRank1 += ((Depth + 1) % 2);
                    PromoRank2 += (Depth % 2);
                }
                If ((9 - PromoRank1) > PromoRank2)
                {
                    EvalPawnsResult += ((GoK_WhiteQueen - GoK_WhitePawn) + 100);
                }
                Else
                {
                    If (PromoRank2 > (9 - PromoRank1))
                    {
                        EvalPawnsResult += ((GoK_BlackQueen - GoK_BlackPawn) - 100);
                    }
                }
            }
        }
    }
    If ((((BlackQueenCountLocal + BlackMinorCountLocal) == 0) And ((WhiteQueenCountLocal + WhiteMinorCountLocal) > 0)) Or (((WhiteQueenCountLocal + WhiteMinorCountLocal) == 0) And ((BlackQueenCountLocal + BlackMinorCountLocal) > 0)))
    {
        If ((BlackQueenCountLocal + BlackMinorCountLocal) > 0)
        {
            Side = 1;
        }
        Else
        {
            If ((WhiteQueenCountLocal + WhiteMinorCountLocal) > 0)
            {
                Side = 2;
            }
        }
        CurrentValue = ChebyshevDistance[((WhiteKingIdx * 100) + BlackKingIdx)];
        If (Side == 1)
        {
            EvalPawnsResult += (-20 * CurrentValue);
        }
        Else
        {
            EvalPawnsResult += (20 * CurrentValue);
        }
        If (Side == 1)
        {
            KingIdx = WhiteKingIdx;
        }
        Else
        {
            KingIdx = BlackKingIdx;
        }
        File = IdxToFile[KingIdx];
        Rank = IdxToRank[KingIdx];
        Delta = 0;
        Delta2 = 0;
        If (Rank < 4)
        {
            Delta = (4 - Rank);
        }
        Else
        {
            If (Rank > 5)
            {
                Delta = (Rank - 5);
            }
        }
        If (File < 4)
        {
            Delta2 = (4 - File);
        }
        Else
        {
            If (File > 5)
            {
                Delta2 = (File - 5);
            }
        }
        If (Side == 1)
        {
            EvalPawnsResult += (20 * (Delta + Delta2));
        }
        Else
        {
            EvalPawnsResult += (-20 * (Delta + Delta2));
        }
    }
}

Define EvaluateThreats(string Depth) (warp=true)
{
    Call TTProbeBoard(CurrentBoardHash)(Depth);
    If ((TTProbeRes == 1) And (Not ((TTProbeBoardScore3Res == ""))))
    {
        EvalThreatsResult = TTProbeBoardScore3Res;
        Stop(this script);
    }
    Call EvaluateThreatsImpl(Depth);
    Call TTStoreBoard(CurrentBoardHash)(Depth)("")("")(EvalThreatsResult)("");
}

Define EvaluateThreatsImpl(string Depth) (warp=true)
{
    EvalThreatsResult = 0;
    If (((WhiteQueenCountLocal + WhiteMinorCountLocal) + (BlackQueenCountLocal + BlackMinorCountLocal)) == 0)
    {
        Stop(this script);
    }
    If (IsScratch3 == 1)
    {
        Stop(this script);
    }
    Call TaperedEval.Init;
    EvalPieceIdx = 1;
    Repeat (List.Length(EvalPiecesIdx_All))
    {
        Idx = EvalPiecesIdx_All[(EvalPieceIdx + 0)];
        CurrentPiece = Board[(Idx + 0)];
        Factor = (((CurrentPiece > 0) * 2) - 1);
        CurrentPieceAbs = abs(CurrentPiece);
        AttackerIdx = 0;
        DefenderIdx = 0;
        AttackerPieceAbs = 0;
        DefenderPieceAbs = 0;
        If (CurrentPiece > 0)
        {
            Attacked = BoardAttackedByWhite[(Idx + 0)];
            If (Attacked > 0)
            {
                AttackerIdx = BoardAttackedByWhitePiece[(Idx + 0)];
            }
            Defended = BoardAttackedByBlack[(Idx + 0)];
            If (Defended > 0)
            {
                DefenderIdx = BoardAttackedByBlackPiece[(Idx + 0)];
            }
        }
        Else
        {
            Attacked = BoardAttackedByBlack[(Idx + 0)];
            If (Attacked > 0)
            {
                AttackerIdx = BoardAttackedByBlackPiece[(Idx + 0)];
            }
            Defended = BoardAttackedByWhite[(Idx + 0)];
            If (Defended > 0)
            {
                DefenderIdx = BoardAttackedByWhitePiece[(Idx + 0)];
            }
        }
        If (Attacked > 0)
        {
            AttackerPieceAbs = abs(Board[(AttackerIdx + 0)]);
        }
        If (Defended > 0)
        {
            DefenderPieceAbs = abs(Board[(DefenderIdx + 0)]);
        }
        If (CurrentPieceAbs > GoK_BlackPawn)
        {
            File = IdxToFile[(Idx + 0)];
            Rank = IdxToRank[(Idx + 0)];
            If (File > 1)
            {
                IdxSub = (Idx + (15 * Factor));
                If (((IdxSub > 8) And (IdxSub < 57)) And (Board[(IdxSub + 0)] == (GoK_WhitePawn * Factor)))
                {
                    Call FindAndAddSafePawnPush(IdxSub)((Idx + (7 * Factor)))(CurrentPiece)(Factor);
                }
                If ((Rank == 2) Or (Rank == 7))
                {
                    IdxSub = (Idx + (23 * Factor));
                    If (((IdxSub > 8) And (IdxSub < 57)) And (Board[(IdxSub + 0)] == (GoK_WhitePawn * Factor)))
                    {
                        Call FindAndAddSafePawnPush(IdxSub)((Idx + (7 * Factor)))(CurrentPiece)(Factor);
                    }
                }
            }
            If (File < 8)
            {
                IdxSub = (Idx + (17 * Factor));
                If (((IdxSub > 8) And (IdxSub < 57)) And (Board[(IdxSub + 0)] == (GoK_WhitePawn * Factor)))
                {
                    Call FindAndAddSafePawnPush(IdxSub)((Idx + (9 * Factor)))(CurrentPiece)(Factor);
                }
                If ((Rank == 2) Or (Rank == 7))
                {
                    IdxSub = (Idx + (25 * Factor));
                    If (((IdxSub > 8) And (IdxSub < 57)) And (Board[(IdxSub + 0)] == (GoK_WhitePawn * Factor)))
                    {
                        Call FindAndAddSafePawnPush(IdxSub)((Idx + (9 * Factor)))(CurrentPiece)(Factor);
                    }
                }
            }
        }
        If (Attacked > 0)
        {
            StronglyProtectedCurrentPiece = (((Defended > 0) And (DefenderPieceAbs == GoK_BlackPawn)) Or ((Defended > 1) And (Attacked < 2)));
            StronglyProtectedCurrentPieceNonPawn = ((CurrentPieceAbs > GoK_BlackPawn) And (StronglyProtectedCurrentPiece == 1));
            IsWeakCurrentPiece = ((Attacked > 0) And (StronglyProtectedCurrentPiece == 0));
            If (CurrentPiece > 0)
            {
                SafeAttacker = ((BoardAttackedByBlack[(AttackerIdx + 0)] == 0) Or (Not ((BoardAttackedByWhite[(AttackerIdx + 0)] < BoardAttackedByBlack[(AttackerIdx + 0)]))));
            }
            Else
            {
                SafeAttacker = ((BoardAttackedByWhite[(AttackerIdx + 0)] == 0) Or (Not ((BoardAttackedByBlack[(AttackerIdx + 0)] < BoardAttackedByWhite[(AttackerIdx + 0)]))));
            }
            IdxSub = (PieceIdxLookup[(CurrentPieceAbs + 0)] * 2);
            If ((IsWeakCurrentPiece == 1) Or (StronglyProtectedCurrentPieceNonPawn == 1))
            {
                If ((AttackerPieceAbs == GoK_BlackKnight) Or (AttackerPieceAbs == GoK_BlackBishop))
                {
                    Call //("Minor threads");
                    Call TaperedEval.Add(((0 - MinorAttackWeight[(IdxSub - 1)]) * Factor))(((0 - MinorAttackWeight[IdxSub]) * Factor));
                }
            }
            If (IsWeakCurrentPiece == 1)
            {
                If ((Defended == 0) Or ((CurrentPieceAbs > GoK_BlackPawn) And (Attacked > 1)))
                {
                    Call //("Hanging pieces");
                    Call TaperedEval.Add((-32 * Factor))((-17 * Factor));
                }
                If (AttackerPieceAbs == GoK_BlackRook)
                {
                    Call //("Rook threats");
                    Call TaperedEval.Add(((0 - RookAttackWeight[(IdxSub - 1)]) * Factor))(((0 - RookAttackWeight[IdxSub]) * Factor));
                }
                If (AttackerPieceAbs == GoK_BlackKing)
                {
                    Call //("King threat");
                    Call TaperedEval.Add((-11 * Factor))((-42 * Factor));
                }
            }
            If (SafeAttacker == 1)
            {
                If ((AttackerPieceAbs == GoK_BlackPawn) And (CurrentPieceAbs > GoK_BlackPawn))
                {
                    Call //("Safe pawn attack");
                    Call TaperedEval.Add((-85 * Factor))((-46 * Factor));
                }
                If (CurrentPieceAbs == GoK_BlackQueen)
                {
                    If ((AttackerPieceAbs == GoK_BlackBishop) Or (AttackerPieceAbs == GoK_BlackRook))
                    {
                        Call //("Sliders attack queen");
                        Call TaperedEval.Add((-28 * Factor))((-8 * Factor));
                    }
                    If (AttackerPieceAbs == GoK_BlackKnight)
                    {
                        Call //("Knight attacks queen");
                        Call TaperedEval.Add((-8 * Factor))((-8 * Factor));
                    }
                }
            }
        }
        EvalPieceIdx += 1;
    }
    Call TaperedEval.GetSumResult;
    EvalThreatsResult = TaperedEval.SumResult;
    Call TaperedEval.Init;
    Side = 1;
    Repeat (2)
    {
        Factor = (((Side == 1) * 2) - 1);
        KingFlankAttacks = 0;
        If (Side == 1)
        {
            KingFile = IdxToFile[(BlackKingIdx + 0)];
            Rank = 1;
        }
        Else
        {
            KingFile = IdxToFile[(WhiteKingIdx + 0)];
            Rank = 4;
        }
        If ((KingFile == 1) Or (KingFile == 3))
        {
            KingFile = 2;
        }
        Else
        {
            If ((KingFile == 6) Or (KingFile == 8))
            {
                KingFile = 7;
            }
        }
        File = (KingFile - 1);
        Idx = (((Rank - 1) * 8) + File);
        Repeat (5)
        {
            Repeat (3)
            {
                If (Side == 1)
                {
                    KingFlankAttacks += BoardAttackedByWhite[(Idx + 0)];
                }
                Else
                {
                    KingFlankAttacks += BoardAttackedByBlack[(Idx + 0)];
                }
                Idx += 1;
            }
            Idx += 5;
        }
        Call TaperedEval.Add((-4 * (KingFlankAttacks * Factor)))((-2 * (KingFlankAttacks * Factor)));
        Side += 1;
    }
    EvalThreatsResult += TaperedEval.SumResult;
    List.DeleteAll(KingRingAttackersCount);
    List.DeleteAll(KingRingAttacksCount);
    List.DeleteAll(KingRingAttacksWeight);
    List.DeleteAll(KingRingAttacksOnWeakCount);
    List.DeleteAll(KingRingAttacksBishopDefenders);
    List.DeleteAll(KingRingAttacksKnightDefenders);
    List.DeleteAll(KingRingAttackSafeChecks);
    List.DeleteAll(KingRingAttackUnsafeChecks);
    List.DeleteAll(KingRingAttacksEscapeCount);
    List.DeleteAll(KingRingPawnProtection);
    Repeat (2)
    {
        List.Add(KingRingAttackersCount, 0);
        List.Add(KingRingAttacksCount, 0);
        List.Add(KingRingAttacksWeight, 0);
        List.Add(KingRingAttacksOnWeakCount, 0);
        List.Add(KingRingAttacksBishopDefenders, 0);
        List.Add(KingRingAttacksKnightDefenders, 0);
        List.Add(KingRingAttackSafeChecks, 0);
        List.Add(KingRingAttackUnsafeChecks, 0);
        List.Add(KingRingAttacksEscapeCount, 0);
        List.Add(KingRingPawnProtection, 0);
    }
    List.DeleteAll(AttacksWeight);
    List.Add(AttacksWeight, 0);
    List.Add(AttacksWeight, 36);
    List.Add(AttacksWeight, 26);
    List.Add(AttacksWeight, 21);
    List.Add(AttacksWeight, 15);
    List.Add(AttacksWeight, 0);
    List.DeleteAll(TmpList2);
    List.Add(TmpList2, 1000);
    List.Add(TmpList2, 100);
    List.Add(TmpList2, 10);
    List.Add(TmpList2, 1);
    Side = 1;
    Repeat (2)
    {
        Call TaperedEval.Init;
        List.DeleteAll(TmpList1);
        If (Side == 1)
        {
            Call GetKingProtection(BlackKingIdx)((1 == 1));
            CurrentValue2 = KingProtection;
            If ((Operator.LetterOf(CastlingState[Depth], 1) == 0) And (Operator.LetterOf(CastlingState[Depth], 2) == 0))
            {
                If (Operator.LetterOf(CastlingState[Depth], 3) == 0)
                {
                    Call GetKingProtection(VirtualBoard[7])((1 == 1));
                    If (1 == 1)
                    {
                        KingProtection = Operator.Round((KingProtection * (0.5 + (((Board[VirtualBoard[6]] == 0) + (Board[VirtualBoard[7]] == 0)) * 0.1))));
                    }
                    If (KingProtection > CurrentValue2)
                    {
                        CurrentValue2 = KingProtection;
                    }
                }
                If (Operator.LetterOf(CastlingState[Depth], 4) == 0)
                {
                    Call GetKingProtection(VirtualBoard[2])((1 == 1));
                    If (1 == 1)
                    {
                        KingProtection = Operator.Round((KingProtection * (0.4 + ((((Board[VirtualBoard[2]] == 0) + (Board[VirtualBoard[3]] == 0)) + (Board[VirtualBoard[4]] == 0)) * 0.1))));
                    }
                    If (KingProtection > CurrentValue2)
                    {
                        CurrentValue2 = KingProtection;
                    }
                }
            }
            List.ReplaceItem(KingRingPawnProtection, (Side + 0), Operator.Round((CurrentValue2 * (0.2 + (0.8 * WhiteQueenCountLocal)))));
        }
        Else
        {
            Call GetKingProtection(WhiteKingIdx)((1 == 0));
            CurrentValue2 = KingProtection;
            If ((Operator.LetterOf(CastlingState[Depth], 5) == 0) And (Operator.LetterOf(CastlingState[Depth], 6) == 0))
            {
                If (Operator.LetterOf(CastlingState[Depth], 7) == 0)
                {
                    Call GetKingProtection(VirtualBoard[63])((1 == 0));
                    If (1 == 1)
                    {
                        KingProtection = Operator.Round((KingProtection * (0.5 + (((Board[VirtualBoard[62]] == 0) + (Board[VirtualBoard[63]] == 0)) * 0.1))));
                    }
                    If (KingProtection > CurrentValue2)
                    {
                        CurrentValue2 = KingProtection;
                    }
                }
                If (Operator.LetterOf(CastlingState[Depth], 8) == 0)
                {
                    Call GetKingProtection(VirtualBoard[58])((1 == 0));
                    If (1 == 1)
                    {
                        KingProtection = Operator.Round((KingProtection * (0.4 + ((((Board[VirtualBoard[58]] == 0) + (Board[VirtualBoard[59]] == 0)) + (Board[VirtualBoard[60]] == 0)) * 0.1))));
                    }
                    If (KingProtection > CurrentValue2)
                    {
                        CurrentValue2 = KingProtection;
                    }
                }
            }
            List.ReplaceItem(KingRingPawnProtection, (Side + 0), Operator.Round((CurrentValue2 * (0.2 + (0.8 * BlackQueenCountLocal)))));
        }
        If (Side == 1)
        {
            KingIdx = BlackKingIdx;
        }
        Else
        {
            KingIdx = WhiteKingIdx;
        }
        IdxOuter = (((KingIdx - 1) * 10) + 1);
        Idx = KingRings[(IdxOuter + 0)];
        Repeat (9)
        {
            If (Not ((Idx == -1)))
            {
                IsWeakCurrentPiece = 0;
                If (Side == 1)
                {
                    Count1 = BoardAttackedByWhite[(Idx + 0)];
                }
                Else
                {
                    Count1 = BoardAttackedByBlack[(Idx + 0)];
                }
                If (Count1 > 0)
                {
                    If (Side == 1)
                    {
                        IdxSub = BoardAttackedByWhitePiece[(Idx + 0)];
                        DefenderPiece = Board[BoardAttackedByBlackPiece[(Idx + 0)]];
                        If ((BoardAttackedByBlack[(Idx + 0)] == 0) Or ((DefenderPiece == GoK_BlackQueen) Or (DefenderPiece == GoK_BlackKing)))
                        {
                            IsWeakCurrentPiece = 1;
                        }
                    }
                    Else
                    {
                        IdxSub = BoardAttackedByBlackPiece[(Idx + 0)];
                        DefenderPiece = Board[BoardAttackedByWhitePiece[(Idx + 0)]];
                        If ((BoardAttackedByWhite[(Idx + 0)] == 0) Or ((DefenderPiece == GoK_WhiteQueen) Or (DefenderPiece == GoK_WhiteKing)))
                        {
                            IsWeakCurrentPiece = 1;
                        }
                    }
                    List.ReplaceItem(KingRingAttacksCount, (Side + 0), (KingRingAttacksCount[(Side + 0)] + Count1));
                    If (IsWeakCurrentPiece == 1)
                    {
                        List.ReplaceItem(KingRingAttacksOnWeakCount, (Side + 0), (KingRingAttacksOnWeakCount[(Side + 0)] + 1));
                    }
                    If (Not (List.ContainsItem(TmpList1, IdxSub)))
                    {
                        List.ReplaceItem(KingRingAttackersCount, (Side + 0), (KingRingAttackersCount[(Side + 0)] + 1));
                        List.ReplaceItem(KingRingAttacksWeight, (Side + 0), (KingRingAttacksWeight[(Side + 0)] + AttacksWeight[PieceIdxLookup[abs(Board[(IdxSub + 0)])]]));
                        List.Add(TmpList1, IdxSub);
                    }
                    If (abs(DefenderPiece) == GoK_BlackBishop)
                    {
                        List.ReplaceItem(KingRingAttacksBishopDefenders, (Side + 0), (KingRingAttacksBishopDefenders[(Side + 0)] + 1));
                    }
                    Else
                    {
                        If (abs(DefenderPiece) == GoK_BlackKnight)
                        {
                            List.ReplaceItem(KingRingAttacksKnightDefenders, (Side + 0), (KingRingAttacksKnightDefenders[(Side + 0)] + 1));
                        }
                    }
                }
                If (1 == 0)
                {
                    If (Count1 == 0)
                    {
                        If (((Side == 1) And (Not ((Board[(Idx + 0)] > 0)))) Or ((Side == 2) And (Not ((Board[(Idx + 0)] < 0)))))
                        {
                            List.ReplaceItem(KingRingAttacksEscapeCount, (Side + 0), (KingRingAttacksEscapeCount[(Side + 0)] + 1));
                        }
                    }
                }
            }
            IdxOuter += 1;
            Idx = KingRings[(IdxOuter + 0)];
        }
        Idx = 1;
        Repeat (64)
        {
            If (Side == 1)
            {
                Attacked = BoardAttackedByWhite[(Idx + 0)];
            }
            Else
            {
                Attacked = BoardAttackedByBlack[(Idx + 0)];
            }
            If (Attacked > 0)
            {
                TargetPiece = Board[(Idx + 0)];
                If (((Side == 1) And (Not ((TargetPiece < 0)))) Or ((Side == 2) And (Not ((TargetPiece > 0)))))
                {
                    If (Side == 1)
                    {
                        AttackerIdx = BoardAttackedByWhitePiece[(Idx + 0)];
                    }
                    Else
                    {
                        AttackerIdx = BoardAttackedByBlackPiece[(Idx + 0)];
                    }
                    AttackerPieceAbs = abs(Board[(AttackerIdx + 0)]);
                    If ((AttackerPieceAbs > GoK_BlackPawn) And (Not ((AttackerPieceAbs == GoK_BlackKing))))
                    {
                        Found = 0;
                        If (Side == 1)
                        {
                            CurrentMove = ((Idx * 100) + BlackKingIdx);
                            If (MovePosLookupWhiteLegal[((PieceIdxLookup[(AttackerPieceAbs + 0)] * 10000) + CurrentMove)] == 1)
                            {
                                Found = 1;
                            }
                        }
                        Else
                        {
                            CurrentMove = ((Idx * 100) + WhiteKingIdx);
                            If (MovePosLookupBlackLegal[((PieceIdxLookup[(AttackerPieceAbs + 0)] * 10000) + CurrentMove)] == 1)
                            {
                                Found = 1;
                            }
                        }
                        If (Found == 1)
                        {
                            If (Not ((AttackerPieceAbs == GoK_BlackKnight)))
                            {
                                SourceIdx = Idx;
                                If (Side == 1)
                                {
                                    KingIdx = BlackKingIdx;
                                }
                                Else
                                {
                                    KingIdx = WhiteKingIdx;
                                }
                                IdxInc = MovePathStepInc[(CurrentMove + 0)];
                                Repeat Until ((Found == 0) Or ((SourceIdx + IdxInc) == KingIdx))
                                {
                                    SourceIdx += IdxInc;
                                    If (Not ((Board[(SourceIdx + 0)] == 0)))
                                    {
                                        Found = 0;
                                    }
                                }
                            }
                            If (Found == 1)
                            {
                                If (Side == 1)
                                {
                                    Defended = BoardAttackedByBlack[(Idx + 0)];
                                    DefenderIdx = BoardAttackedByBlackPiece[(Idx + 0)];
                                }
                                Else
                                {
                                    Defended = BoardAttackedByWhite[(Idx + 0)];
                                    DefenderIdx = BoardAttackedByWhitePiece[(Idx + 0)];
                                }
                                DefenderPiece = Board[(DefenderIdx + 0)];
                                IsWeak = (((Attacked > 0) And (Defended < 2)) And ((Defended == 0) Or ((abs(DefenderPiece) > GoK_BlackRook) And (AttackerPieceAbs < GoK_BlackQueen))));
                                If ((Defended == 0) Or ((IsWeak == 1) And (Attacked > 1)))
                                {
                                    List.ReplaceItem(KingRingAttackSafeChecks, (Side + 0), (KingRingAttackSafeChecks[(Side + 0)] + TmpList2[(PieceIdxLookup[(AttackerPieceAbs + 0)] - 1)]));
                                }
                                Else
                                {
                                    If (Not ((AttackerPieceAbs == GoK_BlackQueen)))
                                    {
                                        List.ReplaceItem(KingRingAttackUnsafeChecks, (Side + 0), (KingRingAttackUnsafeChecks[(Side + 0)] + 1));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            Idx += 1;
        }
        KingFlankAttacks = 0;
        If (Side == 1)
        {
            KingFile = IdxToFile[(BlackKingIdx + 0)];
            Rank = IdxToRank[(BlackKingIdx + 0)];
        }
        Else
        {
            KingFile = IdxToFile[(WhiteKingIdx + 0)];
            Rank = (IdxToRank[(WhiteKingIdx + 0)] - 4);
        }
        If ((KingFile == 1) Or (KingFile == 3))
        {
            KingFile = 2;
        }
        Else
        {
            If ((KingFile == 6) Or (KingFile == 8))
            {
                KingFile = 7;
            }
        }
        If (Side == 1)
        {
            KingPawnlessFlank = ((BlackPawnCount[(KingFile - 1)] == 0) And ((BlackPawnCount[(KingFile + 0)] == 0) And (BlackPawnCount[(KingFile + 1)] == 0)));
        }
        Else
        {
            KingPawnlessFlank = ((WhitePawnCount[(KingFile - 1)] == 0) And ((WhitePawnCount[(KingFile + 0)] == 0) And (WhitePawnCount[(KingFile + 1)] == 0)));
        }
        File = (KingFile - 1);
        Idx = (((Rank - 1) * 8) + File);
        Repeat (5)
        {
            Repeat (3)
            {
                If (Idx < 65)
                {
                    If (Side == 1)
                    {
                        KingFlankAttacks += BoardAttackedByWhite[(Idx + 0)];
                    }
                    Else
                    {
                        KingFlankAttacks += BoardAttackedByBlack[(Idx + 0)];
                    }
                }
                Idx += 1;
            }
            Idx += 5;
        }
        KingDanger = 0;
        KingDanger += Operator.Round((0.25 * KingFlankAttacks));
        KingDanger += Operator.Round((-0.66 * KingRingPawnProtection[(Side + 0)]));
        KingDanger += (KingRingAttacksWeight[(Side + 0)] * KingRingAttackersCount[(Side + 0)]);
        KingDanger += (32 * KingRingAttacksCount[(Side + 0)]);
        KingDanger += (86 * KingRingAttacksOnWeakCount[(Side + 0)]);
        KingDanger += (-47 * KingRingAttacksKnightDefenders[(Side + 0)]);
        KingDanger += (-18 * KingRingAttacksBishopDefenders[(Side + 0)]);
        KingDanger += (65 * KingRingAttackUnsafeChecks[(Side + 0)]);
        CurrentValue2 = MoveToZeroPadStr[(KingRingAttackSafeChecks[(Side + 0)] + 1)];
        If (Operator.LetterOf(CurrentValue2, 2) == 0)
        {
            KingDanger += ((365 - 0) * (Operator.LetterOf(CurrentValue2, 1) > 0));
        }
        KingDanger += ((505 - 0) * (Operator.LetterOf(CurrentValue2, 2) > 0));
        If (Operator.LetterOf(CurrentValue2, 1) == 0)
        {
            KingDanger += ((300 - 0) * (Operator.LetterOf(CurrentValue2, 3) > 0));
        }
        KingDanger += ((370 - 0) * (Operator.LetterOf(CurrentValue2, 4) > 0));
        If (Side == 1)
        {
            If (WhiteQueenCountLocal == 0)
            {
                KingDanger += -410;
            }
        }
        Else
        {
            If (BlackQueenCountLocal == 0)
            {
                KingDanger += -410;
            }
        }
        If (KingDanger > 0)
        {
            CurrentValue = Operator.Round(((KingDanger * KingDanger) / 2048));
            CurrentValue2 = Operator.Round((KingDanger / 16));
            If (1 == 1)
            {
                If (CurrentValue > 128)
                {
                    CurrentValue = 128;
                }
                If (CurrentValue2 > 128)
                {
                    CurrentValue2 = 128;
                }
            }
            Call TaperedEval.Add((0 - CurrentValue))((0 - CurrentValue2));
        }
        Call TaperedEval.Add(Operator.Round((KingRingPawnProtection[(Side + 0)] * 0.7)))(0);
        Call TaperedEval.Add((-4 * KingFlankAttacks))(0);
        Call TaperedEval.Add((-8 * KingPawnlessFlank))((-35 * KingPawnlessFlank));
        Call TaperedEval.GetSumResult;
        EvalThreatsResult += (TaperedEval.SumResult * (((Side == 1) * 2) - 1));
        Side += 1;
    }
}

Define ExecuteEngineMove (warp=false)
{
    Call EnterExecution;
    Call ExecuteEngineMoveImpl;
    Call ExitExecution;
}

Define ExecuteEngineMoveImpl (warp=false)
{
    If (GoK_IsGameSuspended == 1)
    {
        Stop(this script);
    }
    Event.Broadcast("OpeningBookHide");
    BestMove = "";
    If (Level > 2)
    {
        Call GetOpeningMoves;
        If (List.Length(OpeningMovesRes) > 0)
        {
            Event.Broadcast("OpeningBookShow");
            BestMove = OpeningMovesRes[Operator.Random(1 , List.Length(OpeningMovesRes))];
        }
    }
    Call IsEngineValidMove(BestMove);
    If (ValidMoveRes == 0)
    {
        Looks.Think("Thinking...");
        Control.Wait(0);
        If (Level > 2)
        {
            If (Level > 4)
            {
                Call GetBestMoveMedDiff;
            }
            Else
            {
                Call GetBestMoveBlitz;
            }
        }
        Else
        {
            Call GetBestMoveEasy;
        }
    }
    Event.BroadcastAndWait("hidebestmove");
    Call OnProgressChanged(100);
    Control.Wait(0);
    Call IsEngineValidMove(BestMove);
    If (ValidMoveRes == 0)
    {
        Looks.Say(Operator.Join("Internal Error: No valid move found. Sorry, this should not happen. Maybe you cleared lookup lists in the editor? If you are running a normal game, please export board data and report bug via project comment", Operator.Join(" Move: ", BestMove)), 10);
        GoK_IsGameSuspended = 1;
        Stop(this script);
    }
    Looks.Think("");
    Pieces_MovePieceFromIdx = floor((BestMove / 100));
    Pieces_MovePieceToIdx = floor((BestMove % 100));
    If (((BestMove == GoK_BlackQueensideCastling) Or (BestMove == GoK_BlackKingsideCastling)) Or ((BestMove == GoK_WhiteQueensideCastling) Or (BestMove == GoK_WhiteKingsideCastling)))
    {
        Pieces_MovePieceSpecial = BestMove;
    }
    Else
    {
        Pieces_MovePieceSpecial = "";
    }
    Event.BroadcastAndWait("movepiece");
    Event.Broadcast("SoundMove");
    GameMoves = Operator.Join(GameMoves, MoveToZeroPadStr[floor((BestMove + 1))]);
    Call GetMoveNotation(BestMove);
    List.Add(GameMovesAN, MoveNotationRes);
    Call ClearMoveList(1);
    Call AddMoveToList(BestMove)(1);
    List.ReplaceItem(MovesIdx, 1, 1);
    Call ApplyMove(1);
    Call DrawBoardAndWait;
    If (Board[(BestMove % 100)] == GoK_BlackKing)
    {
        HasBlackKingMoved = 1;
    }
    If (Board[(BestMove % 100)] == GoK_BlackRook)
    {
        If (floor((BestMove / 100)) == VirtualBoard[1])
        {
            HasBlackRookQSMoved = 1;
        }
        If (floor((BestMove / 100)) == VirtualBoard[8])
        {
            HasBlackRookKSMoved = 1;
        }
    }
    If ((BestMove == GoK_BlackQueensideCastling) Or (BestMove == GoK_BlackKingsideCastling))
    {
        HasBlackKingMoved = 1;
        HasBlackCastled = 1;
    }
    Call AddBoardToHistory(1);
    Call GetRepetitionCount;
    If (RepetitionCountRes > 2)
    {
        Looks.Say("Draw!");
        Event.Broadcast("SoundDraw");
        GoK_IsGameSuspended = 1;
    }
    Else
    {
        Call IsDrawByMaterial;
        If (IsDrawRes == 1)
        {
            Looks.Say("Draw!");
            Event.Broadcast("SoundDraw");
            GoK_IsGameSuspended = 1;
        }
        Else
        {
            Call IsWhiteKingCheckMate;
            If (IsWhiteKingCheckMateRes == 1)
            {
                Looks.Say("Checkmate!");
                Event.Broadcast("SoundCheckmate");
                GoK_IsGameSuspended = 1;
            }
            Else
            {
                Call IsDrawByStalemate(2);
                If (IsDrawRes == 1)
                {
                    Looks.Say("Draw!");
                    Event.Broadcast("SoundDraw");
                    GoK_IsGameSuspended = 1;
                }
                Else
                {
                    Call CalcBoardAttackedByMove(1);
                    If (IsWhiteChecked == 1)
                    {
                        Call SayAsync("Check!")(2);
                        Event.Broadcast("SoundCheck");
                    }
                }
            }
        }
    }
}

Define ExecuteInit (warp=false)
{
    ExecutionDepth = 0;
    IsExecutionRunning = 0;
    If (IsPlayerBlack == 1)
    {
        Call ExecuteEngineMove;
    }
}

Define ExecuteUserMove(string UserMove) (warp=false)
{
    Call EnterExecution;
    Call ExecuteUserMoveImpl(UserMove);
    Call ExitExecution;
}

Define ExecuteUserMoveImpl(string UserMoveParam) (warp=false)
{
    If (GoK_IsGameSuspended == 1)
    {
        Stop(this script);
    }
    Pieces_MovePieceFromIdx = floor((UserMoveParam / 100));
    Pieces_MovePieceToIdx = floor((UserMoveParam % 100));
    If (((UserMoveParam == GoK_BlackQueensideCastling) Or (UserMoveParam == GoK_BlackKingsideCastling)) Or ((UserMoveParam == GoK_WhiteQueensideCastling) Or (UserMoveParam == GoK_WhiteKingsideCastling)))
    {
        Pieces_MovePieceSpecial = UserMoveParam;
    }
    Else
    {
        Pieces_MovePieceSpecial = "";
    }
    Event.BroadcastAndWait("movepiece");
    Event.Broadcast("SoundMove");
    Stg_FromSquareIdx = -1;
    Stg_ToSquareIdx = -1;
    Event.BroadcastAndWait("fromsquareselected");
    Event.BroadcastAndWait("tosquareselected");
    Call GenerateMovesPublic(2);
    If (Not (List.ContainsItem(Moves2, UserMoveParam)))
    {
        Call ClearMoveList(2);
        Call AddMoveToList(UserMoveParam)(2);
        List.ReplaceItem(MovesIdx, 2, 1);
        Call ApplyMove(2);
        Call CalcBoardAttackedByMove(3);
        If (IsWhiteChecked == 1)
        {
            Call SayAsync("Invalid move - Check!")(2);
            Event.Broadcast("SoundInvalidMoveCheck");
        }
        Else
        {
            Call SayAsync("Invalid move!")(2);
            Event.Broadcast("SoundInvalidMove");
        }
        Call RevertMove(2);
        Call DrawBoardAndWait;
        Stop(this script);
    }
    UserMove = UserMoveParam;
    If (Operator.LetterOf(UserMove, (Variable.Length(UserMove) - 1)) == ".")
    {
        Looks.Say("Please select promotion piece");
        Event.BroadcastAndWait("selectpromotionpiecewhite");
        Looks.Say("");
        If (Pieces_SelectedPromotionPiece == GoK_WhiteQueen)
        {
            UserMove = (floor(UserMove) + 0.1);
        }
        Else
        {
            If (Pieces_SelectedPromotionPiece == GoK_WhiteRook)
            {
                UserMove = (floor(UserMove) + 0.2);
            }
            Else
            {
                If (Pieces_SelectedPromotionPiece == GoK_WhiteBishop)
                {
                    UserMove = (floor(UserMove) + 0.3);
                }
                Else
                {
                    If (Pieces_SelectedPromotionPiece == GoK_WhiteKnight)
                    {
                        UserMove = (floor(UserMove) + 0.4);
                    }
                }
            }
        }
    }
    Call GetMoveNotation(UserMove);
    Call ClearMoveList(2);
    Call AddMoveToList(UserMove)(2);
    List.ReplaceItem(MovesIdx, 2, 1);
    Call ApplyMove(2);
    Call DrawBoardAndWait;
    Call CalcBoardAttackedByMove(1);
    If (IsWhiteChecked == 1)
    {
        Call RevertMove(2);
        List.DeleteItem(BoardHistoryFiftyMoves, List.Length(BoardHistoryFiftyMoves));
        Call DrawBoardAndWait;
        Control.Wait(0);
        Call SayAsync("Invalid move - Check!")(2);
        Event.Broadcast("SoundInvalidMoveCheck");
        Stop(this script);
    }
    List.Add(GameMovesAN, MoveNotationRes);
    GameMoves = Operator.Join(GameMoves, MoveToZeroPadStr[floor((UserMove + 1))]);
    Looks.Think("Thinking...");
    Call DrawBoardAndWait;
    Control.Wait(0);
    SourceIdx = floor((UserMove / 100));
    TargetIdx = floor((UserMove % 100));
    If (Board[TargetIdx] == GoK_WhiteKing)
    {
        HasWhiteKingMoved = 1;
    }
    If (Board[TargetIdx] == GoK_WhiteRook)
    {
        If (SourceIdx == VirtualBoard[57])
        {
            HasWhiteRookQSMoved = 1;
        }
        If (SourceIdx == VirtualBoard[64])
        {
            HasWhiteRookKSMoved = 1;
        }
    }
    If ((UserMove == GoK_WhiteQueensideCastling) Or (UserMove == GoK_WhiteKingsideCastling))
    {
        HasWhiteCastled = 1;
        HasWhiteKingMoved = 1;
    }
    Call AddBoardToHistory(0);
    Call IsBlackKingCheckMate;
    If (IsBlackKingCheckMateRes == 1)
    {
        Looks.Say("Checkmate!");
        Event.Broadcast("SoundCheckmate");
        GoK_IsGameSuspended = 1;
    }
    Else
    {
        Call IsDrawByStalemate(1);
        If (IsDrawRes == 1)
        {
            Looks.Say("Draw!");
            Event.Broadcast("SoundDraw");
            GoK_IsGameSuspended = 1;
        }
        Else
        {
            Call GetRepetitionCount;
            If (RepetitionCountRes > 2)
            {
                Looks.Say("Draw!");
                Event.Broadcast("SoundDraw");
                GoK_IsGameSuspended = 1;
            }
            Else
            {
                Call IsDrawByMaterial;
                If (IsDrawRes == 1)
                {
                    Looks.Say("Draw!");
                    Event.Broadcast("SoundDraw");
                    GoK_IsGameSuspended = 1;
                }
                Else
                {
                    Call ExecuteEngineMove;
                }
            }
        }
    }
}

Define ExitExecution (warp=false)
{
    ExecutionDepth += -1;
    If (ExecutionDepth == 0)
    {
        IsExecutionRunning = 0;
        Event.BroadcastAndWait("inputmode");
    }
}

Define ExportBoardFEN(bool IsPlayerBlack)(bool IsPlayerTurn) (warp=true)
{
    ExportDataFEN = "";
    ExportDataFENLichess = "https://lichess.org/analysis/";
    Idx = 1;
    Repeat Until (Idx > 64)
    {
        If IsPlayerBlack
        {
            CurrentPiece = (0 - Board[(65 - Idx)]);
        }
        Else
        {
            CurrentPiece = Board[Idx];
        }
        If (CurrentPiece == GoK_BlackPawn)
        {
            CurrentValue = "p";
        }
        If (CurrentPiece == GoK_BlackKnight)
        {
            CurrentValue = "n";
        }
        If (CurrentPiece == GoK_BlackBishop)
        {
            CurrentValue = "b";
        }
        If (CurrentPiece == GoK_BlackRook)
        {
            CurrentValue = "r";
        }
        If (CurrentPiece == GoK_BlackQueen)
        {
            CurrentValue = "q";
        }
        If (CurrentPiece == GoK_BlackKing)
        {
            CurrentValue = "k";
        }
        If (CurrentPiece == GoK_WhitePawn)
        {
            CurrentValue = "P";
        }
        If (CurrentPiece == GoK_WhiteKnight)
        {
            CurrentValue = "N";
        }
        If (CurrentPiece == GoK_WhiteBishop)
        {
            CurrentValue = "B";
        }
        If (CurrentPiece == GoK_WhiteRook)
        {
            CurrentValue = "R";
        }
        If (CurrentPiece == GoK_WhiteQueen)
        {
            CurrentValue = "Q";
        }
        If (CurrentPiece == GoK_WhiteKing)
        {
            CurrentValue = "K";
        }
        If (CurrentPiece == 0)
        {
            IdxSub = Idx;
            Repeat Until (((IdxSub % 8) == 0) Or (((Not (IsPlayerBlack)) And (Not ((Board[(IdxSub + 1)] == 0)))) Or (IsPlayerBlack And (Not ((Board[(65 - (IdxSub + 1))] == 0))))))
            {
                IdxSub += 1;
            }
            CurrentValue = ((IdxSub - Idx) + 1);
            Idx += (IdxSub - Idx);
        }
        ExportDataFEN = Operator.Join(ExportDataFEN, CurrentValue);
        ExportDataFENLichess = Operator.Join(ExportDataFENLichess, CurrentValue);
        If (((Idx % 8) == 0) And (Idx < 64))
        {
            ExportDataFEN = Operator.Join(ExportDataFEN, "/");
            ExportDataFENLichess = Operator.Join(ExportDataFENLichess, "/");
        }
        Idx += 1;
    }
    If ((IsPlayerBlack And IsPlayerTurn) Or ((Not (IsPlayerBlack)) And (Not (IsPlayerTurn))))
    {
        ExportDataFEN = Operator.Join(ExportDataFEN, " b");
        ExportDataFENLichess = Operator.Join(ExportDataFENLichess, "_b");
    }
    Else
    {
        ExportDataFEN = Operator.Join(ExportDataFEN, " w");
        ExportDataFENLichess = Operator.Join(ExportDataFENLichess, "_w");
    }
}

Define ExportMovesPGN (warp=true)
{
    ExportMovesPGN = "";
    Idx = 1;
    Repeat (List.Length(GameMovesAN))
    {
        If ((Idx % 2) == 1)
        {
            ExportMovesPGN = Operator.Join(ExportMovesPGN, Operator.Join((((Idx - 1) / 2) + 1), ". "));
        }
        ExportMovesPGN = Operator.Join(ExportMovesPGN, Operator.Join(GameMovesAN[Idx], " "));
        Idx += 1;
    }
}

Define FillBoard (warp=true)
{
    List.DeleteItem(VirtualBoard, all);
    Idx = 1;
    Repeat (64)
    {
        If (IsPlayerBlack == 0)
        {
            List.Add(VirtualBoard, Idx);
        }
        Else
        {
            List.Add(VirtualBoard, (((IdxToRank[Idx] - 1) * 8) + (9 - IdxToFile[Idx])));
        }
        Idx += 1;
    }
    List.DeleteItem(Board, all);
    Repeat (64)
    {
        List.Add(Board, 0);
    }
    List.ReplaceItem(Board, VirtualBoard[1], GoK_BlackRook);
    List.ReplaceItem(Board, VirtualBoard[2], GoK_BlackKnight);
    List.ReplaceItem(Board, VirtualBoard[3], GoK_BlackBishop);
    List.ReplaceItem(Board, VirtualBoard[4], GoK_BlackQueen);
    List.ReplaceItem(Board, VirtualBoard[5], GoK_BlackKing);
    List.ReplaceItem(Board, VirtualBoard[6], GoK_BlackBishop);
    List.ReplaceItem(Board, VirtualBoard[7], GoK_BlackKnight);
    List.ReplaceItem(Board, VirtualBoard[8], GoK_BlackRook);
    Idx = 9;
    Repeat (8)
    {
        List.ReplaceItem(Board, VirtualBoard[Idx], GoK_BlackPawn);
        Idx += 1;
    }
    Idx = 49;
    Repeat (8)
    {
        List.ReplaceItem(Board, VirtualBoard[Idx], GoK_WhitePawn);
        Idx += 1;
    }
    List.ReplaceItem(Board, VirtualBoard[57], GoK_WhiteRook);
    List.ReplaceItem(Board, VirtualBoard[58], GoK_WhiteKnight);
    List.ReplaceItem(Board, VirtualBoard[59], GoK_WhiteBishop);
    List.ReplaceItem(Board, VirtualBoard[60], GoK_WhiteQueen);
    List.ReplaceItem(Board, VirtualBoard[61], GoK_WhiteKing);
    List.ReplaceItem(Board, VirtualBoard[62], GoK_WhiteBishop);
    List.ReplaceItem(Board, VirtualBoard[63], GoK_WhiteKnight);
    List.ReplaceItem(Board, VirtualBoard[64], GoK_WhiteRook);
}

Define FindAndAddSafePawnPush(string SourceIdx)(string TargetIdx)(string AttackedPiece)(string Factor) (warp=true)
{
    If ((TargetIdx > 8) And (TargetIdx < 57))
    {
        If ((Board[(SourceIdx + 0)] == (GoK_WhitePawn * Factor)) And (Board[(TargetIdx + 0)] == 0))
        {
            If ((Not ((abs((TargetIdx - SourceIdx)) == 16))) Or (Board[((TargetIdx + SourceIdx) / 2)] == 0))
            {
                If (((AttackedPiece < 0) And (BoardAttackedByWhite[(TargetIdx + 0)] == 0)) Or ((AttackedPiece > 0) And (BoardAttackedByBlack[(TargetIdx + 0)] == 0)))
                {
                    Call TaperedEval.Add((-20 * Factor))((-12 * Factor));
                }
            }
        }
    }
}

Define GenerateMovesForSource(string Depth)(string SourceIdx)(bool CalcAttackState)(bool CapturesOnly) (warp=true)
{
    SourcePieceOuter2 = Board[(SourceIdx + 0)];
    File = IdxToFile[(SourceIdx + 0)];
    Rank = IdxToRank[(SourceIdx + 0)];
    Call //("Pawn moves (generated via code logic)");
    If (SourcePieceOuter2 == GoK_BlackPawn)
    {
        If (CalcAttackState Or (Board[(SourceIdx + 7)] < 0))
        {
            If (File > 1)
            {
                Call AddMoveImpl(SourceIdx)((SourceIdx + 7))(Depth)(CalcAttackState)(CapturesOnly);
            }
        }
        If (CalcAttackState Or (Board[(SourceIdx + 9)] < 0))
        {
            If (File < 8)
            {
                Call AddMoveImpl(SourceIdx)((SourceIdx + 9))(Depth)(CalcAttackState)(CapturesOnly);
            }
        }
        If (Not (CalcAttackState))
        {
            If (Board[(SourceIdx + 8)] == 0)
            {
                If CapturesOnly
                {
                    Call AddPotentialQuiescenceMove(SourceIdx)((SourceIdx + 8))(GoK_BlackPawn)(Depth);
                }
                Else
                {
                    Call AddMoveImpl(SourceIdx)((SourceIdx + 8))(Depth)(CalcAttackState)(CapturesOnly);
                }
                If ((Rank == 2) And (Board[(SourceIdx + 16)] == 0))
                {
                    If CapturesOnly
                    {
                        Call AddPotentialQuiescenceMove(SourceIdx)((SourceIdx + 16))(GoK_BlackPawn)(Depth);
                    }
                    Else
                    {
                        Call AddMoveImpl(SourceIdx)((SourceIdx + 16))(Depth)(CalcAttackState)(CapturesOnly);
                    }
                }
            }
        }
        If (Not ((EnPassantTarget[Depth] == "")))
        {
            TargetIdx = EnPassantTarget[Depth];
            If ((Not (CalcAttackState)) And (IdxToRank[SourceIdx] == IdxToRank[TargetIdx]))
            {
                If (abs((IdxToFile[SourceIdx] - IdxToFile[TargetIdx])) == 1)
                {
                    Call AddMoveImpl(SourceIdx)((TargetIdx + 8))(Depth)(CalcAttackState)(CapturesOnly);
                }
            }
        }
        Stop(this script);
    }
    If (SourcePieceOuter2 == GoK_WhitePawn)
    {
        If (CalcAttackState Or (Board[(SourceIdx - 9)] > 0))
        {
            If (File > 1)
            {
                Call AddMoveImpl(SourceIdx)((SourceIdx - 9))(Depth)(CalcAttackState)(CapturesOnly);
            }
        }
        If (CalcAttackState Or (Board[(SourceIdx - 7)] > 0))
        {
            If (File < 8)
            {
                Call AddMoveImpl(SourceIdx)((SourceIdx - 7))(Depth)(CalcAttackState)(CapturesOnly);
            }
        }
        If (Not (CalcAttackState))
        {
            If (Board[(SourceIdx - 8)] == 0)
            {
                If CapturesOnly
                {
                    Call AddPotentialQuiescenceMove(SourceIdx)((SourceIdx - 8))(GoK_WhitePawn)(Depth);
                }
                Else
                {
                    Call AddMoveImpl(SourceIdx)((SourceIdx - 8))(Depth)(CalcAttackState)(CapturesOnly);
                }
                If ((Rank == 7) And (Board[(SourceIdx - 16)] == 0))
                {
                    If CapturesOnly
                    {
                        Call AddPotentialQuiescenceMove(SourceIdx)((SourceIdx - 16))(GoK_WhitePawn)(Depth);
                    }
                    Else
                    {
                        Call AddMoveImpl(SourceIdx)((SourceIdx - 16))(Depth)(CalcAttackState)(CapturesOnly);
                    }
                }
            }
        }
        If (Not ((EnPassantTarget[(Depth + 0)] == "")))
        {
            TargetIdx = EnPassantTarget[(Depth + 0)];
            If ((Not (CalcAttackState)) And (Rank == IdxToRank[(TargetIdx + 0)]))
            {
                If (abs((File - IdxToFile[(TargetIdx + 0)])) == 1)
                {
                    Call AddMoveImpl(SourceIdx)((TargetIdx - 8))(Depth)(CalcAttackState)(CapturesOnly);
                }
            }
        }
        Stop(this script);
    }
    Call //("Non-pawn moves (generated via lookup tables)");
    SourcePieceOuter2 = abs(SourcePieceOuter2);
    If (SourcePieceOuter2 == GoK_BlackRook)
    {
        Call AddSlidingMove(SourceIdx)(Depth)(CalcAttackState)(CapturesOnly)((1 == 1));
        Stop(this script);
    }
    If (SourcePieceOuter2 == GoK_BlackBishop)
    {
        Call AddSlidingMove(SourceIdx)(Depth)(CalcAttackState)(CapturesOnly)((1 == 0));
        Stop(this script);
    }
    If (SourcePieceOuter2 == GoK_BlackKnight)
    {
        Call AddLookupMove(SourceIdx)(Depth)(CalcAttackState)(CapturesOnly)((1 == 0));
        Stop(this script);
    }
    If (SourcePieceOuter2 == GoK_BlackKing)
    {
        Call AddLookupMove(SourceIdx)(Depth)(CalcAttackState)(CapturesOnly)((1 == 1));
        Stop(this script);
    }
    If (SourcePieceOuter2 == GoK_BlackQueen)
    {
        Call AddSlidingMove(SourceIdx)(Depth)(CalcAttackState)(CapturesOnly)((1 == 1));
        Call AddSlidingMove(SourceIdx)(Depth)(CalcAttackState)(CapturesOnly)((1 == 0));
        Stop(this script);
    }
}

Define GenerateMovesForSourceEx(string Depth)(string SourceIdx)(bool CalcAttackState)(bool CapturesOnly) (warp=true)
{
    List.DeleteAll(CalcMovesMoveList);
    List.DeleteAll(CalcMovesScoreList);
    IsPotentialNonCapQuiescMove = 0;
    If CapturesOnly
    {
        Call IsQuiescentCheckCond(Depth);
        IsPotentialNonCapQuiescMove = IsQuiescentCheckRes;
    }
    GenerateMovesRequiresAttackRecalc = 0;
    Call GenerateMovesForSource(Depth)(SourceIdx)(CalcAttackState)(CapturesOnly);
    Call SortMoveList(Depth);
}

Define GenerateMovesImpl(string Depth)(bool CalcAttackState)(bool CapturesOnly)(bool IsBlackMove) (warp=true)
{
    If (Not (CalcAttackState))
    {
        If (BoardAttackedCalculated[Depth] == 0)
        {
            If IsBlackMove
            {
                Call GenerateMovesForSource(Depth)(BlackKingIdx)(CalcAttackState)(CapturesOnly);
                If (GenerateMovesRequiresAttackRecalc == 1)
                {
                    Stop(this script);
                }
            }
            Else
            {
                Call GenerateMovesForSource(Depth)(WhiteKingIdx)(CalcAttackState)(CapturesOnly);
                If (GenerateMovesRequiresAttackRecalc == 1)
                {
                    Stop(this script);
                }
            }
            If (Not (CapturesOnly))
            {
                If IsBlackMove
                {
                    If ((Operator.LetterOf(CastlingState[Depth], 1) == 0) And (Operator.LetterOf(CastlingState[Depth], 2) == 0))
                    {
                        If (Operator.LetterOf(CastlingState[Depth], 4) == 0)
                        {
                            GenerateMovesRequiresAttackRecalc = 1;
                            Stop(this script);
                        }
                        If (Operator.LetterOf(CastlingState[Depth], 3) == 0)
                        {
                            GenerateMovesRequiresAttackRecalc = 1;
                            Stop(this script);
                        }
                    }
                }
                Else
                {
                    If ((Operator.LetterOf(CastlingState[Depth], 5) == 0) And (Operator.LetterOf(CastlingState[Depth], 6) == 0))
                    {
                        If (Operator.LetterOf(CastlingState[Depth], 8) == 0)
                        {
                            GenerateMovesRequiresAttackRecalc = 1;
                            Stop(this script);
                        }
                        If (Operator.LetterOf(CastlingState[Depth], 7) == 0)
                        {
                            GenerateMovesRequiresAttackRecalc = 1;
                            Stop(this script);
                        }
                    }
                }
            }
        }
    }
    List.DeleteAll(CalcMovesScoreList);
    List.DeleteAll(CalcMovesMoveList);
    Call PrepareCurrentKillerMoves(Depth);
    Call ClearMoveList(Depth);
    SourceIdxOuter2 = 1;
    Repeat (64)
    {
        CurrentPiece = Board[(SourceIdxOuter2 + 0)];
        If ((IsBlackMove And (CurrentPiece > 0)) Or ((Not (IsBlackMove)) And (CurrentPiece < 0)))
        {
            Call GenerateMovesForSource(Depth)(SourceIdxOuter2)(CalcAttackState)(CapturesOnly);
        }
        SourceIdxOuter2 += 1;
    }
    Call //("Castling moves");
    If ((Not (CalcAttackState)) And (Not (CapturesOnly)))
    {
        If IsBlackMove
        {
            If ((Operator.LetterOf(CastlingState[Depth], 1) == 0) And (Operator.LetterOf(CastlingState[Depth], 2) == 0))
            {
                If (Operator.LetterOf(CastlingState[Depth], 4) == 0)
                {
                    If ((((Board[VirtualBoard[1]] == GoK_BlackRook) And (Board[VirtualBoard[2]] == 0)) And ((Board[VirtualBoard[3]] == 0) And (Board[VirtualBoard[4]] == 0))) And (Board[VirtualBoard[5]] == GoK_BlackKing))
                    {
                        If ((Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], VirtualBoard[3]) == 0) And ((Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], VirtualBoard[4]) == 0) And (Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], VirtualBoard[5]) == 0)))
                        {
                            Call AddSpecialMove(GoK_BlackQueensideCastling)(Depth);
                        }
                    }
                }
                If (Operator.LetterOf(CastlingState[Depth], 3) == 0)
                {
                    If (((Board[VirtualBoard[5]] == GoK_BlackKing) And (Board[VirtualBoard[6]] == 0)) And ((Board[VirtualBoard[7]] == 0) And (Board[VirtualBoard[8]] == GoK_BlackRook)))
                    {
                        If ((Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], VirtualBoard[5]) == 0) And ((Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], VirtualBoard[6]) == 0) And (Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], VirtualBoard[7]) == 0)))
                        {
                            Call AddSpecialMove(GoK_BlackKingsideCastling)(Depth);
                        }
                    }
                }
            }
        }
        Else
        {
            If ((Operator.LetterOf(CastlingState[Depth], 5) == 0) And (Operator.LetterOf(CastlingState[Depth], 6) == 0))
            {
                If (Operator.LetterOf(CastlingState[Depth], 8) == 0)
                {
                    If (((Board[VirtualBoard[57]] == GoK_WhiteRook) And (Board[VirtualBoard[58]] == 0)) And ((Board[VirtualBoard[59]] == 0) And ((Board[VirtualBoard[60]] == 0) And (Board[VirtualBoard[61]] == GoK_WhiteKing))))
                    {
                        If ((Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], VirtualBoard[59]) == 0) And ((Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], VirtualBoard[60]) == 0) And (Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], VirtualBoard[61]) == 0)))
                        {
                            Call AddSpecialMove(GoK_WhiteQueensideCastling)(Depth);
                        }
                    }
                }
                If (Operator.LetterOf(CastlingState[Depth], 7) == 0)
                {
                    If (((Board[VirtualBoard[62]] == 0) And (Board[VirtualBoard[61]] == GoK_WhiteKing)) And ((Board[VirtualBoard[63]] == 0) And (Board[VirtualBoard[64]] == GoK_WhiteRook)))
                    {
                        If ((Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], VirtualBoard[61]) == 0) And ((Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], VirtualBoard[62]) == 0) And (Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], VirtualBoard[63]) == 0)))
                        {
                            Call AddSpecialMove(GoK_WhiteKingsideCastling)(Depth);
                        }
                    }
                }
            }
        }
    }
    Call //("Move ordering");
    If (Not (CalcAttackState))
    {
        If (Depth == 1)
        {
            Idx = 1;
            Repeat (List.Length(CalcMovesMoveList))
            {
                CurrentValue = MinMaxPly1Scores[floor((CalcMovesMoveList[Idx] * 10))];
                If (Not ((CurrentValue == "")))
                {
                    List.ReplaceItem(CalcMovesScoreList, Idx, (10000000 + CurrentValue));
                }
                Else
                {
                    List.ReplaceItem(CalcMovesScoreList, Idx, (0 + CalcMovesScoreList[Idx]));
                }
                Idx += 1;
            }
        }
        Call SortMoveList(Depth);
    }
}

Define GenerateMovesImplWrapper(string Depth)(bool CalcAttackState)(bool CapturesOnly) (warp=true)
{
    If (IsBlockProfilerEnabled == 1)
    {
        Call Profile_MethodEnter(((((3 * MaxSearchDepthStackFrames) - (MaxSearchDepthStackFrames * CapturesOnly)) - ((2 * MaxSearchDepthStackFrames) * CalcAttackState)) + Depth));
    }
    IsPotentialNonCapQuiescMove = 0;
    If CapturesOnly
    {
        Call IsQuiescentCheckCond(Depth);
        IsPotentialNonCapQuiescMove = IsQuiescentCheckRes;
    }
    GenerateMovesRequiresAttackRecalc = 0;
    Call GenerateMovesImpl(Depth)(CalcAttackState)(CapturesOnly)(((Depth % 2) == 1));
    If (IsBlockProfilerEnabled == 1)
    {
        Call Profile_MethodExit(((((3 * MaxSearchDepthStackFrames) - (MaxSearchDepthStackFrames * CapturesOnly)) - ((2 * MaxSearchDepthStackFrames) * CalcAttackState)) + Depth));
    }
}

Define GenerateMovesPublic(string Depth) (warp=true)
{
    Idx = 1;
    Repeat (64)
    {
        If (Board[Idx] == GoK_WhiteKing)
        {
            WhiteKingIdx = Idx;
        }
        Else
        {
            If (Board[Idx] == GoK_BlackKing)
            {
                BlackKingIdx = Idx;
            }
        }
        Idx += 1;
    }
    Call CalcBoardAttackedByMove((Depth + 1));
    Call StoreAttackInfo((Depth + 1))(Depth);
    List.ReplaceItem(BoardAttackedCalculated, Depth, 1);
    Call SetInitialEnPassantTarget(Depth);
    List.ReplaceItem(CastlingState, Depth, Operator.Join(Operator.Join(Operator.Join(HasBlackCastled, HasBlackKingMoved), Operator.Join(HasBlackRookKSMoved, HasBlackRookQSMoved)), Operator.Join(Operator.Join(HasWhiteCastled, HasWhiteKingMoved), Operator.Join(HasWhiteRookKSMoved, HasWhiteRookQSMoved))));
    Call GenerateMovesImplWrapper(Depth)((1 == 0))((1 == 0));
    List.ReplaceItem(EnPassantTarget, Depth, "");
    List.ReplaceItem(BoardAttackedCalculated, Depth, 0);
    List.ReplaceItem(CastlingState, Depth, "");
}

Define GetAttackForce(bool Black) (warp=true)
{
    If Black
    {
        AttackForce = ((BlackQueenCountLocal * 14) + ((BlackRookCountLocal * 6) + ((BlackMinorCountLocal - BlackRookCountLocal) * 3)));
    }
    Else
    {
        AttackForce = ((WhiteQueenCountLocal * 14) + ((WhiteRookCountLocal * 6) + ((WhiteMinorCountLocal - WhiteRookCountLocal) * 3)));
    }
}

Define GetBestMoveBlitz (warp=false)
{
    MaxSearchDepth = 20;
    ThinkTimeLimit = ((Level - 2) * 2);
    ThinkTimeStart = (Sensing.DaysSince2000() * 86400);
    IsMinMaxTimeout = 0;
    IsDeepeningDone = 0;
    IdxDeepening = 1;
    BestMove = "";
    BestMinMaxRes = "";
    ThinkTimeLimitMinMax = ThinkTimeLimit;
    Repeat ((((Level - 2) * 2) * (2 - IsScratch3)))
    {
        If ((IsMinMaxTimeout == 0) And ((IdxDeepening == 1) Or (abs(BestMinMaxRes) < AbsMinCheckmateEval)))
        {
            Call AlphaBetaMinMax(-100000)(100000)(1)((IdxDeepening + 1))((IdxDeepening == 1))((MaxSearchDepth - IdxDeepening))((1 == 1));
            If (Not ((MinMaxMoveRes == "")))
            {
                If ((BestMove == "") Or List.ContainsItem(MinMaxPly1EvalMoves, BestMove))
                {
                    BestMove = MinMaxMoveRes;
                    BestMinMaxRes = MinMaxEvalRes;
                }
            }
        }
        IdxDeepening += 1;
    }
}

Define GetBestMoveEasy (warp=false)
{
    ThinkTimeStart = (Sensing.DaysSince2000() * 86400);
    ThinkTimeLimitMinMax = 10;
    BestMove = "";
    If (Level == 1)
    {
        JuniorDistQuota = 100;
        JuniorSearchQuota = 0;
    }
    Else
    {
        If (Level == 2)
        {
            JuniorDistQuota = 40;
            JuniorSearchQuota = 20;
        }
    }
    Call AlphaBetaMinMax(-100000)(100000)(1)(2)((1 == 0))(3)((1 == 1));
    BestMove = MinMaxMoveRes;
    CurrentValue = Operator.Random(1 , 100);
    If ((CurrentValue > ((JuniorSearchQuota + 100) / 2)) Or (((BoardAttackedByWhite[floor((BestMove / 100))] == 0) And (Board[floor((BestMove % 100))] == 0)) And (CurrentValue > JuniorSearchQuota)))
    {
        Call GenerateMovesPublic(1);
        List.ReplaceItem(MovesIdx, 1, Operator.Random(1 , ceiling((List.Length(Moves1) * (JuniorDistQuota / 100)))));
        Call ApplyMove(1);
        Call CalcBoardAttackedByMove(2);
        Call RevertMove(1);
        Repeat Until (IsBlackChecked == 0)
        {
            List.ReplaceItem(MovesIdx, 1, Operator.Random(1 , List.Length(Moves1)));
            Call ApplyMove(1);
            Call CalcBoardAttackedByMove(2);
            Call RevertMove(1);
        }
        BestMove = Moves1[MovesIdx[1]];
    }
}

Define GetBestMoveMedDiff (warp=false)
{
    MaxSearchDepth = (MaxSearchDepthStackFrames - 5);
    IsEvalStable = 1;
    If (Level == 5)
    {
        If (IsEndgame2 == 0)
        {
            ThinkTimeLimit = 15;
        }
        Else
        {
            ThinkTimeLimit = 15;
        }
    }
    Else
    {
        If (IsEndgame == 0)
        {
            ThinkTimeLimit = 25;
        }
        Else
        {
            If (IsEndgame2 == 0)
            {
                ThinkTimeLimit = 20;
            }
            Else
            {
                ThinkTimeLimit = 15;
            }
        }
    }
    If (CustomThinkTime > 0)
    {
        ThinkTimeLimit = CustomThinkTime;
    }
    List.DeleteAll(AWSize);
    List.Add(AWSize, 25);
    ThinkTimeStart = (Sensing.DaysSince2000() * 86400);
    ThinkTimeIteration = 0;
    IsMinMaxTimeout = 0;
    IsDeepeningDone = 0;
    IdxDeepening = 1;
    BestMove = "";
    BestMinMaxRes = "";
    Repeat Until (IsDeepeningDone == 1)
    {
        If (IsScratch3 == 1)
        {
            QuiescenceDepth = 6;
        }
        Else
        {
            QuiescenceDepth = (MaxSearchDepth - IdxDeepening);
        }
        AWCount = 1;
        AWDelta = AWSize[1];
        If ((1 == 0) And ((IdxDeepening > (8 - (4 * IsScratch3))) And ((Not ((BestMinMaxRes == ""))) And (abs(BestMinMaxRes) < AbsMinCheckmateEval))))
        {
            AWAlpha = (BestMinMaxRes - AWDelta);
            AWBeta = (BestMinMaxRes + AWDelta);
        }
        Else
        {
            AWAlpha = -100000;
            AWBeta = 100000;
        }
        IsAWDone = 0;
        ThinkTimeIteration = (Sensing.DaysSince2000() * 86400);
        Repeat Until ((IsAWDone == 1) Or (IsMinMaxTimeout == 1))
        {
            ThinkTimeLimitMinMax = ThinkTimeLimit;
            Call AlphaBetaMinMax(AWAlpha)(AWBeta)(1)((IdxDeepening + 1))((IdxDeepening == 1))(QuiescenceDepth)((1 == 1));
            Call Log(IdxDeepening)(" : AW : ")(AWAlpha)(" : ")(AWBeta)(" : ")(MinMaxResults[1])(Operator.Join(" : ", ((Not ((MinMaxResults[1] == ""))) And ((Not ((MinMaxResults[1] > AWAlpha))) Or (Not ((MinMaxResults[1] < AWBeta)))))));
            If ((IsMinMaxTimeout == 0) And ((Not ((MinMaxResults[1] == ""))) And ((Not ((MinMaxResults[1] > AWAlpha))) Or (Not ((MinMaxResults[1] < AWBeta))))))
            {
                IsEvalStable = 0;
                IsMinMaxTimeout = 0;
                AWCount += 1;
                If ((Not ((AWCount > List.Length(AWSize)))) And (abs(MinMaxResults[1]) < AbsMinCheckmateEval))
                {
                    AWDelta = Operator.Round((AWDelta + AWSize[AWCount]));
                    If (Not ((MinMaxResults[1] > AWAlpha)))
                    {
                        AWAlpha += (0 - AWDelta);
                        If (Not ((MinMaxResults[1] > AWAlpha)))
                        {
                            AWAlpha = (MinMaxResults[1] - AWDelta);
                        }
                        If (1 == 0)
                        {
                            AWBeta = Operator.Round(((AWAlpha + (3 * AWBeta)) / 4));
                        }
                    }
                    Else
                    {
                        AWBeta += AWDelta;
                        If (Not ((MinMaxResults[1] < AWBeta)))
                        {
                            AWBeta = (MinMaxResults[1] + AWDelta);
                        }
                    }
                }
                Else
                {
                    AWAlpha = -100000;
                    AWBeta = 100000;
                }
            }
            Else
            {
                IsAWDone = 1;
                IsEvalStable = 1;
            }
        }
        If ((AWAlpha == -100000) And (AWBeta == 100000))
        {
            ThinkTimeIteration = ((Sensing.DaysSince2000() * 86400) - ThinkTimeIteration);
        }
        Else
        {
            ThinkTimeIteration = ThinkTimeLimit;
        }
        If (Not ((MinMaxMoveRes == "")))
        {
            If ((BestMove == "") Or List.ContainsItem(MinMaxPly1EvalMoves, BestMove))
            {
                BestMove = MinMaxMoveRes;
                BestMinMaxRes = MinMaxEvalRes;
            }
            Call OnEvaluationChanged(BestMinMaxRes);
        }
        If (((IsMinMaxTimeout == 1) Or (IdxDeepening == MaxSearchDepth)) Or (abs(BestMinMaxRes) > (AbsMaxCheckmateEval - (IdxDeepening * 1000))))
        {
            IsDeepeningDone = 1;
        }
        Else
        {
            IdxDeepening += 1;
        }
    }
}

Define GetBoardString (warp=true)
{
    GetBoardStringRes = "";
    Idx = 1;
    Repeat (64)
    {
        GetBoardStringRes = Operator.Join(GetBoardStringRes, Operator.Join(Board[Idx], ","));
        Idx += 1;
    }
}

Define GetCurrentMove(num Depth) (warp=true)
{
    CurrentMove = Moves[(((Depth - 1) * MaxMovesPerGeneration) + MovesIdx[(Depth + 0)])];
}

Define GetKingProtection(string KingIdx)(bool IsBlack) (warp=true)
{
    KingProtection = 0;
    KingRank = IdxToRank[KingIdx];
    KingFile = IdxToFile[KingIdx];
    If ((KingFile == 1) Or (KingFile == 3))
    {
        KingFile = 2;
        If IsBlack
        {
            KingProtection += -10;
        }
        Else
        {
            KingProtection += 10;
        }
    }
    If ((KingFile == 6) Or (KingFile == 8))
    {
        KingFile = 7;
        If IsBlack
        {
            KingProtection += -10;
        }
        Else
        {
            KingProtection += 10;
        }
    }
    If IsBlack
    {
        File = (KingFile - 1);
        Repeat (3)
        {
            WhitePawnForwardRank = PawnAdvancePerFile[(File + 8)];
            BlackPawnBackwardRank = PawnAdvancePerFile[(File + 16)];
            If ((BlackPawnBackwardRank > 0) And (KingRank < BlackPawnBackwardRank))
            {
                KingProtection += PawnShelter[(((File - 1) * 8) + BlackPawnBackwardRank)];
            }
            Else
            {
                KingProtection += PawnShelter[(((File - 1) * 8) + 1)];
            }
            If ((abs((IdxToFile[WhiteKingIdx] - File)) > 1) Or (1 == 1))
            {
                If ((WhitePawnForwardRank > 0) And (KingRank < WhitePawnForwardRank))
                {
                    KingProtection += (0 - Operator.Round((PawnStorm[(((File - 1) * 8) + WhitePawnForwardRank)] * 1)));
                }
                Else
                {
                    KingProtection += (0 - PawnStorm[(((File - 1) * 8) + 1)]);
                }
            }
            File += 1;
        }
    }
    Else
    {
        File = (KingFile - 1);
        Repeat (3)
        {
            WhitePawnBackwardRank = PawnAdvancePerFile[File];
            BlackPawnForwardRank = PawnAdvancePerFile[(File + 24)];
            If ((WhitePawnBackwardRank > 0) And (KingRank > WhitePawnBackwardRank))
            {
                KingProtection += PawnShelter[(((File - 1) * 8) + (9 - WhitePawnBackwardRank))];
            }
            Else
            {
                KingProtection += PawnShelter[(((File - 1) * 8) + 1)];
            }
            If ((abs((IdxToFile[BlackKingIdx] - File)) > 1) Or (1 == 0))
            {
                If ((BlackPawnForwardRank > 0) And (KingRank > BlackPawnForwardRank))
                {
                    KingProtection += (0 - Operator.Round((PawnStorm[(((File - 1) * 8) + (9 - BlackPawnForwardRank))] * 1)));
                }
                Else
                {
                    KingProtection += (0 - PawnStorm[(((File - 1) * 8) + 1)]);
                }
            }
            File += 1;
        }
    }
}

Define GetMoveNotation(num Move) (warp=true)
{
    Call GetVirtualMove(Move);
    MoveNotationRes = "";
    If ((VirtualMove == GoK_BlackKingsideCastling) Or (VirtualMove == GoK_WhiteKingsideCastling))
    {
        MoveNotationRes = "O-O";
        Stop(this script);
    }
    If ((VirtualMove == GoK_BlackQueensideCastling) Or (VirtualMove == GoK_WhiteQueensideCastling))
    {
        MoveNotationRes = "O-O-O";
        Stop(this script);
    }
    SourceIdx = floor((VirtualMove / 100));
    TargetIdx = floor((VirtualMove % 100));
    CurrentPiece = Board[floor((Move / 100))];
    If ((CurrentPiece == GoK_BlackBishop) Or (CurrentPiece == GoK_WhiteBishop))
    {
        MoveNotationRes = "B";
    }
    If ((CurrentPiece == GoK_BlackKing) Or (CurrentPiece == GoK_WhiteKing))
    {
        MoveNotationRes = "K";
    }
    If ((CurrentPiece == GoK_BlackRook) Or (CurrentPiece == GoK_WhiteRook))
    {
        MoveNotationRes = "R";
    }
    If ((CurrentPiece == GoK_BlackKnight) Or (CurrentPiece == GoK_WhiteKnight))
    {
        MoveNotationRes = "N";
    }
    If ((CurrentPiece == GoK_WhiteQueen) Or (CurrentPiece == GoK_BlackQueen))
    {
        MoveNotationRes = "Q";
    }
    X = IdxToFile[SourceIdx];
    Y = (9 - IdxToRank[SourceIdx]);
    MoveNotationRes = Operator.Join(MoveNotationRes, Operator.Join(Operator.LetterOf("abcdefgh", X), Y));
    If (Not ((Board[floor((Move % 100))] == 0)))
    {
        MoveNotationRes = Operator.Join(MoveNotationRes, "x");
    }
    X = IdxToFile[TargetIdx];
    Y = (9 - IdxToRank[TargetIdx]);
    MoveNotationRes = Operator.Join(MoveNotationRes, Operator.Join(Operator.LetterOf("abcdefgh", X), Y));
    If (Operator.LetterOf(VirtualMove, (Variable.Length(VirtualMove) - 1)) == ".")
    {
        If (Operator.LetterOf(VirtualMove, Variable.Length(VirtualMove)) == 1)
        {
            MoveNotationRes = Operator.Join(MoveNotationRes, "=Q");
        }
        If (Operator.LetterOf(VirtualMove, Variable.Length(VirtualMove)) == 2)
        {
            MoveNotationRes = Operator.Join(MoveNotationRes, "=R");
        }
        If (Operator.LetterOf(VirtualMove, Variable.Length(VirtualMove)) == 3)
        {
            MoveNotationRes = Operator.Join(MoveNotationRes, "=B");
        }
        If (Operator.LetterOf(VirtualMove, Variable.Length(VirtualMove)) == 4)
        {
            MoveNotationRes = Operator.Join(MoveNotationRes, "=N");
        }
    }
}

Define GetMoveScore(string SourcePieceParam)(string TargetPieceParam)(string FromIdx)(string ToIdx)(string Move)(string Depth) (warp=true)
{
    MoveScoreRes = 0;
    Factor = (((SourcePieceParam > 0) * 2) - 1);
    Call //("1: Hash moves, handled by staged move generator / PickMove()");
    If (CheckedState[(Depth + 0)] == 1)
    {
        Call //("2: Check evasions");
        Delta = 0;
        If (IsAttacked == 0)
        {
            Delta = 1000;
        }
        If (abs(SourcePieceParam) == GoK_BlackKing)
        {
            MoveScoreRes = (9000000 * Factor);
            Stop(this script);
        }
        If (Operator.LetterOf(CheckedStateAttackLines[(Depth + 0)], ToIdx) == 1)
        {
            MoveScoreRes = (8900000 * Factor);
            Stop(this script);
        }
    }
    If (Operator.LetterOf(Move, (Variable.Length(Move) - 1)) == ".")
    {
        Call //("Promotions");
        MoveScoreRes = ((7500000 - Operator.LetterOf(Move, Variable.Length(Move))) * Factor);
        Stop(this script);
    }
    If (Not ((TargetPieceParam == 0)))
    {
        MvvLvaScore = ((PieceIdxLookup[abs(TargetPieceParam)] * 100) + (7 - PieceIdxLookup[abs(SourcePieceParam)]));
        If (Quiescence[Depth] == 1)
        {
            MoveScoreRes = ((7000000 + MvvLvaScore) * Factor);
            Stop(this script);
        }
        Else
        {
            Call ClearMoveList((Depth + 2));
            Call AddMoveToList(Move)((Depth + 2));
            List.ReplaceItem(MovesIdx, (Depth + 2), 1);
            Call ApplyMoveLight((Depth + 2));
            Call SEE((Depth + 2));
            Call RevertMoveLight((Depth + 2));
            If ((((Depth % 2) == 1) And (Not ((SEE.Result < 0)))) Or (((Depth % 2) == 0) And (Not ((SEE.Result > 0)))))
            {
                MoveScoreRes = ((7000000 + MvvLvaScore) * Factor);
                Stop(this script);
            }
            Else
            {
                MoveScoreRes = (MvvLvaScore * Factor);
                Stop(this script);
            }
        }
    }
    If (floor((Move / 100)) == 0)
    {
        Call //("Castling");
        MoveScoreRes = (1000000 * Factor);
        Stop(this script);
    }
    Call //("4: Killer moves");
    Call PrepareCurrentKillerMoves(Depth);
    If (CurrentKillerMoves[1] == Move)
    {
        MoveScoreRes = (6000000 * Factor);
        Stop(this script);
    }
    Else
    {
        If (CurrentKillerMoves[2] == Move)
        {
            MoveScoreRes = (5000000 * Factor);
            Stop(this script);
        }
    }
    Call //("5. Counter Moves");
    If (HistoryCounterMoves[AppliedMove[(Depth - 1)]] == Move)
    {
        MoveScoreRes = (4000000 * Factor);
        Stop(this script);
    }
    If (1 == 0)
    {
        If (BoardAttackedCalculated[(Depth + 0)] == 1)
        {
            If (SourcePieceParam > 0)
            {
                CurrentValue = Operator.LetterOf(BoardAttackedByWhiteSnapshot[(Depth + 0)], FromIdx);
                CurrentValue2 = Operator.LetterOf(BoardAttackedByWhiteSnapshot[(Depth + 0)], ToIdx);
            }
            Else
            {
                CurrentValue = Operator.LetterOf(BoardAttackedByBlackSnapshot[(Depth + 0)], FromIdx);
                CurrentValue2 = Operator.LetterOf(BoardAttackedByBlackSnapshot[(Depth + 0)], ToIdx);
            }
            If ((CurrentValue > 0) And (Not ((CurrentValue2 > 0))))
            {
                MoveScoreRes = (1000000 * Factor);
                Stop(this script);
            }
            If (1 == 0)
            {
                If ((CurrentValue2 > 0) And (Not ((CurrentValue > 0))))
                {
                    MoveScoreRes = (-1000000 * Factor);
                    Stop(this script);
                }
            }
        }
    }
    CurrentValue = HistoryMoveScores[(((Depth % 2) * 1000) + ((PieceIdxLookup[abs(SourcePieceParam)] * 100) + ToIdx))];
    CurrentValue2 = MaxHistoryMoveScore[((Depth % 2) + 1)];
    If (((CurrentValue > 0) And (CurrentValue2 > 0)) And ((CurrentValue / CurrentValue2) > 0.02))
    {
        Call //("6: Quiets with high history score");
        MoveScoreRes = Operator.Round(((1000 + ((CurrentValue / CurrentValue2) * 100)) * Factor));
        Stop(this script);
    }
    IdxSub = ((PieceIdxLookup[abs(SourcePieceParam)] * 10000) + ((FromIdx * 100) + ToIdx));
    If (SourcePieceParam > 0)
    {
        MoveScoreRes = MovePosLookupBlackMg[(IdxSub + 0)];
        Stop(this script);
    }
    Else
    {
        MoveScoreRes = MovePosLookupWhiteMg[(IdxSub + 0)];
        Stop(this script);
    }
}

Define GetNormalizedMove(string Move) (warp=true)
{
    If (Move == floor(Move))
    {
        NormalizedMoveRes = MoveToZeroPadStr[(Move + 1)];
    }
    Else
    {
        NormalizedMoveRes = Operator.Join(MoveToZeroPadStr[(floor(Move) + 1)], Operator.Join(".", Operator.LetterOf(Move, Variable.Length(Move))));
    }
}

Define GetOpeningMoves (warp=true)
{
    List.DeleteItem(OpeningMovesRes, all);
    If (1 == 0)
    {
        If (List.Length(BoardHistoryHash) > 13)
        {
            If (Operator.Random(1 , 4) == 4)
            {
                Stop(this script);
            }
        }
    }
    Call GenerateMovesPublic(1);
    Call CreateCurrentBoardHash;
    IdxOuter = 1;
    Repeat (List.Length(OpeningMovesMapHash))
    {
        If (OpeningMovesMapHash[IdxOuter] == CurrentBoardHash)
        {
            If List.ContainsItem(Moves1, OpeningMovesMapMove[IdxOuter])
            {
                List.Add(OpeningMovesRes, OpeningMovesMapMove[IdxOuter]);
            }
        }
        IdxOuter += 1;
    }
}

Define GetPiecePosHash(string Piece)(string Pos) (warp=true)
{
    PiecePosHash = 0;
    If ((Not ((Pos > 0))) Or (Piece == 0))
    {
        Stop(this script);
    }
    If (Piece > 0)
    {
        PiecePosHash = PosPieceHashLookup[((64 * (PieceIdxLookup[Piece] - 1)) + Pos)];
    }
    Else
    {
        PiecePosHash = PosPieceHashLookup[(384 + ((64 * (PieceIdxLookup[abs(Piece)] - 1)) + Pos))];
    }
}

Define GetPiecePosScoreRaw(string Piece)(string Idx) (warp=true)
{
    PiecePosScoreRes.Mg = 0;
    PiecePosScoreRes.Eg = 0;
    If ((Idx == 0) Or (Piece == 0))
    {
        Stop(this script);
    }
    If (Piece > 0)
    {
        If (Piece == GoK_BlackPawn)
        {
            PiecePosScoreRes.Mg = PawnPieceSquare[Idx];
            PiecePosScoreRes.Eg = PawnPieceSquareEndgame[Idx];
            Stop(this script);
        }
        If (Piece == GoK_BlackKnight)
        {
            PiecePosScoreRes.Mg = KnightPieceSquare[Idx];
            PiecePosScoreRes.Eg = KnightPieceSquareEndgame[Idx];
            Stop(this script);
        }
        If (Piece == GoK_BlackBishop)
        {
            PiecePosScoreRes.Mg = BishopPieceSquare[Idx];
            PiecePosScoreRes.Eg = BishopPieceSquareEndgame[Idx];
            Stop(this script);
        }
        If (Piece == GoK_BlackRook)
        {
            PiecePosScoreRes.Mg = RookPieceSquare[Idx];
            PiecePosScoreRes.Eg = RookPieceSquareEndgame[Idx];
            Stop(this script);
        }
        If (Piece == GoK_BlackQueen)
        {
            PiecePosScoreRes.Mg = QueenPieceSquare[Idx];
            PiecePosScoreRes.Eg = QueenPieceSquareEndgame[Idx];
            Stop(this script);
        }
        If (Piece == GoK_BlackKing)
        {
            PiecePosScoreRes.Mg = KingPieceSquare[Idx];
            PiecePosScoreRes.Eg = KingPieceSquareEndgame[Idx];
            Stop(this script);
        }
    }
    Else
    {
        If (Piece == GoK_WhitePawn)
        {
            PiecePosScoreRes.Mg = (0 - PawnPieceSquare[(65 - Idx)]);
            PiecePosScoreRes.Eg = (0 - PawnPieceSquareEndgame[(65 - Idx)]);
            Stop(this script);
        }
        If (Piece == GoK_WhiteKnight)
        {
            PiecePosScoreRes.Mg = (0 - KnightPieceSquare[(65 - Idx)]);
            PiecePosScoreRes.Eg = (0 - KnightPieceSquareEndgame[(65 - Idx)]);
            Stop(this script);
        }
        If (Piece == GoK_WhiteBishop)
        {
            PiecePosScoreRes.Mg = (0 - BishopPieceSquare[(65 - Idx)]);
            PiecePosScoreRes.Eg = (0 - BishopPieceSquareEndgame[(65 - Idx)]);
            Stop(this script);
        }
        If (Piece == GoK_WhiteRook)
        {
            PiecePosScoreRes.Mg = (0 - RookPieceSquare[(65 - Idx)]);
            PiecePosScoreRes.Eg = (0 - RookPieceSquareEndgame[(65 - Idx)]);
            Stop(this script);
        }
        If (Piece == GoK_WhiteQueen)
        {
            PiecePosScoreRes.Mg = (0 - QueenPieceSquare[(65 - Idx)]);
            PiecePosScoreRes.Eg = (0 - QueenPieceSquareEndgame[(65 - Idx)]);
            Stop(this script);
        }
        If (Piece == GoK_WhiteKing)
        {
            PiecePosScoreRes.Mg = (0 - KingPieceSquare[(65 - Idx)]);
            PiecePosScoreRes.Eg = (0 - KingPieceSquareEndgame[(65 - Idx)]);
            Stop(this script);
        }
    }
}

Define GetRepetitionCount (warp=true)
{
    RepetitionCountRes = 1;
    Idx = (List.Length(BoardHistory) - 2);
    Repeat Until (Idx < 1)
    {
        If (BoardHistory[Idx] == BoardHistory[List.Length(BoardHistory)])
        {
            RepetitionCountRes += 1;
        }
        Idx += -2;
    }
}

Define GetSubstring(string Text)(num FromIdx)(num ToIdx) (warp=true)
{
    SubstringRes = "";
    IdxString = FromIdx;
    Repeat (((ToIdx - FromIdx) + 1))
    {
        SubstringRes = Operator.Join(SubstringRes, Operator.LetterOf(Text, IdxString));
        IdxString += 1;
    }
}

Define GetSubstringLeft(string Text)(num Count) (warp=true)
{
    Call GetSubstring(Text)(1)(Count);
}

Define GetSubstringRight(string Text)(num Count) (warp=true)
{
    Call GetSubstring(Text)(((Variable.Length(Text) - Count) + 1))(Variable.Length(Text));
}

Define GetTargetIdx(num SourceIdx)(num DeltaX)(num DeltaY) (warp=true)
{
    GetTargetIdxRes = -1;
    X = (IdxToFile[SourceIdx] + DeltaX);
    If ((X > 0) And (X < 9))
    {
        Y = (IdxToRank[SourceIdx] + DeltaY);
        If ((Y > 0) And (Y < 9))
        {
            GetTargetIdxRes = (X + ((Y - 1) * 8));
        }
    }
}

Define GetTTNodeHash(string BoardHash)(string Depth) (warp=true)
{
    TTNodeHashResult = ((Depth % 2) + 1);
    TTNodeHashResult = ((TTNodeHashResult * 97) + (CastlingState[Depth] + 1));
    TTNodeHashResult = ((TTNodeHashResult * 97) + (EnPassantTarget[Depth] + 1));
    TTNodeHashResult = ((TTNodeHashResult * 97) + BoardHash);
}

Define GetVirtualMove(num Move) (warp=true)
{
    If (IsPlayerBlack == 0)
    {
        VirtualMove = Move;
    }
    Else
    {
        If (Not ((floor((Move / 100)) == 0)))
        {
            VirtualMove = (((65 - floor((Move / 100))) * 100) + (65 - floor((Move % 100))));
            If (Operator.LetterOf(Move, (Variable.Length(Move) - 1)) == ".")
            {
                VirtualMove = (VirtualMove + (0.1 * Operator.LetterOf(Move, Variable.Length(Move))));
            }
        }
        Else
        {
            If (Move == GoK_BlackKingsideCastling)
            {
                VirtualMove = GoK_WhiteKingsideCastling;
            }
            Else
            {
                If (Move == GoK_BlackQueensideCastling)
                {
                    VirtualMove = GoK_WhiteQueensideCastling;
                }
                Else
                {
                    If (Move == GoK_WhiteKingsideCastling)
                    {
                        VirtualMove = GoK_BlackKingsideCastling;
                    }
                    Else
                    {
                        If (Move == GoK_WhiteQueensideCastling)
                        {
                            VirtualMove = GoK_BlackQueensideCastling;
                        }
                    }
                }
            }
        }
    }
}

Define ImportBoard(string ImpBoard) (warp=false)
{
    Call EnterExecution;
    Call ExportBoardFEN((IsPlayerBlack == 1))((1 == 1));
    Call ImportBoardFEN(ImpBoard);
    Call CalcBoardStats;
    If ((BlackKingIdx == "") Or (WhiteKingIdx == ""))
    {
        Call SayAsync("Invalid FEN data")(5);
        Call ImportBoardFEN(ExportDataFEN);
        Call CalcBoardStats;
    }
    Else
    {
        Stg_FromSquareIdx = -1;
        Stg_ToSquareIdx = -1;
        Event.BroadcastAndWait("fromsquareselected");
        Event.BroadcastAndWait("tosquareselected");
        IsImportedBoard = 1;
        HasWhiteKingMoved = 0;
        HasBlackKingMoved = 0;
        HasWhiteCastled = 0;
        HasBlackCastled = 0;
        HasWhiteRookKSMoved = 0;
        HasWhiteRookQSMoved = 0;
        HasBlackRookKSMoved = 0;
        HasBlackRookQSMoved = 0;
        GameMoves = "";
        List.DeleteItem(BoardHistory, all);
        List.DeleteItem(BoardHistoryHash, all);
        List.DeleteItem(BoardHistoryFiftyMoves, all);
        List.DeleteItem(BoardHistoryMetaState, all);
        List.DeleteItem(BoardHistoryWasEngineMove, all);
        List.DeleteItem(GameMovesAN, all);
        If (Not ((Board[VirtualBoard[1]] == GoK_BlackRook)))
        {
            HasBlackRookQSMoved = 1;
        }
        If (Not ((Board[VirtualBoard[5]] == GoK_BlackKing)))
        {
            HasBlackKingMoved = 1;
            HasBlackCastled = 1;
        }
        If (Not ((Board[VirtualBoard[8]] == GoK_BlackRook)))
        {
            HasBlackRookKSMoved = 1;
        }
        If (Not ((Board[VirtualBoard[57]] == GoK_WhiteRook)))
        {
            HasWhiteRookQSMoved = 1;
        }
        If (Not ((Board[VirtualBoard[61]] == GoK_WhiteKing)))
        {
            HasWhiteKingMoved = 1;
            HasWhiteCastled = 1;
        }
        If (Not ((Board[VirtualBoard[64]] == GoK_WhiteRook)))
        {
            HasWhiteRookKSMoved = 1;
        }
        Call InitHistoryScores;
        Call AddBoardToHistory("");
        Call AddToFiftyMoves((1 == 0));
        Call DrawBoardAndWait;
        GoK_IsGameSuspended = 0;
        Call CalcBoardAttackedByMoveChecked(1);
        Call CalcBoardAttackedByMoveChecked(2);
        IdxString += 1;
        CurrentValue = Operator.LetterOf(ImpBoard, IdxString);
        If (((CurrentValue == "B") And (IsPlayerBlack == 0)) Or ((CurrentValue == "W") And (IsPlayerBlack == 1)))
        {
            If (IsWhiteChecked == 1)
            {
                Call SayAsync("Checkmate!")(5);
                GoK_IsGameSuspended = 1;
            }
            Else
            {
                Call IsDrawByStalemate(1);
                If (IsDrawRes == 1)
                {
                    Call SayAsync("Draw!")(5);
                    GoK_IsGameSuspended = 1;
                }
                Else
                {
                    Call ExecuteEngineMove;
                }
            }
        }
        Else
        {
            If (((CurrentValue == "W") And (IsPlayerBlack == 0)) Or ((CurrentValue == "B") And (IsPlayerBlack == 1)))
            {
                If (IsBlackChecked == 1)
                {
                    Call SayAsync("Checkmate!")(5);
                    GoK_IsGameSuspended = 1;
                }
                Else
                {
                    Call IsDrawByStalemate(2);
                    If (IsDrawRes == 1)
                    {
                        Call SayAsync("Draw!")(5);
                        GoK_IsGameSuspended = 1;
                    }
                }
            }
        }
    }
    Call ExitExecution;
}

Define ImportBoardFEN(string ImpBoard) (warp=false)
{
    Idx = 1;
    Repeat (64)
    {
        List.ReplaceItem(Board, Idx, 0);
        Idx += 1;
    }
    If (IsPlayerBlack == 0)
    {
        Idx = 1;
        IdxInc = 1;
    }
    Else
    {
        Idx = 64;
        IdxInc = -1;
    }
    IdxString = 1;
    Repeat Until (((Idx > 64) Or (Idx < 1)) Or (IdxString > Variable.Length(ImpBoard)))
    {
        CurrentValue = Operator.LetterOf(ImpBoard, IdxString);
        If ((Not ((CurrentValue < "A"))) And (Not ((CurrentValue > "Z"))))
        {
            CurrentPiece = 0;
            If (CurrentValue == "P")
            {
                CurrentPiece = GoK_BlackPawn;
            }
            If (CurrentValue == "N")
            {
                CurrentPiece = GoK_BlackKnight;
            }
            If (CurrentValue == "B")
            {
                CurrentPiece = GoK_BlackBishop;
            }
            If (CurrentValue == "R")
            {
                CurrentPiece = GoK_BlackRook;
            }
            If (CurrentValue == "Q")
            {
                CurrentPiece = GoK_BlackQueen;
            }
            If (CurrentValue == "K")
            {
                CurrentPiece = GoK_BlackKing;
            }
            Call IsLowerCase(CurrentValue);
            If (IsLowerCaseRes == 0)
            {
                CurrentPiece = (CurrentPiece * -1);
            }
            If (IsPlayerBlack == 1)
            {
                CurrentPiece = (CurrentPiece * -1);
            }
            List.ReplaceItem(Board, Idx, CurrentPiece);
            Idx += IdxInc;
        }
        Else
        {
            If ((Not ((CurrentValue < 0))) And (Not ((CurrentValue > 9))))
            {
                Repeat (CurrentValue)
                {
                    List.ReplaceItem(Board, Idx, 0);
                    Idx += IdxInc;
                }
            }
            Else
            {
                If (CurrentValue == "/")
                {
                    Repeat Until ((((Idx % 8) == 1) And (IsPlayerBlack == 0)) Or (((Idx % 8) == 0) And (IsPlayerBlack == 1)))
                    {
                        List.ReplaceItem(Board, Idx, 0);
                        Idx += IdxInc;
                    }
                }
            }
        }
        IdxString += 1;
    }
}

Define ImportBoardImpl(string ImpBoard) (warp=true)
{
    Idx = 1;
    IdxString = 1;
    CurrentPiece = "";
    Repeat Until (IdxString > Variable.Length(ImpBoard))
    {
        If (Operator.LetterOf(ImpBoard, IdxString) == ",")
        {
            List.ReplaceItem(Board, Idx, CurrentPiece);
            Idx += 1;
            CurrentPiece = "";
        }
        Else
        {
            CurrentPiece = Operator.Join(CurrentPiece, Operator.LetterOf(ImpBoard, IdxString));
        }
        IdxString += 1;
    }
}

Define InitAlphaBeta(string MaxDepth)(bool InitialDeepening) (warp=true)
{
    IsInNullMove = 0;
    IsMinMaxTimeout = 0;
    If InitialDeepening
    {
        PV = "";
        Call Profile_Reset;
        PrevProgressUpdate = (Sensing.DaysSince2000() * 86400);
        TTCurrentAge = ((floor((TTCurrentAge / 100)) + 1) * 100);
        If ((IsScratch3 == 0) And (Level > 3))
        {
            IdxOuter = 1;
            Repeat (List.Length(TTNodeHash))
            {
                If (Not ((TTNodeHash[IdxOuter] == 0)))
                {
                    If (((floor((TTNodeAge[IdxOuter] / 100)) * 2) + TTNodeDepth[IdxOuter]) < ((floor((TTCurrentAge / 100)) * 2) + 1))
                    {
                        List.ReplaceItem(TTNodeBoardAttackedByOpp, IdxOuter, "");
                        List.ReplaceItem(TTNodeBoardAttackedByOppPiece, IdxOuter, "");
                        List.ReplaceItem(TTNodeCheckedAttackLines, IdxOuter, "");
                        List.ReplaceItem(TTNodeHash, IdxOuter, 0);
                        List.ReplaceItem(TTNodeAge, IdxOuter, 0);
                    }
                }
                IdxOuter += 1;
            }
        }
        List.DeleteItem(HistoryCounterMoves, all);
        Repeat (10000)
        {
            List.Add(HistoryCounterMoves, "");
        }
        List.DeleteItem(MinMaxPly1Scores, all);
        Repeat (100000)
        {
            List.Add(MinMaxPly1Scores, "");
        }
    }
    If (1 == 1)
    {
        If InitialDeepening
        {
            Factor = 0;
        }
        Else
        {
            Factor = 0.95;
        }
        IdxOuter = 1;
        Repeat (List.Length(HistoryMoveScores))
        {
            List.ReplaceItem(HistoryMoveScores, IdxOuter, Operator.Round((HistoryMoveScores[IdxOuter] * Factor)));
            IdxOuter += 1;
        }
        IdxOuter = 1;
        Repeat (List.Length(MaxHistoryMoveScore))
        {
            List.ReplaceItem(MaxHistoryMoveScore, IdxOuter, Operator.Round((MaxHistoryMoveScore[IdxOuter] * Factor)));
            IdxOuter += 1;
        }
    }
    Call SetInitialEnPassantTarget(1);
    List.DeleteItem(MinMaxPly1EvalMoves, all);
    TTCurrentAge += 1;
    Call CalcBoardStats;
    CalcAttackStateWithMobility = 0;
    Call CreateCurrentBoardHash;
    Call Log(MaxDepth)(" : ")("Search start, depth = ")(MaxDepth)("")("")("")("");
}

Define InitBoard (warp=true)
{
    PV = "";
    Stg_FromSquareIdx = -1;
    Stg_ToSquareIdx = -1;
    ProfilerMode = 0;
    DebugMode = 0;
    TimeControl = 0;
    PlayingMode = 0;
    MoveFromIdx = -1;
    MoveToIdx = -1;
    GoK_ProgressValue = 0;
    GoK_EvaluationValue = 0;
    IsAdvisorEnabled = 1;
    IsInUndo = 0;
    IsBlockProfilerEnabled = 0;
    IsEndgame = 0;
    IsEndgame2 = 0;
    IsImportedBoard = 0;
    GoK_BlackKingsideCastling = 90;
    GoK_WhiteKingsideCastling = 92;
    GoK_BlackQueensideCastling = 91;
    GoK_WhiteQueensideCastling = 93;
    HasBlackCastled = 0;
    HasWhiteKingMoved = 0;
    HasWhiteCastled = 0;
    HasBlackKingMoved = 0;
    HasWhiteRookKSMoved = 0;
    HasWhiteRookQSMoved = 0;
    HasBlackRookKSMoved = 0;
    HasBlackRookQSMoved = 0;
    GameMoves = "";
    GoK_IsGameSuspended = 0;
    PrevProgressUpdate = 0;
    GoK_Empty = 0;
    GoK_WhiteKing = -50000;
    GoK_WhiteQueen = -1250;
    GoK_WhiteRook = -650;
    GoK_WhiteBishop = -425;
    GoK_WhiteKnight = -400;
    GoK_WhitePawn = -80;
    GoK_BlackKing = 50000;
    GoK_BlackQueen = 1250;
    GoK_BlackRook = 650;
    GoK_BlackBishop = 425;
    GoK_BlackKnight = 400;
    GoK_BlackPawn = 80;
    AbsMinCheckmateEval = (GoK_BlackKing - 10000);
    AbsMaxCheckmateEval = 97000;
    DrawByRepetitionEval = -49.9;
    MaxPly1DeepeningMoveOrderScore = 9999999;
    MaxMoveOrderScore = 9999999;
    MaxSearchDepthStackFrames = 40;
    MaxMovesPerGeneration = 300;
    Call InitCoordLookup;
    Call FillBoard;
    List.DeleteAll(PieceIdxLookup);
    Idx = 1;
    Repeat (GoK_BlackKing)
    {
        List.Add(PieceIdxLookup, "");
        Idx += 1;
    }
    List.ReplaceItem(PieceIdxLookup, GoK_BlackPawn, 1);
    List.ReplaceItem(PieceIdxLookup, GoK_BlackKnight, 2);
    List.ReplaceItem(PieceIdxLookup, GoK_BlackBishop, 3);
    List.ReplaceItem(PieceIdxLookup, GoK_BlackRook, 4);
    List.ReplaceItem(PieceIdxLookup, GoK_BlackQueen, 5);
    List.ReplaceItem(PieceIdxLookup, GoK_BlackKing, 6);
    CharsUpperCase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    List.DeleteItem(CharsUpperCaseList, all);
    Idx = 1;
    Repeat (List.Length(CharsUpperCaseList))
    {
        List.Add(CharsUpperCaseList, Operator.LetterOf(CharsUpperCase, Idx));
        Idx += 1;
    }
    List.DeleteItem(KillerMoves, all);
    Repeat ((2 * MaxSearchDepthStackFrames))
    {
        List.Add(KillerMoves, "");
    }
    List.DeleteItem(HistoryMoveScores, all);
    Repeat (2000)
    {
        List.Add(HistoryMoveScores, 0);
    }
    List.DeleteItem(MaxHistoryMoveScore, all);
    Repeat (2)
    {
        List.Add(MaxHistoryMoveScore, 0);
    }
    List.DeleteItem(HistoryCounterMoves, all);
    Repeat (10000)
    {
        List.Add(HistoryCounterMoves, "");
    }
    List.DeleteItem(BoardHistory, all);
    List.DeleteItem(BoardHistoryHash, all);
    List.DeleteItem(BoardHistoryFiftyMoves, all);
    List.DeleteItem(BoardHistoryMetaState, all);
    List.DeleteItem(BoardHistoryWasEngineMove, all);
    List.DeleteItem(GameMovesAN, all);
    List.DeleteItem(BoardAttackedByWhite, all);
    List.DeleteItem(BoardAttackedByBlack, all);
    List.DeleteItem(PieceMobility, all);
    List.DeleteItem(BoardAttackedByWhitePiece, all);
    List.DeleteItem(BoardAttackedByBlackPiece, all);
    Repeat (64)
    {
        List.Add(BoardAttackedByWhite, 0);
        List.Add(BoardAttackedByBlack, 0);
        List.Add(PieceMobility, 0);
        List.Add(BoardAttackedByWhitePiece, 0);
        List.Add(BoardAttackedByBlackPiece, 0);
    }
    Call //("Due to the lack of local variables in Scratch, we emulate a method stack for recursive Minimax using lists");
    List.DeleteItem(Alphas, all);
    List.DeleteItem(Betas, all);
    List.DeleteItem(AlphasOld, all);
    List.DeleteItem(BetasOld, all);
    List.DeleteItem(MinMaxResults, all);
    List.DeleteItem(MinMaxResultsIsDynamic, all);
    List.DeleteItem(MovesCount, all);
    List.DeleteItem(MovesIdx, all);
    List.DeleteItem(MovesIdxBestMove, all);
    List.DeleteItem(TargetPieces, all);
    List.DeleteItem(PreviousBoardHash, all);
    List.DeleteItem(PreviousBoardHash2, all);
    List.DeleteItem(ScoreTypes, all);
    List.DeleteItem(PickMoveRes, all);
    List.DeleteItem(PickPhase, all);
    List.DeleteItem(PickedMoves, all);
    List.DeleteItem(PickedMoveCount, all);
    List.DeleteItem(BestMoves, all);
    List.DeleteItem(CheckedState, all);
    List.DeleteItem(CheckedStateAttackLines, all);
    List.DeleteItem(PromotionPieces, all);
    List.DeleteItem(TargetPiecesIdx, all);
    List.DeleteItem(PosScoreDelta, all);
    List.DeleteItem(BoardAttackedCalculated, all);
    List.DeleteItem(PutsInCheck, all);
    List.DeleteItem(EvalExtended1, all);
    List.DeleteItem(PlyExtension, all);
    List.DeleteItem(SourcePieces, all);
    List.DeleteItem(EvalExtended2, all);
    List.DeleteItem(EvalExtended3, all);
    List.DeleteItem(BlackMobBonus, all);
    List.DeleteItem(WhiteMobBonus, all);
    List.DeleteItem(AppliedMove, all);
    List.DeleteItem(CapturesDeltaSum, all);
    List.DeleteItem(PosScoreDeltaSum, all);
    List.DeleteItem(PlyExtensionTagged, all);
    List.DeleteItem(BoardAttackedByBlackPieceSnapshot, all);
    List.DeleteItem(BoardAttackedByBlackSnapshot, all);
    List.DeleteItem(BoardAttackedByWhitePieceSnapshot, all);
    List.DeleteItem(BoardAttackedByWhiteSnapshot, all);
    List.DeleteItem(Quiescence, all);
    List.DeleteItem(EnPassantTarget, all);
    List.DeleteItem(PassedWhitePawnOnEndgame, all);
    List.DeleteItem(CastlingState, all);
    List.DeleteItem(PawnShelterCapture, all);
    List.DeleteItem(BoardEval, all);
    List.DeleteItem(HashMoveMetaData, all);
    List.DeleteItem(HashMove, all);
    Repeat (MaxSearchDepthStackFrames)
    {
        List.Add(Alphas, "");
        List.Add(Betas, "");
        List.Add(AlphasOld, "");
        List.Add(BetasOld, "");
        List.Add(MinMaxResults, "");
        List.Add(MinMaxResultsIsDynamic, "");
        List.Add(MovesCount, 0);
        List.Add(MovesIdx, "");
        List.Add(MovesIdxBestMove, "");
        List.Add(TargetPieces, "");
        List.Add(PreviousBoardHash, 0);
        List.Add(PreviousBoardHash2, 0);
        List.Add(ScoreTypes, "");
        List.Add(PickMoveRes, "");
        List.Add(PickPhase, "");
        List.Add(PickedMoves, "");
        List.Add(PickedMoveCount, 0);
        List.Add(BestMoves, "");
        List.Add(CheckedState, "");
        List.Add(CheckedStateAttackLines, "");
        List.Add(PromotionPieces, "");
        List.Add(TargetPiecesIdx, "");
        List.Add(PosScoreDelta, "");
        List.Add(BoardAttackedCalculated, "");
        List.Add(PutsInCheck, "");
        List.Add(EvalExtended1, "");
        List.Add(PlyExtension, "");
        List.Add(SourcePieces, 0);
        List.Add(EvalExtended2, "");
        List.Add(EvalExtended3, "");
        List.Add(BlackMobBonus, "");
        List.Add(WhiteMobBonus, "");
        List.Add(AppliedMove, "");
        List.Add(CapturesDeltaSum, "");
        List.Add(PosScoreDeltaSum, "");
        List.Add(PlyExtensionTagged, "");
        List.Add(BoardAttackedByBlackPieceSnapshot, "");
        List.Add(BoardAttackedByBlackSnapshot, "");
        List.Add(BoardAttackedByWhitePieceSnapshot, "");
        List.Add(BoardAttackedByWhiteSnapshot, "");
        List.Add(Quiescence, "");
        List.Add(EnPassantTarget, "");
        List.Add(PassedWhitePawnOnEndgame, 0);
        List.Add(CastlingState, 0);
        List.Add(PawnShelterCapture, 0);
        List.Add(BoardEval, "");
        List.Add(HashMoveMetaData, "");
        List.Add(HashMove, "");
    }
    List.DeleteItem(PV, all);
    Repeat ((MaxSearchDepthStackFrames * MaxSearchDepthStackFrames))
    {
        List.Add(PV, 0);
    }
    List.DeleteItem(CastlingStateLookup, all);
    Idx = 0;
    Repeat (256)
    {
        List.Add(CastlingStateLookup, Operator.Join(Operator.Join(Operator.Join((floor((Idx / 128)) % 2), (floor((Idx / 64)) % 2)), Operator.Join((floor((Idx / 32)) % 2), (floor((Idx / 16)) % 2))), Operator.Join(Operator.Join((floor((Idx / 8)) % 2), (floor((Idx / 4)) % 2)), Operator.Join((floor((Idx / 2)) % 2), (Idx % 2)))));
        Idx += 1;
    }
    List.DeleteItem(CastlingStatePow2, all);
    Idx = 128;
    Repeat (8)
    {
        List.Add(CastlingStatePow2, Idx);
        Idx = (Idx / 2);
    }
    List.DeleteItem(BlackPawnCount, all);
    List.DeleteItem(WhitePawnCount, all);
    Repeat (8)
    {
        List.Add(BlackPawnCount, 0);
        List.Add(WhitePawnCount, 0);
    }
    Call //("Generated moves are stores in per-ply segments within Moves list");
    List.DeleteAll(Moves);
    Repeat ((MaxMovesPerGeneration * MaxSearchDepthStackFrames))
    {
        List.Add(Moves, "");
    }
    List.DeleteAll(PieceMobility);
    Repeat (64)
    {
        List.Add(PieceMobility, 0);
    }
    List.DeleteAll(PieceMobilityPrep);
    Repeat ((64 * 32))
    {
        List.Add(PieceMobilityPrep, 0);
    }
}

Define InitBoardPhase2 (warp=true)
{
    Call InitHashLookup;
    Call InitMoveLookup;
    Call InitMobilityBonusLookup;
    Call InitKingSafety;
    Call InitPieceSquareTables;
    Call InitImbalanceLookup;
    Call CalcBoardStats;
    Call InitMovePosLookup;
    Call InitOpeningBook;
    Call InitOpeningMovesMap;
    Call InitChebyshev;
    Call InitHistoryScores;
    Call AddBoardToHistory("");
    Call AddToFiftyMoves((1 == 0));
}

Define InitChebyshev (warp=true)
{
    List.DeleteAll(ChebyshevDistance);
    Repeat (6500)
    {
        List.Add(ChebyshevDistance, "");
    }
    Idx = 1;
    Repeat (64)
    {
        IdxSub = 1;
        Repeat (64)
        {
            Delta = abs((IdxToRank[Idx] - IdxToRank[IdxSub]));
            Delta2 = abs((IdxToFile[Idx] - IdxToFile[IdxSub]));
            If (Delta > Delta2)
            {
                List.ReplaceItem(ChebyshevDistance, ((Idx * 100) + IdxSub), Delta);
            }
            Else
            {
                List.ReplaceItem(ChebyshevDistance, ((Idx * 100) + IdxSub), Delta2);
            }
            IdxSub += 1;
        }
        Idx += 1;
    }
}

Define InitCoordLookup (warp=true)
{
    List.DeleteItem(IdxToFile, all);
    List.DeleteItem(IdxToRank, all);
    Idx = 1;
    Repeat (64)
    {
        List.Add(IdxToFile, (((Idx - 1) % 8) + 1));
        List.Add(IdxToRank, ceiling((Idx / 8)));
        Idx += 1;
    }
}

Define InitHashLookup (warp=true)
{
    TTCurrentAge = 0;
    List.DeleteItem(PosPieceHashLookup, all);
    Repeat (1024)
    {
        List.Add(PosPieceHashLookup, Operator.Random(1 , ((65536 * 65536) * (65536 * 1))));
    }
    Call ClearTT;
}

Define InitHistoryScores (warp=true)
{
    IdxOuter = 1;
    Repeat (List.Length(HistoryMoveScores))
    {
        List.ReplaceItem(HistoryMoveScores, IdxOuter, 0);
        IdxOuter += 1;
    }
    IdxOuter = 1;
    Repeat (List.Length(MaxHistoryMoveScore))
    {
        List.ReplaceItem(MaxHistoryMoveScore, IdxOuter, 0);
        IdxOuter += 1;
    }
}

Define InitImbalanceLookup (warp=true)
{
    List.DeleteAll(ImbalanceSameSide);
    List.DeleteAll(ImbalanceOppSide);
    List.DeleteAll(ImbalanceFactor);
    Call LoadList("42, 0,  0,  0, 0, 0, 1, 1,  0,  0, 0, 0, 1, 7, -1,  0, 0, 0, 0, 3,  0,  0, 0, 0, -1, 1,  3, -6, 0, 0, -5, 3,  4, -4, 0, 0")("ImbalanceSameSide");
    Call LoadList("0, 0,  0,  0, 0, 0,  1, 0,  0,  0, 0, 0, 0, 2,  0,  0, 0, 0, 2, 2,  1,  0, 0, 0,1, 1,  1, -1, 0, 0, 3, 3, -1,  4, 9, 0")("ImbalanceOppSide");
    If (1 == 0)
    {
        Call LoadList("7, 7, 7, 7, 7, 7, 39, 2, 7, 7, 7, 7, 35, 271, -4, 7, 7, 7, 7, 25, 4, 7, 7, 7, -27, -2, 46, 100, 56, 7, 58, 29, 83, 148, -3, -25")("ImbalanceSameSide");
        Call LoadList("41, 41, 41, 41, 41, 41, 37, 41, 41, 41, 41, 41, 10, 62, 41, 41, 41, 41, 57, 64, 39, 41, 41, 41, 50, 40, 23, -22, 41, 41, 106, 101, 3, 151, 171, 41")("ImbalanceOppSide");
        Call LoadList("1617, -162, -1172, -190, 105, 26")("ImbalanceFactor");
    }
}

Define InitKingSafety (warp=true)
{
    List.DeleteItem(PawnStorm, all);
    Call LoadList(" 42, -8,  58, 44, 27, 21, 24, 0,   21,   -8,  58, 22, 18, -3, 11, 0,    2,   24,  76, 17,  3, -7, -1, 0,   -5,   -7,  42,  7,  1, -3, -8, 0,    2,   24,  76, 17,  3, -7, -1, 0,   -5,   -7,  42,  7,  1, -3, -8, 0,   21,   -8,  58, 22, 18, -3, 11, 0,   42, -8,  58, 44, 27, 21, 24, 0,")("PawnStorm");
    List.DeleteItem(PawnShelter, all);
    Call LoadList("-20, 38,  44,  27,  18,   8,  0, 0,  -10, 29,  16, -23, -14,  -5,  0, 0,  -10, 35,  11,  -1,  15,   1,  0, 0,  -18, -6, -14, -24, -14,   0,  0, 0,  -18, -6, -14, -24, -14,   0,  0, 0,  -10, 35,  11,  -1,  15,   1,  0, 0,  -10, 29,  16, -23, -14,  -5,  0, 0,  -20, 38,  44,  27,  18,   8,  0, 0, ")("PawnShelter");
    List.DeleteItem(PawnPassedFilePenalty, all);
    Call LoadList("-10, 0, 10, 15, 15, 10, 0, -10")("PawnPassedFilePenalty");
    List.DeleteItem(PawnPassedRankBonus, all);
    Call LoadList(""0, 15, 15, 20, 45, 90, 130, 0")("PawnPassedRankBonus");
    List.DeleteItem(PawnConnectedBonus, all);
    Call LoadList("0, 7, 8, 12, 29, 48, 86, 0")("PawnConnectedBonus");
    List.DeleteItem(PawnPhalanxBonus, all);
    Call LoadList("0, 7, 8, 12, 29, 48, 86, 0")("PawnPhalanxBonus");
    List.DeleteItem(MinorAttackWeight, all);
    Call LoadList("0, 15, 19, 20, 28, 22, 34, 55, 30, 59, 0, 0")("MinorAttackWeight");
    List.DeleteItem(RookAttackWeight, all);
    Call LoadList("0, 11, 18, 34, 16, 32, 0, 17, 25, 19, 0, 0")("RookAttackWeight");
    List.DeleteAll(KingRings);
    Repeat (640)
    {
        List.Add(KingRings, -1);
    }
    KingIdx = 1;
    Repeat (64)
    {
        Idx = (((KingIdx - 1) * 10) + 1);
        KingRank = IdxToRank[KingIdx];
        KingFile = IdxToFile[KingIdx];
        Rank = (KingRank - 1);
        Repeat (3)
        {
            If ((Rank > 0) And (Rank < 9))
            {
                File = (KingFile - 1);
                Repeat (3)
                {
                    If ((File > 0) And (File < 9))
                    {
                        If ((Not ((File == KingFile))) Or (Not ((Rank == KingRank))))
                        {
                            List.ReplaceItem(KingRings, Idx, (((Rank - 1) * 8) + File));
                            Idx += 1;
                        }
                    }
                    File += 1;
                }
            }
            Rank += 1;
        }
        KingIdx += 1;
    }
}

Define InitMobilityBonusLookup (warp=true)
{
    List.DeleteItem(QueenMobilityBonus, all);
    List.DeleteItem(BishopMobilityBonus, all);
    List.DeleteItem(RookMobilityBonus, all);
    List.DeleteItem(KnightMobilityBonus, all);
    Call LoadList("-25, -40, -8, -2, 0, 6, 1, 9, 5, 18, 8, 23, 12, 28, 15, 32, 16, 34, 19, 38, 21, 42, 24, 45, 25, 46, 27, 46, 27, 49, 28, 51, 29, 52, 30, 54, 32, 56, 34, 58, 35, 62, 39, 66, 40, 70, 40, 75, 41, 79, 43, 81, 44, 83, 45, 84")("QueenMobilityBonus");
    Call LoadList("-21, -32, -9, -11, 8, 1, 12, 6, 17, 11, 21, 16, 24, 23, 29, 27, 30, 31, 32, 34, 37, 36, 38, 39, 41, 40, 44, 43")("BishopMobilityBonus");
    Call LoadList("-27, -36, -13, -8, -7, 12, -4, 19, -3, 25, -1, 36, 4, 45, 8, 47, 12, 53, 12, 57, 14, 63, 15, 65, 17, 67, 20, 68, 23, 68")("RookMobilityBonus");
    Call LoadList("-29, -35, -22, -25, -5, -12, -2, -6, 2, 4, 6, 8, 9, 11, 12, 14, 14, 15")("KnightMobilityBonus");
}

Define InitMoveLookup (warp=true)
{
    List.DeleteItem(KnightMoveOffsets, all);
    List.DeleteItem(KingMoveOffsets, all);
    List.Add(KnightMoveOffsets, -2);
    List.Add(KnightMoveOffsets, -1);
    List.Add(KnightMoveOffsets, -2);
    List.Add(KnightMoveOffsets, 1);
    List.Add(KnightMoveOffsets, -1);
    List.Add(KnightMoveOffsets, -2);
    List.Add(KnightMoveOffsets, -1);
    List.Add(KnightMoveOffsets, 2);
    List.Add(KnightMoveOffsets, 1);
    List.Add(KnightMoveOffsets, -2);
    List.Add(KnightMoveOffsets, 1);
    List.Add(KnightMoveOffsets, 2);
    List.Add(KnightMoveOffsets, 2);
    List.Add(KnightMoveOffsets, -1);
    List.Add(KnightMoveOffsets, 2);
    List.Add(KnightMoveOffsets, 1);
    List.Add(KingMoveOffsets, -1);
    List.Add(KingMoveOffsets, -1);
    List.Add(KingMoveOffsets, -1);
    List.Add(KingMoveOffsets, 0);
    List.Add(KingMoveOffsets, -1);
    List.Add(KingMoveOffsets, 1);
    List.Add(KingMoveOffsets, 0);
    List.Add(KingMoveOffsets, -1);
    List.Add(KingMoveOffsets, 0);
    List.Add(KingMoveOffsets, 1);
    List.Add(KingMoveOffsets, 1);
    List.Add(KingMoveOffsets, -1);
    List.Add(KingMoveOffsets, 1);
    List.Add(KingMoveOffsets, 0);
    List.Add(KingMoveOffsets, 1);
    List.Add(KingMoveOffsets, 1);
    List.DeleteItem(MoveLookupStraight, all);
    List.DeleteItem(MoveLookupCross, all);
    List.DeleteItem(MoveLookupOffsetsStraight, all);
    List.DeleteItem(MoveLookupOffsetsCross, all);
    List.DeleteItem(MoveLookupKnight, all);
    List.DeleteItem(MoveLookupKing, all);
    List.DeleteItem(MoveLookupIndexOffset, all);
    List.DeleteItem(MoveLookupLineIndexOffset, all);
    List.Add(MoveLookupOffsetsStraight, 1);
    List.Add(MoveLookupOffsetsStraight, 0);
    List.Add(MoveLookupOffsetsStraight, 0);
    List.Add(MoveLookupOffsetsStraight, 1);
    List.Add(MoveLookupOffsetsStraight, -1);
    List.Add(MoveLookupOffsetsStraight, 0);
    List.Add(MoveLookupOffsetsStraight, 0);
    List.Add(MoveLookupOffsetsStraight, -1);
    List.Add(MoveLookupOffsetsCross, 1);
    List.Add(MoveLookupOffsetsCross, 1);
    List.Add(MoveLookupOffsetsCross, 1);
    List.Add(MoveLookupOffsetsCross, -1);
    List.Add(MoveLookupOffsetsCross, -1);
    List.Add(MoveLookupOffsetsCross, 1);
    List.Add(MoveLookupOffsetsCross, -1);
    List.Add(MoveLookupOffsetsCross, -1);
    Idx = 1;
    Repeat (64)
    {
        IdxSub = 1;
        Repeat (4)
        {
            X = IdxToFile[Idx];
            Y = IdxToRank[Idx];
            Repeat (8)
            {
                X += MoveLookupOffsetsStraight[IdxSub];
                Y += MoveLookupOffsetsStraight[(IdxSub + 1)];
                List.Add(MoveLookupStraight, -1);
                If ((Y > 0) And (Y < 9))
                {
                    If ((X > 0) And (X < 9))
                    {
                        TargetIdx = (X + ((Y - 1) * 8));
                        List.ReplaceItem(MoveLookupStraight, List.Length(MoveLookupStraight), TargetIdx);
                    }
                }
            }
            IdxSub += 2;
        }
        IdxSub = 1;
        Repeat (4)
        {
            X = IdxToFile[Idx];
            Y = IdxToRank[Idx];
            Repeat (8)
            {
                X += MoveLookupOffsetsCross[IdxSub];
                Y += MoveLookupOffsetsCross[(IdxSub + 1)];
                List.Add(MoveLookupCross, -1);
                If ((Y > 0) And (Y < 9))
                {
                    If ((X > 0) And (X < 9))
                    {
                        TargetIdx = (X + ((Y - 1) * 8));
                        List.ReplaceItem(MoveLookupCross, List.Length(MoveLookupCross), TargetIdx);
                    }
                }
            }
            IdxSub += 2;
        }
        Idx += 1;
    }
    Idx = 1;
    Repeat (64)
    {
        List.InsertItem(MoveLookupIndexOffset, Idx, ((Idx - 1) * 8));
        List.InsertItem(MoveLookupLineIndexOffset, Idx, ((Idx - 1) * 32));
        Idx += 1;
    }
    Idx = 1;
    Repeat (64)
    {
        IdxSub = 1;
        Repeat (8)
        {
            Call GetTargetIdx(Idx)(KingMoveOffsets[IdxSub])(KingMoveOffsets[(IdxSub + 1)]);
            If (Not ((GetTargetIdxRes == -1)))
            {
                List.Add(MoveLookupKing, GetTargetIdxRes);
            }
            IdxSub += 2;
        }
        Repeat Until (List.Length(MoveLookupKing) == (Idx * 8))
        {
            List.Add(MoveLookupKing, -1);
        }
        IdxSub = 1;
        Repeat (8)
        {
            Call GetTargetIdx(Idx)(KnightMoveOffsets[IdxSub])(KnightMoveOffsets[(IdxSub + 1)]);
            If (Not ((GetTargetIdxRes == -1)))
            {
                List.Add(MoveLookupKnight, GetTargetIdxRes);
            }
            IdxSub += 2;
        }
        Repeat Until (List.Length(MoveLookupKnight) == (Idx * 8))
        {
            List.Add(MoveLookupKnight, -1);
        }
        Idx += 1;
    }
    List.DeleteItem(MoveToZeroPadStr, all);
    List.DeleteItem(MovePathDelta, all);
    List.DeleteItem(MovePathStepInc, all);
    Idx = 0;
    Repeat (10000)
    {
        If (Idx < 10)
        {
            List.Add(MoveToZeroPadStr, Operator.Join(000, Idx));
        }
        Else
        {
            If (Idx < 100)
            {
                List.Add(MoveToZeroPadStr, Operator.Join(00, Idx));
            }
            Else
            {
                If (Idx < 1000)
                {
                    List.Add(MoveToZeroPadStr, Operator.Join(0, Idx));
                }
                Else
                {
                    List.Add(MoveToZeroPadStr, Idx);
                }
            }
        }
        Idx += 1;
    }
    Repeat (10000)
    {
        List.Add(MovePathDelta, "");
        List.Add(MovePathStepInc, "");
    }
    Idx = 1;
    Repeat (64)
    {
        IdxSub = 1;
        Repeat (64)
        {
            X = (IdxToFile[IdxSub] - IdxToFile[Idx]);
            Y = (IdxToRank[IdxSub] - IdxToRank[Idx]);
            If ((Not ((Idx == IdxSub))) And (((X == 0) Or (Y == 0)) Or (abs(X) == abs(Y))))
            {
                If (abs(X) > abs(Y))
                {
                    Delta = abs(X);
                }
                Else
                {
                    Delta = abs(Y);
                }
                List.ReplaceItem(MovePathDelta, ((Idx * 100) + IdxSub), Delta);
                List.ReplaceItem(MovePathStepInc, ((Idx * 100) + IdxSub), ((8 * (Y / Delta)) + (X / Delta)));
            }
            IdxSub += 1;
        }
        Idx += 1;
    }
}

Define InitMovePosLookup (warp=true)
{
    List.DeleteAll(MovePosLookupBlackMg);
    List.DeleteAll(MovePosLookupWhiteMg);
    List.DeleteAll(MovePosLookupBlackEg);
    List.DeleteAll(MovePosLookupWhiteEg);
    List.DeleteAll(MoveHashLookupBlack);
    List.DeleteAll(MoveHashLookupWhite);
    List.DeleteAll(MovePosLookupBlackLegal);
    List.DeleteAll(MovePosLookupWhiteLegal);
    Repeat (100000)
    {
        List.Add(MovePosLookupBlackEg, "");
        List.Add(MovePosLookupWhiteEg, "");
        List.Add(MovePosLookupBlackMg, "");
        List.Add(MovePosLookupWhiteMg, "");
        List.Add(MoveHashLookupBlack, "");
        List.Add(MoveHashLookupWhite, "");
        List.Add(MovePosLookupBlackLegal, 0);
        List.Add(MovePosLookupWhiteLegal, 0);
    }
    List.DeleteAll(Pieces);
    List.Add(Pieces, GoK_BlackKing);
    List.Add(Pieces, GoK_BlackQueen);
    List.Add(Pieces, GoK_BlackRook);
    List.Add(Pieces, GoK_BlackBishop);
    List.Add(Pieces, GoK_BlackKnight);
    List.Add(Pieces, GoK_BlackPawn);
    List.Add(Pieces, GoK_WhiteKing);
    List.Add(Pieces, GoK_WhiteQueen);
    List.Add(Pieces, GoK_WhiteRook);
    List.Add(Pieces, GoK_WhiteBishop);
    List.Add(Pieces, GoK_WhiteKnight);
    List.Add(Pieces, GoK_WhitePawn);
    IdxOuter = 1;
    Repeat (List.Length(Pieces))
    {
        SourcePiece = Pieces[IdxOuter];
        IsSlidingPiece = 0;
        If (abs(SourcePiece) == GoK_BlackBishop)
        {
            IsSlidingPiece = 1;
        }
        If (abs(SourcePiece) == GoK_BlackRook)
        {
            IsSlidingPiece = 2;
        }
        If (abs(SourcePiece) == GoK_BlackQueen)
        {
            IsSlidingPiece = 3;
        }
        SourceIdx = 0;
        Repeat (65)
        {
            File = IdxToFile[SourceIdx];
            Rank = IdxToRank[SourceIdx];
            Call GetPiecePosScoreRaw(SourcePiece)(SourceIdx);
            PiecePosScoreRes2.Mg = PiecePosScoreRes.Mg;
            PiecePosScoreRes2.Eg = PiecePosScoreRes.Eg;
            Call GetPiecePosHash(SourcePiece)(SourceIdx);
            PiecePosHash2 = PiecePosHash;
            TargetIdx = 0;
            Repeat (65)
            {
                IsLegalMove = 0;
                If (((Not ((SourceIdx == 0))) And (Not ((TargetIdx == 0)))) And (Not ((SourceIdx == TargetIdx))))
                {
                    X = abs((IdxToFile[TargetIdx] - File));
                    Y = abs((IdxToRank[TargetIdx] - Rank));
                    If (IsSlidingPiece == 0)
                    {
                        If (((X < 2) And (Y < 3)) Or ((X < 3) And (Y < 2)))
                        {
                            If (SourcePiece == GoK_BlackPawn)
                            {
                                If (((IdxToRank[TargetIdx] - Rank) == 1) And (X < 2))
                                {
                                    IsLegalMove = 1;
                                }
                                Else
                                {
                                    If ((Rank == 2) And ((TargetIdx - SourceIdx) == 16))
                                    {
                                        IsLegalMove = 1;
                                    }
                                }
                            }
                            Else
                            {
                                If (SourcePiece == GoK_WhitePawn)
                                {
                                    If (((IdxToRank[TargetIdx] - Rank) == -1) And (X < 2))
                                    {
                                        IsLegalMove = 1;
                                    }
                                    Else
                                    {
                                        If ((Rank == 7) And ((TargetIdx - SourceIdx) == -16))
                                        {
                                            IsLegalMove = 1;
                                        }
                                    }
                                }
                                Else
                                {
                                    If (abs(SourcePiece) == GoK_BlackKing)
                                    {
                                        If (((X == 1) And (Y < 2)) Or ((Y == 1) And (X < 2)))
                                        {
                                            IsLegalMove = 1;
                                        }
                                    }
                                    Else
                                    {
                                        If (abs(SourcePiece) == GoK_BlackKnight)
                                        {
                                            If (((X == 1) And (Y == 2)) Or ((X == 2) And (Y == 1)))
                                            {
                                                IsLegalMove = 1;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    Else
                    {
                        If ((X == 0) Or (Y == 0))
                        {
                            If (IsSlidingPiece > 1)
                            {
                                IsLegalMove = 1;
                            }
                        }
                        Else
                        {
                            If (X == Y)
                            {
                                If (Not ((IsSlidingPiece == 2)))
                                {
                                    IsLegalMove = 1;
                                }
                            }
                        }
                    }
                }
                If ((IsLegalMove == 1) Or ((SourceIdx == 0) Or (TargetIdx == 0)))
                {
                    Call GetPiecePosScoreRaw(SourcePiece)(TargetIdx);
                    Call GetPiecePosHash(SourcePiece)(TargetIdx);
                    If (SourcePiece > 0)
                    {
                        IdxOuter2 = ((PieceIdxLookup[SourcePiece] * 10000) + ((SourceIdx * 100) + TargetIdx));
                        List.ReplaceItem(MovePosLookupBlackMg, IdxOuter2, (PiecePosScoreRes.Mg - PiecePosScoreRes2.Mg));
                        List.ReplaceItem(MovePosLookupBlackEg, IdxOuter2, (PiecePosScoreRes.Eg - PiecePosScoreRes2.Eg));
                        List.ReplaceItem(MoveHashLookupBlack, IdxOuter2, (PiecePosHash - PiecePosHash2));
                        List.ReplaceItem(MovePosLookupBlackLegal, IdxOuter2, 1);
                    }
                    Else
                    {
                        IdxOuter2 = ((PieceIdxLookup[(0 - SourcePiece)] * 10000) + ((SourceIdx * 100) + TargetIdx));
                        List.ReplaceItem(MovePosLookupWhiteMg, IdxOuter2, (PiecePosScoreRes.Mg - PiecePosScoreRes2.Mg));
                        List.ReplaceItem(MovePosLookupWhiteEg, IdxOuter2, (PiecePosScoreRes.Eg - PiecePosScoreRes2.Eg));
                        List.ReplaceItem(MoveHashLookupWhite, IdxOuter2, (PiecePosHash - PiecePosHash2));
                        List.ReplaceItem(MovePosLookupWhiteLegal, IdxOuter2, 1);
                    }
                }
                TargetIdx += 1;
            }
            SourceIdx += 1;
        }
        IdxOuter += 1;
    }
}

Define InitOpeningBook (warp=true)
{
    List.DeleteItem(OpeningMoves, all);
    Idx = 1;
    Repeat (List.Length(OpeningMovesNeutral))
    {
        List.Add(OpeningMoves, OpeningMovesNeutral[Idx]);
        Idx += 1;
    }
    If (IsPlayerBlack == 1)
    {
        Idx = 1;
        Repeat (List.Length(OpeningMovesWhite))
        {
            List.Add(OpeningMoves, OpeningMovesWhite[Idx]);
            Idx += 1;
        }
    }
    Else
    {
        Idx = 1;
        Repeat (List.Length(OpeningMovesBlack))
        {
            List.Add(OpeningMoves, OpeningMovesBlack[Idx]);
            Idx += 1;
        }
    }
    If (IsPlayerBlack == 1)
    {
        Idx = 1;
        Repeat (List.Length(OpeningMoves))
        {
            CurrentValue = OpeningMoves[Idx];
            CurrentValue2 = "";
            IdxSub = 1;
            Repeat ((Variable.Length(CurrentValue) / 4))
            {
                CurrentMoveOuter = Operator.Join(Operator.Join(Operator.LetterOf(CurrentValue, IdxSub), Operator.LetterOf(CurrentValue, (IdxSub + 1))), Operator.Join(Operator.LetterOf(CurrentValue, (IdxSub + 2)), Operator.LetterOf(CurrentValue, (IdxSub + 3))));
                Call GetVirtualMove(CurrentMoveOuter);
                CurrentValue2 = Operator.Join(CurrentValue2, MoveToZeroPadStr[(floor(VirtualMove) + 1)]);
                IdxSub += 4;
            }
            If ((Operator.Join(Operator.LetterOf(CurrentValue2, 1), Operator.LetterOf(CurrentValue2, 2)) == 9) Or (Operator.Join(Operator.LetterOf(CurrentValue2, 1), Operator.LetterOf(CurrentValue2, 2)) == 16))
            {
                List.ReplaceItem(OpeningMoves, Idx, "");
            }
            Else
            {
                List.ReplaceItem(OpeningMoves, Idx, CurrentValue2);
            }
            Idx += 1;
        }
    }
}

Define InitOpeningMovesMap (warp=true)
{
    List.DeleteAll(OpeningMovesMapHash);
    List.DeleteAll(OpeningMovesMapMove);
    List.DeleteAll(OpeningMovesMapStack);
    Repeat (List.Length(OpeningMoves))
    {
        List.Add(OpeningMovesMapStack, 1);
    }
    Call CreateCurrentBoardHash;
    Call InitOpeningMovesMapImpl((1 + IsPlayerBlack))(0)("")((1 == 1));
}

Define InitOpeningMovesMapImpl(string Depth)(string GameMovesLen)(string Move)(bool Init) (warp=true)
{
    List.DeleteAll(OpeningMovesRes);
    Idx = 1;
    Repeat (List.Length(OpeningMovesMapStack))
    {
        IsEqual = 0;
        CurrentValue = OpeningMoves[Idx];
        If ((OpeningMovesMapStack[Idx] % 2) == 1)
        {
            IsEqual = 1;
            IdxString = 1;
            If (Not (Init))
            {
                Repeat Until ((IsEqual == 0) Or (IdxString > 4))
                {
                    If (Not ((Operator.LetterOf(Move, IdxString) == Operator.LetterOf(CurrentValue, (GameMovesLen + IdxString)))))
                    {
                        IsEqual = 0;
                    }
                    IdxString += 1;
                }
            }
        }
        If (IsEqual == 1)
        {
            CurrentMoveOuter = Operator.Join(Operator.Join(Operator.LetterOf(CurrentValue, (GameMovesLen + IdxString)), Operator.LetterOf(CurrentValue, ((GameMovesLen + IdxString) + 1))), Operator.Join(Operator.LetterOf(CurrentValue, ((GameMovesLen + IdxString) + 2)), Operator.LetterOf(CurrentValue, ((GameMovesLen + IdxString) + 3))));
            If (Not ((CurrentMoveOuter == "")))
            {
                List.Add(OpeningMovesRes, CurrentMoveOuter);
            }
            List.ReplaceItem(OpeningMovesMapStack, Idx, ((OpeningMovesMapStack[Idx] * 2) + 1));
        }
        Else
        {
            List.ReplaceItem(OpeningMovesMapStack, Idx, ((OpeningMovesMapStack[Idx] * 2) + 0));
        }
        Idx += 1;
    }
    If (List.Length(OpeningMovesRes) > 0)
    {
        List.DeleteAll(TmpList1);
        Call ClearMoveList(Depth);
        IdxOuter = 1;
        Repeat (List.Length(OpeningMovesRes))
        {
            CurrentMoveOuter = OpeningMovesRes[IdxOuter];
            List.Add(OpeningMovesMapHash, CurrentBoardHash);
            List.Add(OpeningMovesMapMove, CurrentMoveOuter);
            If (Not (List.ContainsItem(TmpList1, CurrentMoveOuter)))
            {
                Call AddMoveToList(CurrentMoveOuter)(Depth);
                List.Add(TmpList1, CurrentMoveOuter);
            }
            IdxOuter += 1;
        }
        List.ReplaceItem(MovesIdx, Depth, 1);
        Repeat (MovesCount[Depth])
        {
            Call ApplyMoveLight(Depth);
            Call GetCurrentMove(Depth);
            If Init
            {
                Call InitOpeningMovesMapImpl((Depth + 1))(0)(AppliedMove[Depth])((1 == 0));
            }
            Else
            {
                Call InitOpeningMovesMapImpl((Depth + 1))((GameMovesLen + 4))(AppliedMove[Depth])((1 == 0));
            }
            Call RevertMoveLight(Depth);
            List.ReplaceItem(MovesIdx, Depth, (MovesIdx[Depth] + 1));
        }
    }
    Idx = 1;
    Repeat (List.Length(OpeningMovesMapStack))
    {
        List.ReplaceItem(OpeningMovesMapStack, Idx, floor((OpeningMovesMapStack[Idx] / 2)));
        Idx += 1;
    }
}

Define InitPieceSquareTables (warp=true)
{
    List.DeleteItem(PawnPieceSquare, all);
    Call LoadList(" 0,  0,  0,  0,  0,  0,  0,  0,  -1,  2,  7,  9,  9,  7,  2, -1,  -7, -3,  8, 11, 11,  8, -3, -7,  -5, -5,  6, 14, 14,  6, -5, -5,    4, -3, -4, 14, 14, -4, -3,  4,  -5, -7, -3, 11, 11, -3, -7, -5,  -4,  4, -5,  9,  9, -5,  4, -4,    0,  0,  0,  0,  0,  0,  0,  0")("PawnPieceSquare");
    List.DeleteItem(PawnPieceSquareEndgame, all);
    Call LoadList(" 0,  0,  0,  0,  0,  0,  0,  0, -7, -2,  4,  5,  5,  4, -2, -7, -3, -4, -2,  2,  2, -2, -4, -3, -1, -3, -5, -4, -4, -5, -3, -1,  4,  4, -1, -6, -6, -1,  4,  4, 10,  6,  7, 14, 14,  7,  6, 10,  2, -2,  8, 11, 11,  8, -2,  2,  0,  0,  0,  0,  0,  0,  0,  0")("PawnPieceSquareEndgame");
    List.DeleteItem(KnightPieceSquare, all);
    Call LoadList("-79, -45, -38, -37, -37, -38, -45, -79, -37, -18, -11,  -4,  -4, -11, -18, -37, -30,  -9,   2,   9,   9,   2,  -9, -30, -13,   2,  19,  22,  22,  19,   2, -13, -14,   6,  20,  24,  24,  20,   6, -14,  -5,  13,  30,  26,  26,  30,  13,  -5, -31, -10,   3,  17,  17,   3, -10, -31, -94, -38, -25, -15, -15, -25, -38, -94")("KnightPieceSquare");
    List.DeleteItem(KnightPieceSquareEndgame, all);
    Call LoadList("-49, -35, -22,  -8,  -8, -22, -35, -49, -33, -26,  -7,   3,   3,  -7, -26, -33, -18, -15,  -2,  13,  13,  -2, -15, -18, -17,   0,   6,  16,  16,   6,   0, -17, -19,  -9,   2,  16,  16,   2,  -9, -19, -24, -18,  -8,   9,   9,  -8, -18, -24, -30, -21, -17,   8,   8, -17, -21, -30, -46, -42, -25,  -8,  -8, -25, -42, -46")("KnightPieceSquareEndgame");
    List.DeleteItem(BishopPieceSquare, all);
    Call LoadList(" -21,  -2,  -5, -13, -13,  -5,  -2, -21,   -8,   3,   7,   1,   1,   7,   3,  -8,   -4,  11,  -1,   7,   7,  -1,  11,  -4,    0,   4,  12,  17,  17,  12,   4,   0,   -3,  14,  11,  13,  13,  11,  14,  -3,   -8,   2,   0,   4,   4,   0,   2,  -8,  -10,  -9,   5,  -3,  -3,   5,  -9, -10,  -23,  -1,  -6, -12, -12,  -6,  -1, -23")("BishopPieceSquare");
    List.DeleteItem(BishopPieceSquareEndgame, all);
    Call LoadList(" -30, -14, -16,  -4,  -4, -16, -14, -30,  -18,  -6,  -7,   0,   0,  -7,  -6, -18,   -8,   0,  -3,   6,   6,  -3,   0,  -8,  -12,  -1,   0,   8,   8,   0,  -1, -12,  -11,  -3,  -5,   8,   8,  -5,  -3, -11,  -12,   1,   0,   8,   8,   0,   1, -12,  -16,  -8,  -3,   4,   4,  -3,  -8, -16,  -24, -19, -18,  -9,  -9, -18, -19, -24")("BishopPieceSquareEndgame");
    List.DeleteItem(RookPieceSquare, all);
    Call LoadList("-11,  -6,  -3,   1,   1,  -3,  -6, -11,  -8,  -5,  -2,   4,   4,  -2,  -5,  -8, -10,  -3,   1,   0,   0,   1,  -3, -10,  -6,  -2,  -2,  -3,  -3,  -2,  -2,  -6, -11,  -6,   0,   3,   3,   0,  -6, -11, -11,  -2,   2,   5,   5,   2,  -2, -11,  -4,   3,   5,   6,   6,   5,   3,  -4, -10, -11,  -3,   2,   2,  -3, -11, -10")("RookPieceSquare");
    List.DeleteItem(RookPieceSquareEndgame, all);
    Call LoadList(" -1,  -3,  -1,  -1,  -1,  -1,  -3,  -1,  -5,  -3,   0,   0,   0,   0,  -3,  -5,   5,  -2,   1,  -1,  -1,   1,  -2,   5,  -2,   1,  -4,   4,   4,  -4,   1,  -2,  -4,   2,   2,  -4,  -4,   2,   2,  -4,   1,  -1,  -5,   3,   3,  -5,  -1,   1,   0,   1,   8,  -4,  -4,   8,   1,   0,   6,  -3,   6,   3,   3,   6,  -3,   6")("RookPieceSquareEndgame");
    List.DeleteItem(QueenPieceSquare, all);
    Call LoadList("  1,  -2,  -2,   2,   2,  -2,  -2,   1,  -1,   2,   4,   6,   6,   4,   2,  -1,  -1,   3,   6,   3,   3,   6,   3,  -1,   2,   2,   4,   4,   4,   4,   2,   2,   0,   7,   6,   2,   2,   6,   7,   0,  -2,   5,   3,   4,   4,   3,   5,  -2,  -2,   3,   5,   4,   4,   5,   3,  -2,  -1,  -1,   0,  -1,  -1,   0,  -1,  -1")("QueenPieceSquare");
    List.DeleteItem(QueenPieceSquareEndgame, all);
    Call LoadList("-32, -27, -22, -12, -12, -22, -27, -32, -26, -15, -10,  -2,  -2, -10, -15, -26, -18,  -8,  -4,   1,   1,  -4,  -8, -18, -11,  -1,   6,  11,  11,   6,  -1, -11, -14,  -3,   4,  10,  10,   4,  -3, -14, -18,  -8,  -6,   0,   0,  -6,  -8, -18, -23, -13, -11,  -4,  -4, -11, -13, -23, -35, -24, -20, -17, -17, -20, -24, -35")("QueenPieceSquareEndgame");
    List.DeleteItem(KingPieceSquare, all);
    Call LoadList("128, 153, 128,  89,  89, 128, 153, 128, 130, 143, 112,  86,  86, 112, 143, 130,  93, 119,  79,  56,  56,  79, 119,  93,  79,  90,  64,  51,  51,  64,  90,  79,  68,  83,  53,  32,  32,  53,  83,  68,  56,  75,  40,  17,  17,  40,  75,  56,  41,  56,  30,  12,  12,  30,  56,  41,  30,  41,  23,   0,   0,  23,  41,  30")("KingPieceSquare");
    List.DeleteItem(KingPieceSquareEndgame, all);
    Call LoadList("  0,  19,  38,  44,  44,  38,  19,   0,  27,  46,  65,  62,  62,  65,  46,  27,  40,  65,  77,  81,  81,  77,  65,  40,  48,  71,  79,  79,  79,  79,  71,  48,  46,  78,  92,  91,  91,  92,  78,  46,  41,  77,  82,  89,  89,  82,  77,  41,  19,  46,  60,  66,  66,  60,  46,  19,   2,  28,  35,  35,  35,  35,  28,   2")("KingPieceSquareEndgame");
}

Define IsBlackKingCheckMate (warp=true)
{
    IsBlackKingCheckMateRes = 0;
    Call CalcBoardAttackedByMove(2);
    If (IsBlackChecked == 1)
    {
        IsBlackKingCheckMateRes = 1;
        Call GenerateMovesPublic(1);
        List.ReplaceItem(MovesIdx, 1, 1);
        Repeat (MovesCount[1])
        {
            If (IsBlackKingCheckMateRes == 1)
            {
                Call ApplyMove(1);
                Call CalcBoardAttackedByMove(2);
                If (IsBlackChecked == 0)
                {
                    IsBlackKingCheckMateRes = 0;
                }
                Call RevertMove(1);
            }
            List.ReplaceItem(MovesIdx, 1, (MovesIdx[1] + 1));
        }
    }
}

Define IsCheckingPiece(string Idx) (warp=true)
{
    Call IsCheckingPieceImpl(Idx)(Board[(Idx + 0)]);
}

Define IsCheckingPieceDiscovery(string SourceIdx)(string TargetIdx)(string Depth) (warp=true)
{
    IsCheckingPieceRes = 0;
    If ((Depth % 2) == 1)
    {
        If (Operator.LetterOf(BoardAttackedByBlackSnapshot[Depth], SourceIdx) > 0)
        {
            SourceIdxOuter1 = ((Operator.LetterOf(BoardAttackedByBlackPieceSnapshot[Depth], ((SourceIdx * 2) - 1)) * 10) + Operator.LetterOf(BoardAttackedByBlackPieceSnapshot[Depth], (SourceIdx * 2)));
            If (Board[SourceIdxOuter1] > GoK_BlackKnight)
            {
                Call IsCheckingPiece(SourceIdxOuter1);
            }
        }
    }
    Else
    {
        If (Operator.LetterOf(BoardAttackedByWhiteSnapshot[Depth], SourceIdx) > 0)
        {
            SourceIdxOuter1 = ((Operator.LetterOf(BoardAttackedByWhitePieceSnapshot[Depth], ((SourceIdx * 2) - 1)) * 10) + Operator.LetterOf(BoardAttackedByWhitePieceSnapshot[Depth], (SourceIdx * 2)));
            If (Board[SourceIdxOuter1] < GoK_WhiteKnight)
            {
                Call IsCheckingPiece(SourceIdxOuter1);
            }
        }
    }
}

Define IsCheckingPieceImpl(string Idx)(string Piece) (warp=true)
{
    IsCheckingPieceRes = 0;
    CurrentPiece = Piece;
    If (abs(CurrentPiece) == GoK_BlackKing)
    {
        Stop(this script);
    }
    If (CurrentPiece > 0)
    {
        If (MovePosLookupBlackLegal[((PieceIdxLookup[(CurrentPiece + 0)] * 10000) + ((Idx * 100) + WhiteKingIdx))] == 0)
        {
            Stop(this script);
        }
        If (CurrentPiece == GoK_BlackPawn)
        {
            If (IdxToFile[(Idx + 0)] == IdxToFile[(WhiteKingIdx + 0)])
            {
                Stop(this script);
            }
            IsCheckingPieceRes = 1;
            Stop(this script);
        }
        If (CurrentPiece == GoK_BlackKnight)
        {
            IsCheckingPieceRes = 1;
            Stop(this script);
        }
        CurrentMove = ((Idx * 100) + WhiteKingIdx);
    }
    Else
    {
        If (CurrentPiece < 0)
        {
            If (MovePosLookupWhiteLegal[((PieceIdxLookup[(0 - CurrentPiece)] * 10000) + ((Idx * 100) + BlackKingIdx))] == 0)
            {
                Stop(this script);
            }
            If (CurrentPiece == GoK_WhitePawn)
            {
                If (IdxToFile[(Idx + 0)] == IdxToFile[(BlackKingIdx + 0)])
                {
                    Stop(this script);
                }
                IsCheckingPieceRes = 1;
                Stop(this script);
            }
            If (CurrentPiece == GoK_WhiteKnight)
            {
                IsCheckingPieceRes = 1;
                Stop(this script);
            }
            CurrentMove = ((Idx * 100) + BlackKingIdx);
        }
    }
    SourceIdx = Idx;
    IdxInc = MovePathStepInc[(CurrentMove + 0)];
    Repeat ((MovePathDelta[(CurrentMove + 0)] - 1))
    {
        SourceIdx += IdxInc;
        If (Not ((Board[(SourceIdx + 0)] == 0)))
        {
            Stop(this script);
        }
    }
    IsCheckingPieceRes = 1;
}

Define IsDrawByMaterial (warp=true)
{
    IsDrawRes = 0;
    CurrentValue = 0;
    CurrentValue2 = 0;
    Idx = 1;
    Repeat (64)
    {
        CurrentPiece = Board[Idx];
        If (Not ((CurrentPiece == 0)))
        {
            If ((CurrentPiece == GoK_BlackBishop) Or (CurrentPiece == GoK_BlackKnight))
            {
                CurrentValue += 1;
            }
            Else
            {
                If ((CurrentPiece == GoK_WhiteBishop) Or (CurrentPiece == GoK_WhiteKnight))
                {
                    CurrentValue2 += 1;
                }
                Else
                {
                    If (Not ((abs(CurrentPiece) == GoK_BlackKing)))
                    {
                        Stop(this script);
                    }
                }
            }
        }
        Idx += 1;
    }
    If ((CurrentValue + CurrentValue2) < 2)
    {
        IsDrawRes = 1;
    }
}

Define IsDrawByStalemate(string Depth) (warp=true)
{
    Call CalcBoardAttackedByMoveChecked((Depth + 1));
    If ((((Depth % 2) == 1) And (IsBlackChecked == 1)) Or (((Depth % 2) == 0) And (IsWhiteChecked == 1)))
    {
        IsDrawRes = 0;
        Stop(this script);
    }
    List.ReplaceItem(Quiescence, Depth, 0);
    Call CalcBoardAttackedByMove((Depth + 1));
    Call StoreAttackInfo((Depth + 1))(Depth);
    List.ReplaceItem(BoardAttackedCalculated, Depth, 1);
    Call GenerateMovesImplWrapper(Depth)((1 == 0))((1 == 0));
    List.ReplaceItem(BoardAttackedCalculated, Depth, 0);
    If (Quiescence[Depth] == 0)
    {
        MoveCount += MovesCount[Depth];
    }
    Else
    {
        MoveCountQ += MovesCount[Depth];
    }
    List.ReplaceItem(MovesIdx, Depth, 1);
    IsDrawRes = 1;
    Repeat (MovesCount[Depth])
    {
        Call ApplyMove(Depth);
        Call CalcBoardAttackedByMoveChecked((Depth + 1));
        If ((((Depth % 2) == 1) And (IsBlackChecked == 0)) Or (((Depth % 2) == 0) And (IsWhiteChecked == 0)))
        {
            IsDrawRes = 0;
            Call RevertMove(Depth);
            Stop(this script);
        }
        Call RevertMove(Depth);
        List.ReplaceItem(MovesIdx, Depth, (MovesIdx[Depth] + 1));
    }
}

Define IsEngineValidMove(string Move) (warp=true)
{
    Call GenerateMovesPublic(1);
    If List.ContainsItem(Moves1, Move)
    {
        ValidMoveRes = 1;
    }
    Else
    {
        ValidMoveRes = 0;
    }
}

Define IsLowerCase(string Char) (warp=true)
{
    Chars = "";
    CharsIdx = 1;
    Repeat (Variable.Length(CharsUpperCase))
    {
        If (Operator.LetterOf(CharsUpperCase, CharsIdx) == Char)
        {
            Chars = Operator.Join(Chars, Char);
        }
        Else
        {
            Chars = Operator.Join(Chars, Operator.LetterOf(CharsUpperCase, CharsIdx));
        }
        CharsIdx += 1;
    }
    Looks.SwitchCostumeTo(_ABCDEFGHIJKLMNOPQRSTUVWXYZ);
    Looks.SwitchCostumeTo(Chars);
    If (Costume.GetNumberName(number) == 1)
    {
        IsLowerCaseRes = 0;
    }
    Else
    {
        IsLowerCaseRes = 1;
    }
}

Define IsQuiescentCheckCond(string Depth) (warp=true)
{
    Call //("Quiescence search extension for checking moves, esp. check sequences. Return value defined whether check sequences should pursued at this point");
    IsQuiescentCheckRes = 0;
    If (Level > 4)
    {
        If ((IsScratch3 == 1) Or (1 == 1))
        {
            If (Quiescence[(Depth - 1)] == 0)
            {
                If (CheckedState[(Depth - 1)] == 1)
                {
                    IsQuiescentCheckRes = 1;
                    Stop(this script);
                }
            }
            If (1 == 0)
            {
                If (Quiescence[(Depth - 2)] == 0)
                {
                    If (CheckedState[(Depth - 1)] == 1)
                    {
                        IsQuiescentCheckRes = 1;
                        Stop(this script);
                    }
                }
            }
        }
    }
}

Define IsReachableSlider(string FromIdx)(string ToIdx) (warp=true)
{
    IsReachableRes = 0;
    Piece = Board[(FromIdx + 0)];
    If ((abs(Piece) < GoK_BlackBishop) Or (abs(Piece) > GoK_BlackQueen))
    {
        Stop(this script);
    }
    CurrentMove = ((FromIdx * 100) + ToIdx);
    IdxIsReachable = ((PieceIdxLookup[abs(Piece)] * 10000) + CurrentMove);
    If (((Piece > 0) And (MovePosLookupBlackLegal[IdxIsReachable] == 0)) Or ((Piece < 0) And (MovePosLookupWhiteLegal[IdxIsReachable] == 0)))
    {
        Stop(this script);
    }
    IdxIsReachable = FromIdx;
    IdxInc = MovePathStepInc[(CurrentMove + 0)];
    Repeat ((MovePathDelta[(CurrentMove + 0)] - 1))
    {
        SourceIdx += IdxInc;
        If (Not ((Board[(SourceIdx + 0)] == 0)))
        {
            Stop(this script);
        }
    }
    IsReachableRes = 1;
}

Define IsWhiteKingCheckMate (warp=true)
{
    IsWhiteKingCheckMateRes = 0;
    Call CalcBoardAttackedByMove(1);
    If (IsWhiteChecked == 1)
    {
        IsWhiteKingCheckMateRes = 1;
        Call GenerateMovesPublic(2);
        List.ReplaceItem(MovesIdx, 2, 1);
        Repeat (MovesCount[2])
        {
            If (IsWhiteKingCheckMateRes == 1)
            {
                Call ApplyMove(2);
                Call CalcBoardAttackedByMove(1);
                If (IsWhiteChecked == 0)
                {
                    IsWhiteKingCheckMateRes = 0;
                }
                Call RevertMove(2);
            }
            List.ReplaceItem(MovesIdx, 2, (MovesIdx[2] + 1));
        }
    }
}

Define LoadList(string Data)(string ListName) (warp=true)
{
    IdxString = 1;
    CurrentValue = "";
    Repeat Until (IdxString > Variable.Length(Data))
    {
        If ((Not ((Operator.LetterOf(Data, IdxString) == " "))) And (Not ((Operator.LetterOf(Data, IdxString) == ","))))
        {
            CurrentValue = Operator.Join(CurrentValue, Operator.LetterOf(Data, IdxString));
        }
        If ((Operator.LetterOf(Data, IdxString) == ",") Or (IdxString == Variable.Length(Data)))
        {
            If (ListName == "PawnPieceSquare")
            {
                List.Add(PawnPieceSquare, Operator.Round((CurrentValue * 1)));
            }
            If (ListName == "PawnPieceSquareEndgame")
            {
                List.Add(PawnPieceSquareEndgame, Operator.Round((CurrentValue * 1)));
            }
            If (ListName == "KingPieceSquare")
            {
                List.Add(KingPieceSquare, Operator.Round((CurrentValue * 0.2)));
            }
            If (ListName == "KingPieceSquareEndgame")
            {
                List.Add(KingPieceSquareEndgame, Operator.Round((CurrentValue * 0.5)));
            }
            If (ListName == "QueenPieceSquare")
            {
                List.Add(QueenPieceSquare, Operator.Round((CurrentValue * 1)));
            }
            If (ListName == "QueenPieceSquareEndgame")
            {
                List.Add(QueenPieceSquareEndgame, Operator.Round((CurrentValue * 1)));
            }
            If (ListName == "RookPieceSquare")
            {
                List.Add(RookPieceSquare, Operator.Round((CurrentValue * 1)));
            }
            If (ListName == "RookPieceSquareEndgame")
            {
                List.Add(RookPieceSquareEndgame, Operator.Round((CurrentValue * 1)));
            }
            If (ListName == "BishopPieceSquare")
            {
                List.Add(BishopPieceSquare, Operator.Round((CurrentValue * 1)));
            }
            If (ListName == "BishopPieceSquareEndgame")
            {
                List.Add(BishopPieceSquareEndgame, Operator.Round((CurrentValue * 1)));
            }
            If (ListName == "KnightPieceSquare")
            {
                List.Add(KnightPieceSquare, Operator.Round((CurrentValue * 0.67)));
            }
            If (ListName == "KnightPieceSquareEndgame")
            {
                List.Add(KnightPieceSquareEndgame, Operator.Round((CurrentValue * 0.5)));
            }
            If (ListName == "KnightMobilityBonus")
            {
                List.Add(KnightMobilityBonus, Operator.Round((CurrentValue * 0.5)));
            }
            If (ListName == "BishopMobilityBonus")
            {
                List.Add(BishopMobilityBonus, Operator.Round((CurrentValue * 0.5)));
            }
            If (ListName == "RookMobilityBonus")
            {
                List.Add(RookMobilityBonus, Operator.Round((CurrentValue * 0.5)));
            }
            If (ListName == "QueenMobilityBonus")
            {
                List.Add(QueenMobilityBonus, Operator.Round((CurrentValue * 0.5)));
            }
            If (ListName == "PawnStorm")
            {
                List.Add(PawnStorm, Operator.Round((CurrentValue * 0.8)));
            }
            If (ListName == "PawnShelter")
            {
                List.Add(PawnShelter, Operator.Round((CurrentValue * 1.2)));
            }
            If (ListName == "ImbalanceSameSide")
            {
                List.Add(ImbalanceSameSide, CurrentValue);
            }
            If (ListName == "ImbalanceOppSide")
            {
                List.Add(ImbalanceOppSide, CurrentValue);
            }
            If (ListName == "ImbalanceFactor")
            {
                List.Add(ImbalanceFactor, CurrentValue);
            }
            If (ListName == "PawnPassedFilePenalty")
            {
                List.Add(PawnPassedFilePenalty, Operator.Round((CurrentValue * 1)));
            }
            If (ListName == "PawnPassedRankBonus")
            {
                List.Add(PawnPassedRankBonus, Operator.Round((CurrentValue * 1)));
            }
            If (ListName == "PawnConnectedBonus")
            {
                List.Add(PawnConnectedBonus, Operator.Round((CurrentValue * 1)));
            }
            If (ListName == "PawnPhalanxBonus")
            {
                List.Add(PawnPhalanxBonus, Operator.Round((CurrentValue * 1)));
            }
            CurrentValue = "";
        }
        IdxString += 1;
    }
}

Define Log(string Txt1)(string Txt2)(string Txt3)(string Txt4)(string Txt5)(string Txt6)(string Txt7)(string Txt8) (warp=true)
{
    Tmp = (floor((((Sensing.DaysSince2000() * 86400) - ThinkTimeStart) * 1000)) / 1000);
    If Operator.Contains(Tmp, ".")
    {
        If ((Operator.LetterOf(Tmp, (Variable.Length(Tmp) - 1)) == ".") Or (Operator.LetterOf(Tmp, (Variable.Length(Tmp) - 2)) == "."))
        {
            Tmp = Operator.Join(Tmp, 0);
        }
    }
    Else
    {
        Tmp = Operator.Join(Tmp, .000);
    }
    List.Add(Logfile, Operator.Join(Operator.Join(Tmp, ": "), Operator.Join(Txt1, Operator.Join(Txt2, Operator.Join(Txt3, Operator.Join(Txt4, Operator.Join(Txt5, Operator.Join(Txt6, Operator.Join(Txt7, Txt8)))))))));
}

Define OnEvaluationChanged(string Eval) (warp=false)
{
    If (Level > 2)
    {
        If (Eval > 1000)
        {
            GoK_EvaluationValue = 100;
        }
        Else
        {
            If (Eval < -1000)
            {
                GoK_EvaluationValue = -100;
            }
            Else
            {
                GoK_EvaluationValue = (Eval / 10);
            }
        }
    }
    Else
    {
        GoK_EvaluationValue = 0;
    }
    Event.Broadcast("evaluationvaluechanged");
    Control.Wait(0);
}

Define OnProgressChanged(string Progress) (warp=false)
{
    If (Progress < 100)
    {
        GoK_ProgressValue = Progress;
    }
    Else
    {
        GoK_ProgressValue = 100;
    }
    Event.Broadcast("progressvaluechanged");
    Control.Wait(0);
}

Define OnRestart (warp=true)
{
    Looks.Say("");
    List.DeleteAll(Logfile);
    List.Hide(BoardHistory);
    List.Hide(GameMovesAN);
    List.Hide(ExportData);
    List.Hide(ExportMoves);
    List.Hide(Logfile);
    List.Hide(Profile_Data);
    Variable.Hide(IdxDeepening);
    Variable.Hide(BestMinMaxRes);
    Variable.Hide(BestMove);
    Variable.Hide(NPS);
    Variable.Hide(MPS);
    Variable.Hide(PV);
    Variable.Hide(CustomThinkTime);
    ProfilerMode = -1;
    DebugMode = -1;
    TimeControl = -1;
    IdxDeepening = "";
    BestMinMaxRes = "";
    BestMove = "";
    NPS = "";
    MPS = "";
    CustomThinkTime = 0;
}

Define PickMove(string Depth)(bool Quiescence) (warp=true)
{
    Call //("Staged move-generator implementation");
    If (PickPhase[(Depth + 0)] == 1)
    {
        Call //("Phase 1: Look up hash-move from transposition table");
        List.ReplaceItem(HashMoveMetaData, Depth, "");
        List.ReplaceItem(HashMove, Depth, "");
        List.ReplaceItem(PickedMoves, Depth, ":");
        List.ReplaceItem(PickedMoveCount, Depth, 0);
        List.ReplaceItem(MovesCount, Depth, 0);
        List.ReplaceItem(MovesIdx, Depth, 0);
        List.ReplaceItem(MovesIdxBestMove, Depth, 0);
        List.DeleteAll(CalcMovesMoveList);
        List.DeleteAll(CalcMovesScoreList);
        List.DeleteAll(TmpList1);
        List.DeleteAll(TmpList2);
        Call ClearMoveList(Depth);
        If ((Depth > 1) Or (1 == 0))
        {
            Call TTProbeNode(CurrentBoardHash)(Depth);
            If (TTProbeRes == 1)
            {
                If (Not ((TTProbeCheckedRes == "")))
                {
                    Call //("Retrieve attack tables from TT");
                    List.ReplaceItem(CheckedState, Depth, TTProbeCheckedRes);
                    If ((Not ((TTProbeBoardAttackedByOpp == ""))) And (Not ((TTProbeBoardAttackedByOppPiece == ""))))
                    {
                        List.ReplaceItem(CheckedStateAttackLines, Depth, TTProbeCheckedAttackLinesRes);
                        If ((Depth % 2) == 1)
                        {
                            List.ReplaceItem(BoardAttackedByWhiteSnapshot, Depth, TTProbeBoardAttackedByOpp);
                            List.ReplaceItem(BoardAttackedByWhitePieceSnapshot, Depth, TTProbeBoardAttackedByOppPiece);
                        }
                        Else
                        {
                            List.ReplaceItem(BoardAttackedByBlackSnapshot, Depth, TTProbeBoardAttackedByOpp);
                            List.ReplaceItem(BoardAttackedByBlackPieceSnapshot, Depth, TTProbeBoardAttackedByOppPiece);
                        }
                        List.ReplaceItem(BoardAttackedCalculated, Depth, 1);
                    }
                }
                If (Not ((TTProbeBestMoveRes == "")))
                {
                    SourceIdx = floor((TTProbeBestMoveRes / 100));
                    TargetIdx = floor((TTProbeBestMoveRes % 100));
                    SourcePiece = Board[(SourceIdx + 0)];
                    If (Not ((SourceIdx == 0)))
                    {
                        Call GetMoveScore(Board[SourceIdx])(Board[TargetIdx])(SourceIdx)(TargetIdx)(TTProbeBestMoveRes)(Depth);
                        If (((Not (Quiescence)) And ((Not ((TTProbeHorizonRes == -1))) Or (Not ((abs(MoveScoreRes) < 7000000))))) Or (Quiescence And (TTProbeHorizonRes == -1)))
                        {
                            If (1 == 0)
                            {
                                If (abs(SourcePiece) == GoK_BlackKing)
                                {
                                    Call CalcBoardAttackedOnDemand(Depth)((1 == 0))((1 == 1))(99);
                                }
                                Else
                                {
                                    Call CalcBoardAttackedOnDemand(Depth)(Quiescence)((1 == 1))(0);
                                }
                                Call GenerateMovesForSourceEx(Depth)(floor((TTProbeBestMoveRes / 100)))((1 == 0))(Quiescence);
                                If List.ContainsItem(CalcMovesMoveList, TTProbeBestMoveRes)
                                {
                                }
                            }
                            Call ClearMoveList(Depth);
                            Call AddMoveToList(TTProbeBestMoveRes)(Depth);
                            List.ReplaceItem(MovesIdx, Depth, 1);
                            Call ApplyMove(Depth);
                            Call GetNormalizedMove(AppliedMove[Depth]);
                            List.ReplaceItem(PickedMoves, Depth, Operator.Join(PickedMoves[(Depth + 0)], Operator.Join(NormalizedMoveRes, ":")));
                            List.ReplaceItem(PickedMoveCount, Depth, (PickedMoveCount[Depth] + 1));
                            List.ReplaceItem(PickPhase, Depth, 2);
                            List.ReplaceItem(PickMoveRes, Depth, 1);
                            List.ReplaceItem(HashMove, Depth, AppliedMove[Depth]);
                            List.ReplaceItem(HashMoveMetaData, Depth, (Not ((TargetPieces[Depth] == 0))));
                            Stop(this script);
                        }
                    }
                }
            }
        }
        List.ReplaceItem(PickPhase, Depth, 2);
    }
    Call //("Phase 2: Search for MVV-LVA captures via attack tables (and from recently moved pieces when attack tables not up-to-date)");
    If (PickPhase[(Depth + 0)] == 2)
    {
        If ((Depth < 4) Or ((CheckedState[(Depth + 0)] == 1) Or (IsEndgame2 == 1)))
        {
            List.ReplaceItem(PickPhase, Depth, 6);
        }
        Else
        {
            Call //("Generate attack tables if not done before");
            Call CalcBoardAttackedOnDemand(Depth)(Quiescence)((1 == 1))(99);
            Call //("Update current depth attack tables (esp. attacks of current turn) from previous depth if applicable");
            List.DeleteAll(TmpList1);
            List.DeleteAll(TmpList2);
            List.DeleteAll(TmpList3);
            List.DeleteAll(TmpList4);
            FactorOuter = (((Depth % 2) * 2) - 1);
            If ((Depth % 2) == 1)
            {
                TmpAttackedByOppSnapshot = BoardAttackedByBlackSnapshot[Depth];
                TmpAttackedByOppPieceSnapshot = BoardAttackedByBlackPieceSnapshot[Depth];
            }
            Else
            {
                TmpAttackedByOppSnapshot = BoardAttackedByWhiteSnapshot[Depth];
                TmpAttackedByOppPieceSnapshot = BoardAttackedByWhitePieceSnapshot[Depth];
            }
            Call //("Fixup for outdated attack tables: Inspect applied moves, find attack sources not present in current attack table");
            Idx = (Depth - 2);
            Repeat Until ((Idx < 1) Or (BoardAttackedCalculated[(Idx + 1)] == 1))
            {
                SourceIdxOuter2 = floor((AppliedMove[(Idx + 0)] % 100));
                If ((SourceIdxOuter2 > 0) And (SourceIdxOuter2 < 65))
                {
                    If ((Board[(SourceIdxOuter2 + 0)] * FactorOuter) > 0)
                    {
                        If (Not (List.ContainsItem(TmpList3, SourceIdxOuter2)))
                        {
                            List.Add(TmpList3, SourceIdxOuter2);
                            List.Add(TmpList4, ((PieceIdxLookup[abs(Board[SourceIdxOuter2])] * 10000) + (SourceIdxOuter2 * 100)));
                        }
                    }
                }
                Idx += -2;
            }
            Call //("Look for net positive attacks via attack tables");
            TargetIdxOuter2 = 1;
            Repeat (64)
            {
                If ((Board[(TargetIdxOuter2 + 0)] * FactorOuter) < 0)
                {
                    If (Operator.LetterOf(TmpAttackedByOppSnapshot, TargetIdxOuter2) > 0)
                    {
                        SourceIdxOuter2 = ((Operator.LetterOf(TmpAttackedByOppPieceSnapshot, ((TargetIdxOuter2 * 2) - 1)) * 10) + Operator.LetterOf(TmpAttackedByOppPieceSnapshot, (TargetIdxOuter2 * 2)));
                        SourcePieceOuter2 = Board[(SourceIdxOuter2 + 0)];
                        If ((SourcePieceOuter2 * FactorOuter) > 0)
                        {
                            IdxOuter2 = ((PieceIdxLookup[abs(SourcePieceOuter2)] * 10000) + ((SourceIdxOuter2 * 100) + TargetIdxOuter2));
                            If ((((Depth % 2) == 1) And (MovePosLookupBlackLegal[(IdxOuter2 + 0)] == 1)) Or (((Depth % 2) == 0) And (MovePosLookupWhiteLegal[(IdxOuter2 + 0)] == 1)))
                            {
                                Call StagedMoveGenMVVLVA(Depth)(SourceIdxOuter2)(TargetIdxOuter2)(abs(SourcePieceOuter2))(abs(Board[(TargetIdxOuter2 + 0)]))(floor((AppliedMove[(Depth - 1)] % 100)));
                            }
                        }
                    }
                    Call //("Look for net positive attacks created previous plies (and attack table not up to date) ");
                    IdxOuter3 = 1;
                    Repeat (List.Length(TmpList3))
                    {
                        IdxOuter2 = (TmpList4[(IdxOuter3 + 0)] + TargetIdxOuter2);
                        If ((((Depth % 2) == 1) And (MovePosLookupBlackLegal[(IdxOuter2 + 0)] == 1)) Or (((Depth % 2) == 0) And (MovePosLookupWhiteLegal[(IdxOuter2 + 0)] == 1)))
                        {
                            SourceIdxOuter2 = TmpList3[IdxOuter3];
                            Call StagedMoveGenMVVLVA(Depth)(SourceIdxOuter2)(TargetIdxOuter2)(abs(Board[(SourceIdxOuter2 + 0)]))(abs(Board[(TargetIdxOuter2 + 0)]))(floor((AppliedMove[(Depth - 1)] % 100)));
                        }
                        IdxOuter3 += 1;
                    }
                }
                TargetIdxOuter2 += 1;
            }
            Call //("Sort found captures and prepare for move loop ");
            If (List.Length(TmpList1) > 0)
            {
                If (List.Length(TmpList1) == 1)
                {
                    Call AddMoveToList(TmpList1[1])(Depth);
                }
                Else
                {
                    List.DeleteAll(CalcMovesMoveList);
                    List.DeleteAll(CalcMovesScoreList);
                    Idx = 1;
                    Repeat (List.Length(TmpList1))
                    {
                        List.Add(CalcMovesMoveList, TmpList1[Idx]);
                        List.Add(CalcMovesScoreList, TmpList2[Idx]);
                        Idx += 1;
                    }
                    Call SortMoveList((Depth + 2));
                    List.ReplaceItem(MovesIdx, (Depth + 2), 1);
                    Repeat (MovesCount[(Depth + 2)])
                    {
                        Call GetCurrentMove((Depth + 2));
                        Call AddMoveToList(CurrentMove)(Depth);
                        List.ReplaceItem(MovesIdx, (Depth + 2), (MovesIdx[(Depth + 2)] + 1));
                    }
                }
            }
            List.ReplaceItem(PickPhase, Depth, 3);
        }
    }
    Call //("Phase 3: Return moves found in phase 2 on subsequent PickMove() invocations");
    If (PickPhase[(Depth + 0)] == 3)
    {
        If (MovesIdx[(Depth + 0)] < MovesCount[(Depth + 0)])
        {
            List.ReplaceItem(MovesIdx, Depth, (MovesIdx[(Depth + 0)] + 1));
            Call ApplyMove(Depth);
            Call GetNormalizedMove(AppliedMove[(Depth + 0)]);
            List.ReplaceItem(PickedMoves, Depth, Operator.Join(PickedMoves[(Depth + 0)], Operator.Join(NormalizedMoveRes, ":")));
            List.ReplaceItem(PickedMoveCount, Depth, (PickedMoveCount[(Depth + 0)] + 1));
            List.ReplaceItem(PickMoveRes, Depth, 1);
            Stop(this script);
        }
        List.ReplaceItem(PickPhase, Depth, 4);
    }
    Call //("Phase 4: Search for killer moves that can be applied on current board");
    If (PickPhase[(Depth + 0)] == 4)
    {
        If ((Quiescence Or (CheckedState[Depth] == 1)) Or (Depth == 1))
        {
            List.ReplaceItem(PickPhase, Depth, 6);
        }
        Else
        {
            Call CalcBoardAttackedOnDemand(Depth)(Quiescence)((1 == 1))(99);
            List.DeleteAll(TmpList1);
            List.DeleteAll(TmpList2);
            FactorOuter = (((Depth % 2) * 2) - 1);
            Call PrepareCurrentKillerMoves(Depth);
            CurrentValue = HistoryCounterMoves[AppliedMove[(Depth - 1)]];
            If (Not ((CurrentValue == "")))
            {
                List.InsertItem(CurrentKillerMoves, 1, CurrentValue);
            }
            IdxOuter3 = List.Length(CurrentKillerMoves);
            Repeat Until (IdxOuter3 == 0)
            {
                CurrentMoveOuter = CurrentKillerMoves[(IdxOuter3 + 0)];
                SourceIdxOuter2 = floor((CurrentMoveOuter / 100));
                TargetIdxOuter2 = floor((CurrentMoveOuter % 100));
                SourcePiece = Board[(SourceIdxOuter2 + 0)];
                If ((SourceIdxOuter2 > 0) And (Board[(TargetIdxOuter2 + 0)] == 0))
                {
                    If ((SourcePiece * FactorOuter) > 0)
                    {
                        IdxOuter2 = ((PieceIdxLookup[abs(SourcePiece)] * 10000) + ((SourceIdxOuter2 * 100) + TargetIdxOuter2));
                        If ((((Depth % 2) == 1) And (MovePosLookupBlackLegal[(IdxOuter2 + 0)] == 1)) Or (((Depth % 2) == 0) And (MovePosLookupWhiteLegal[(IdxOuter2 + 0)] == 1)))
                        {
                            Call //("When killer move is applicable, add to temp list");
                            Call StagedMoveGenKillerMoves(Depth)(CurrentMoveOuter)(SourceIdxOuter2)(TargetIdxOuter2)(abs(SourcePiece))(IdxOuter3);
                        }
                    }
                }
                IdxOuter3 += -1;
            }
            If (List.Length(TmpList1) > 0)
            {
                Call //("Convert temp list to move list and sort moves");
                If (List.Length(TmpList1) == 1)
                {
                    Call AddMoveToList(TmpList1[1])(Depth);
                }
                Else
                {
                    List.DeleteAll(CalcMovesMoveList);
                    List.DeleteAll(CalcMovesScoreList);
                    Idx = 1;
                    Repeat (List.Length(TmpList1))
                    {
                        List.Add(CalcMovesMoveList, TmpList1[Idx]);
                        List.Add(CalcMovesScoreList, TmpList2[Idx]);
                        Idx += 1;
                    }
                    Call SortMoveList((Depth + 2));
                    List.ReplaceItem(MovesIdx, (Depth + 2), 1);
                    Repeat (MovesCount[(Depth + 2)])
                    {
                        Call GetCurrentMove((Depth + 2));
                        Call AddMoveToList(CurrentMove)(Depth);
                        List.ReplaceItem(MovesIdx, (Depth + 2), (MovesIdx[(Depth + 2)] + 1));
                    }
                }
            }
            List.ReplaceItem(PickPhase, Depth, 5);
        }
    }
    Call //("Phase 5: Return moves found in phase 4 on subsequent PickMove() invocations");
    If (PickPhase[(Depth + 0)] == 5)
    {
        If (MovesIdx[(Depth + 0)] < MovesCount[(Depth + 0)])
        {
            List.ReplaceItem(MovesIdx, Depth, (MovesIdx[(Depth + 0)] + 1));
            Call ApplyMove(Depth);
            Call GetNormalizedMove(AppliedMove[(Depth + 0)]);
            List.ReplaceItem(PickedMoves, Depth, Operator.Join(PickedMoves[(Depth + 0)], Operator.Join(NormalizedMoveRes, ":")));
            List.ReplaceItem(PickedMoveCount, Depth, (PickedMoveCount[(Depth + 0)] + 1));
            List.ReplaceItem(PickMoveRes, Depth, 1);
            Stop(this script);
        }
        List.ReplaceItem(PickPhase, Depth, 6);
    }
    Call //("Phase 6: Full move generator for all moves not found yet");
    If (PickPhase[(Depth + 0)] == 6)
    {
        Call CalcBoardAttackedOnDemand(Depth)(Quiescence)((1 == 1))(99);
        Call GenerateMovesImplWrapper(Depth)((1 == 0))((Quiescence Or (CheckedState[(Depth + 0)] == 1)));
        If (GenerateMovesRequiresAttackRecalc == 1)
        {
            Call CalcBoardAttackedByMove((Depth + 1));
            Call StoreAttackInfo((Depth + 1))(Depth);
            List.ReplaceItem(BoardAttackedCalculated, Depth, 1);
            Call GenerateMovesImplWrapper(Depth)((1 == 0))((Quiescence Or (CheckedState[(Depth + 0)] == 1)));
        }
        List.ReplaceItem(MovesIdx, Depth, 0);
        List.ReplaceItem(PickPhase, Depth, 7);
    }
    Call //("Pick next move detected in phase 6, skip those applied in earlier stages");
    If (PickPhase[(Depth + 0)] == 7)
    {
        If (MovesIdx[(Depth + 0)] < MovesCount[(Depth + 0)])
        {
            List.ReplaceItem(MovesIdx, Depth, (MovesIdx[(Depth + 0)] + 1));
            If (Variable.Length(PickedMoves[(Depth + 0)]) > 0)
            {
                Call GetCurrentMove(Depth);
                Call GetNormalizedMove(CurrentMove);
                Repeat Until (Not (Operator.Contains(PickedMoves[(Depth + 0)], NormalizedMoveRes)))
                {
                    List.ReplaceItem(MovesIdx, Depth, (MovesIdx[(Depth + 0)] + 1));
                    If (MovesIdx[(Depth + 0)] > MovesCount[(Depth + 0)])
                    {
                        List.ReplaceItem(PickPhase, Depth, "*");
                        List.ReplaceItem(PickMoveRes, Depth, 0);
                        Stop(this script);
                    }
                    Call GetCurrentMove(Depth);
                    Call GetNormalizedMove(CurrentMove);
                }
            }
            Call ApplyMove(Depth);
            List.ReplaceItem(PickMoveRes, Depth, 1);
            List.ReplaceItem(PickedMoveCount, Depth, (PickedMoveCount[(Depth + 0)] + 1));
            Stop(this script);
        }
        List.ReplaceItem(PickPhase, Depth, "*");
        List.ReplaceItem(PickMoveRes, Depth, 0);
    }
    List.ReplaceItem(PickMoveRes, Depth, 0);
}

Define PrepareCurrentKillerMoves(string Depth) (warp=true)
{
    List.DeleteAll(CurrentKillerMoves);
    Idx = (((Depth - 1) * 2) + 1);
    List.Add(CurrentKillerMoves, KillerMoves[Idx]);
    List.Add(CurrentKillerMoves, KillerMoves[(Idx + 1)]);
}

Define PrepareEvalPiecesData(string Depth) (warp=true)
{
    IsEndgameLocal = 0;
    Call GetAttackForce((1 == 0));
    If (AttackForce < 12)
    {
        IsEndgameLocal = 1;
    }
    Call GetAttackForce((1 == 1));
    If (AttackForce < 12)
    {
        IsEndgameLocal = 1;
    }
    List.DeleteAll(EvalPiecesIdx_All);
    List.DeleteAll(EvalPiecesIdx_Pawns);
    List.DeleteAll(EvalPiecesIdx_NonPawns);
    List.DeleteAll(EvalPiecesIdx_Rooks);
    Idx = 1;
    Repeat (64)
    {
        CurrentPiece = Board[(Idx + 0)];
        If (Not ((CurrentPiece == 0)))
        {
            CurrentPieceAbs = abs(CurrentPiece);
            List.Add(EvalPiecesIdx_All, Idx);
            If (CurrentPieceAbs == GoK_BlackPawn)
            {
                List.Add(EvalPiecesIdx_Pawns, Idx);
            }
            Else
            {
                List.Add(EvalPiecesIdx_NonPawns, Idx);
                If (CurrentPieceAbs == GoK_BlackRook)
                {
                    List.Add(EvalPiecesIdx_Rooks, Idx);
                }
            }
        }
        Idx += 1;
    }
    List.DeleteItem(BlackPawnCount, all);
    List.DeleteItem(WhitePawnCount, all);
    Repeat (8)
    {
        List.Add(BlackPawnCount, 0);
        List.Add(WhitePawnCount, 0);
    }
    List.DeleteItem(PawnAdvancePerFile, all);
    Repeat (32)
    {
        List.Add(PawnAdvancePerFile, 0);
    }
    EvalPieceIdx = 1;
    Repeat (List.Length(EvalPiecesIdx_Pawns))
    {
        Idx = EvalPiecesIdx_Pawns[(EvalPieceIdx + 0)];
        CurrentPiece = Board[(Idx + 0)];
        File = IdxToFile[(Idx + 0)];
        Rank = IdxToRank[(Idx + 0)];
        If (CurrentPiece > 0)
        {
            List.ReplaceItem(BlackPawnCount, (File + 0), (BlackPawnCount[(File + 0)] + 1));
            If ((PawnAdvancePerFile[(File + 16)] == 0) Or (Rank < PawnAdvancePerFile[(File + 16)]))
            {
                List.ReplaceItem(PawnAdvancePerFile, (File + 16), Rank);
            }
            If (Rank > PawnAdvancePerFile[(File + 24)])
            {
                List.ReplaceItem(PawnAdvancePerFile, (File + 24), Rank);
            }
        }
        Else
        {
            List.ReplaceItem(WhitePawnCount, (File + 0), (WhitePawnCount[(File + 0)] + 1));
            If (Rank > PawnAdvancePerFile[(File + 0)])
            {
                List.ReplaceItem(PawnAdvancePerFile, (File + 0), Rank);
            }
            If ((PawnAdvancePerFile[(File + 8)] == 0) Or (Rank < PawnAdvancePerFile[(File + 8)]))
            {
                List.ReplaceItem(PawnAdvancePerFile, (File + 8), Rank);
            }
        }
        EvalPieceIdx += 1;
    }
    If (IsScratch3 == 1)
    {
        Call ClearBoardAttackedByMove((Depth + 1));
        Call ClearBoardAttackedByMove((Depth + 2));
    }
    Else
    {
        Idx = 1;
        Repeat (64)
        {
            List.ReplaceItem(PieceMobility, (Idx + 0), 0);
            List.ReplaceItem(PieceMobilityPrep, (((Idx - 1) * 32) + 1), 0);
            Idx += 1;
        }
        CalcAttackStateWithMobility = 1;
        Call CalcBoardAttackedByMove((Depth + 1));
        Call CalcBoardAttackedByMove((Depth + 2));
        CalcAttackStateWithMobility = 0;
        EvalPieceIdx = 1;
        Repeat (List.Length(EvalPiecesIdx_NonPawns))
        {
            Idx = EvalPiecesIdx_NonPawns[(EvalPieceIdx + 0)];
            CurrentPiece = Board[(Idx + 0)];
            IdxSub = (((Idx - 1) * 32) + 1);
            Count1 = PieceMobilityPrep[(IdxSub + 0)];
            IdxSub += 1;
            Repeat (Count1)
            {
                TargetIdx = PieceMobilityPrep[(IdxSub + 0)];
                If (CurrentPiece > 0)
                {
                    If ((BoardAttackedByWhite[(TargetIdx + 0)] == 0) And (Not ((Board[(TargetIdx + 0)] > 0))))
                    {
                        List.ReplaceItem(PieceMobility, (Idx + 0), (PieceMobility[(Idx + 0)] + 1));
                    }
                }
                Else
                {
                    If ((BoardAttackedByBlack[(TargetIdx + 0)] == 0) And (Not ((Board[(TargetIdx + 0)] < 0))))
                    {
                        List.ReplaceItem(PieceMobility, (Idx + 0), (PieceMobility[(Idx + 0)] + 1));
                    }
                }
                IdxSub += 1;
            }
            EvalPieceIdx += 1;
        }
    }
}

Define Profile_MethodEnter(num Id) (warp=true)
{
    Repeat Until (Not ((List.Length(Profile_Data) < Id)))
    {
        List.Add(Profile_Data, 0);
    }
    List.ReplaceItem(Profile_Data, Id, (Profile_Data[Id] - ((Sensing.DaysSince2000() * 24) * 3600)));
}

Define Profile_MethodExit(num Id) (warp=false)
{
    List.ReplaceItem(Profile_Data, Id, (Profile_Data[Id] + ((Sensing.DaysSince2000() * 24) * 3600)));
}

Define Profile_Reset (warp=true)
{
    List.DeleteItem(Profile_Data, all);
}

Define QuickSort (warp=true)
{
    List.DeleteAll(QSPartStack);
    Call QuickSortImpl(1)(List.Length(CalcMovesScoreList));
}

Define QuickSortImpl(string Lo)(string Hi) (warp=true)
{
    QSPivot = CalcMovesScoreList[floor(((Lo + Hi) / 2))];
    QSLower = Lo;
    QSUpper = Hi;
    Repeat Until (QSLower > QSUpper)
    {
        Repeat Until (Not ((CalcMovesScoreList[(QSLower + 0)] < QSPivot)))
        {
            QSLower += 1;
        }
        Repeat Until (Not ((CalcMovesScoreList[(QSUpper + 0)] > QSPivot)))
        {
            QSUpper += -1;
        }
        If (Not ((QSLower > QSUpper)))
        {
            QSSwap = CalcMovesScoreList[(QSLower + 0)];
            List.ReplaceItem(CalcMovesScoreList, (QSLower + 0), CalcMovesScoreList[(QSUpper + 0)]);
            List.ReplaceItem(CalcMovesScoreList, (QSUpper + 0), QSSwap);
            QSSwap = CalcMovesMoveList[(QSLower + 0)];
            List.ReplaceItem(CalcMovesMoveList, (QSLower + 0), CalcMovesMoveList[(QSUpper + 0)]);
            List.ReplaceItem(CalcMovesMoveList, (QSUpper + 0), QSSwap);
            QSLower += 1;
            QSUpper += -1;
        }
    }
    If (Lo < QSUpper)
    {
        List.Add(QSPartStack, QSLower);
        Call QuickSortImpl(Lo)(QSUpper);
        QSLower = QSPartStack[(List.Length(QSPartStack) + 0)];
        List.DeleteItem(QSPartStack, (List.Length(QSPartStack) + 0));
    }
    If (QSLower < Hi)
    {
        Call QuickSortImpl(QSLower)(Hi);
    }
}

Define RevertMove(num Depth) (warp=true)
{
    CurrentMove = AppliedMove[(Depth + 0)];
    SourceIdx = floor((CurrentMove / 100));
    If (SourceIdx > 0)
    {
        TargetIdx = floor((CurrentMove % 100));
        If (abs(Board[(TargetIdx + 0)]) == GoK_BlackPawn)
        {
            List.ReplaceItem(EnPassantTarget, (Depth + 1), "");
        }
        List.ReplaceItem(Board, (SourceIdx + 0), Board[(TargetIdx + 0)]);
        List.ReplaceItem(Board, (TargetIdx + 0), 0);
        List.ReplaceItem(Board, TargetPiecesIdx[(Depth + 0)], TargetPieces[(Depth + 0)]);
        If (PromotionPieces[(Depth + 0)] > 0)
        {
            PromotionVal = Operator.LetterOf(CurrentMove, Variable.Length(CurrentMove));
            If (PromotionVal == 1)
            {
                BlackQueenCountLocal += -1;
            }
            If (PromotionVal == 2)
            {
                BlackRookCountLocal += -1;
                BlackMinorCountLocal += -1;
            }
            If (PromotionVal == 3)
            {
                BlackBishopCountLocal += -1;
                BlackMinorCountLocal += -1;
            }
            If (PromotionVal == 4)
            {
                BlackMinorCountLocal += -1;
            }
            List.ReplaceItem(Board, SourceIdx, GoK_BlackPawn);
            BlackPawnCountLocal += 1;
        }
        Else
        {
            If (PromotionPieces[(Depth + 0)] < 0)
            {
                PromotionVal = Operator.LetterOf(CurrentMove, Variable.Length(CurrentMove));
                If (PromotionVal == 1)
                {
                    WhiteQueenCountLocal += -1;
                }
                If (PromotionVal == 2)
                {
                    WhiteRookCountLocal += -1;
                    WhiteMinorCountLocal += -1;
                }
                If (PromotionVal == 3)
                {
                    WhiteBishopCountLocal += -1;
                    WhiteMinorCountLocal += -1;
                }
                If (PromotionVal == 4)
                {
                    WhiteMinorCountLocal += -1;
                }
                List.ReplaceItem(Board, SourceIdx, GoK_WhitePawn);
                WhitePawnCountLocal += 1;
            }
        }
        If (Board[(SourceIdx + 0)] == GoK_BlackKing)
        {
            BlackKingIdx = SourceIdx;
        }
        If (Board[(SourceIdx + 0)] == GoK_WhiteKing)
        {
            WhiteKingIdx = SourceIdx;
        }
        TargetPiece = TargetPieces[(Depth + 0)];
        If (TargetPiece > 0)
        {
            If (TargetPiece == GoK_BlackPawn)
            {
                BlackPawnCountLocal += 1;
            }
            Else
            {
                If (TargetPiece < GoK_BlackQueen)
                {
                    BlackMinorCountLocal += 1;
                    If (TargetPiece == GoK_BlackRook)
                    {
                        BlackRookCountLocal += 1;
                    }
                    If (TargetPiece == GoK_BlackBishop)
                    {
                        BlackBishopCountLocal += 1;
                    }
                }
                Else
                {
                    If (TargetPiece == GoK_BlackQueen)
                    {
                        BlackQueenCountLocal += 1;
                    }
                    Else
                    {
                        If (TargetPiece == GoK_BlackKing)
                        {
                            BlackKingIdx = TargetIdx;
                        }
                    }
                }
            }
        }
        If (TargetPiece < 0)
        {
            If (TargetPiece == GoK_WhitePawn)
            {
                WhitePawnCountLocal += 1;
            }
            Else
            {
                If (TargetPiece > GoK_WhiteQueen)
                {
                    WhiteMinorCountLocal += 1;
                    If (TargetPiece == GoK_WhiteRook)
                    {
                        WhiteRookCountLocal += 1;
                    }
                    If (TargetPiece == GoK_WhiteBishop)
                    {
                        WhiteBishopCountLocal += 1;
                    }
                }
                Else
                {
                    If (TargetPiece == GoK_WhiteQueen)
                    {
                        WhiteQueenCountLocal += 1;
                    }
                    Else
                    {
                        If (TargetPiece == GoK_WhiteKing)
                        {
                            WhiteKingIdx = TargetIdx;
                        }
                    }
                }
            }
        }
    }
    Else
    {
        If (CurrentMove == GoK_WhiteKingsideCastling)
        {
            List.ReplaceItem(Board, VirtualBoard[61], GoK_WhiteKing);
            List.ReplaceItem(Board, VirtualBoard[62], 0);
            List.ReplaceItem(Board, VirtualBoard[63], 0);
            List.ReplaceItem(Board, VirtualBoard[64], GoK_WhiteRook);
            WhiteKingIdx = VirtualBoard[61];
        }
        Else
        {
            If (CurrentMove == GoK_WhiteQueensideCastling)
            {
                List.ReplaceItem(Board, VirtualBoard[57], GoK_WhiteRook);
                List.ReplaceItem(Board, VirtualBoard[59], 0);
                List.ReplaceItem(Board, VirtualBoard[60], 0);
                List.ReplaceItem(Board, VirtualBoard[61], GoK_WhiteKing);
                WhiteKingIdx = VirtualBoard[61];
            }
            Else
            {
                If (CurrentMove == GoK_BlackKingsideCastling)
                {
                    List.ReplaceItem(Board, VirtualBoard[5], GoK_BlackKing);
                    List.ReplaceItem(Board, VirtualBoard[6], 0);
                    List.ReplaceItem(Board, VirtualBoard[7], 0);
                    List.ReplaceItem(Board, VirtualBoard[8], GoK_BlackRook);
                    BlackKingIdx = VirtualBoard[5];
                }
                Else
                {
                    If (CurrentMove == GoK_BlackQueensideCastling)
                    {
                        List.ReplaceItem(Board, VirtualBoard[1], GoK_BlackRook);
                        List.ReplaceItem(Board, VirtualBoard[4], 0);
                        List.ReplaceItem(Board, VirtualBoard[3], 0);
                        List.ReplaceItem(Board, VirtualBoard[5], GoK_BlackKing);
                        BlackKingIdx = VirtualBoard[5];
                    }
                }
            }
        }
    }
    CurrentBoardHash = PreviousBoardHash[(Depth + 0)];
    CurrentBoardHash2 = PreviousBoardHash2[(Depth + 0)];
    List.ReplaceItem(AppliedMove, (Depth + 0), "");
    List.ReplaceItem(PosScoreDelta, (Depth + 0), 0);
    List.ReplaceItem(SourcePieces, (Depth + 0), 0);
    List.ReplaceItem(TargetPiecesIdx, (Depth + 0), "");
    List.ReplaceItem(TargetPieces, (Depth + 0), 0);
    List.ReplaceItem(PromotionPieces, (Depth + 0), 0);
    If (Depth == 1)
    {
        List.ReplaceItem(CastlingState, (Depth + 0), Operator.Join(Operator.Join(Operator.Join(HasBlackCastled, HasBlackKingMoved), Operator.Join(HasBlackRookKSMoved, HasBlackRookQSMoved)), Operator.Join(Operator.Join(HasWhiteCastled, HasWhiteKingMoved), Operator.Join(HasWhiteRookKSMoved, HasWhiteRookQSMoved))));
    }
    Else
    {
        List.ReplaceItem(CastlingState, (Depth + 0), CastlingState[(Depth - 1)]);
    }
    List.DeleteItem(BoardHistoryFiftyMoves, List.Length(BoardHistoryFiftyMoves));
}

Define RevertMoveLight(string Depth) (warp=true)
{
    CurrentMove = AppliedMove[Depth];
    SourceIdx = floor((CurrentMove / 100));
    If (SourceIdx > 0)
    {
        TargetIdx = floor((CurrentMove % 100));
        List.ReplaceItem(Board, SourceIdx, Board[TargetIdx]);
        List.ReplaceItem(Board, TargetIdx, 0);
        List.ReplaceItem(Board, TargetPiecesIdx[Depth], TargetPieces[Depth]);
    }
    Else
    {
        If (CurrentMove == GoK_WhiteKingsideCastling)
        {
            List.ReplaceItem(Board, VirtualBoard[61], GoK_WhiteKing);
            List.ReplaceItem(Board, VirtualBoard[62], 0);
            List.ReplaceItem(Board, VirtualBoard[63], 0);
            List.ReplaceItem(Board, VirtualBoard[64], GoK_WhiteRook);
        }
        Else
        {
            If (CurrentMove == GoK_WhiteQueensideCastling)
            {
                List.ReplaceItem(Board, VirtualBoard[57], GoK_WhiteRook);
                List.ReplaceItem(Board, VirtualBoard[59], 0);
                List.ReplaceItem(Board, VirtualBoard[60], 0);
                List.ReplaceItem(Board, VirtualBoard[61], GoK_WhiteKing);
            }
            Else
            {
                If (CurrentMove == GoK_BlackKingsideCastling)
                {
                    List.ReplaceItem(Board, VirtualBoard[5], GoK_BlackKing);
                    List.ReplaceItem(Board, VirtualBoard[6], 0);
                    List.ReplaceItem(Board, VirtualBoard[7], 0);
                    List.ReplaceItem(Board, VirtualBoard[8], GoK_BlackRook);
                }
                Else
                {
                    If (CurrentMove == GoK_BlackQueensideCastling)
                    {
                        List.ReplaceItem(Board, VirtualBoard[1], GoK_BlackRook);
                        List.ReplaceItem(Board, VirtualBoard[4], 0);
                        List.ReplaceItem(Board, VirtualBoard[3], 0);
                        List.ReplaceItem(Board, VirtualBoard[5], GoK_BlackKing);
                    }
                }
            }
        }
    }
    CurrentBoardHash = PreviousBoardHash[Depth];
}

Define SayAsync(string Text)(num Duration) (warp=false)
{
    SayAsyncText = Text;
    SayAsyncDuration = Duration;
    Event.Broadcast("sayasyncmsg");
}

Define SEE(string MoveDepth) (warp=true)
{
    Depth = MoveDepth;
    List.DeleteAll(SEE.TmpList1);
    List.DeleteAll(SEE.TmpList2);
    List.DeleteAll(SEE.TmpList3);
    List.DeleteAll(SEE.TmpList4);
    Idx = 1;
    Repeat (List.Length(CalcMovesMoveList))
    {
        List.Add(SEE.TmpList3, CalcMovesMoveList[(Idx + 0)]);
        Idx += 1;
    }
    Idx = 1;
    Repeat (List.Length(CalcMovesScoreList))
    {
        List.Add(SEE.TmpList4, CalcMovesScoreList[(Idx + 0)]);
        Idx += 1;
    }
    SEE.Result = (0 - TargetPieces[Depth]);
    SEE.TargetIdx = floor((AppliedMove[Depth] % 100));
    Side = 1;
    Repeat (2)
    {
        List.DeleteAll(CalcMovesMoveList);
        List.DeleteAll(CalcMovesScoreList);
        SEE.SourceIdx = 1;
        Repeat (64)
        {
            SEE.SourcePiece = Board[(SEE.SourceIdx + 0)];
            If (((Side == 1) And (SEE.SourcePiece > 0)) Or ((Side == 2) And (SEE.SourcePiece < 0)))
            {
                If ((Not ((abs(SEE.SourcePiece) == GoK_BlackPawn))) Or (Not ((IdxToFile[(SEE.SourceIdx + 0)] == IdxToFile[(SEE.TargetIdx + 0)]))))
                {
                    SEE.Idx = ((PieceIdxLookup[abs(SEE.SourcePiece)] * 10000) + ((SEE.SourceIdx * 100) + SEE.TargetIdx));
                    If (Side == 1)
                    {
                        If (MovePosLookupBlackLegal[(SEE.Idx + 0)] == 1)
                        {
                            List.Add(CalcMovesMoveList, SEE.SourceIdx);
                            List.Add(CalcMovesScoreList, (0 - SEE.SourcePiece));
                        }
                    }
                    Else
                    {
                        If (MovePosLookupWhiteLegal[(SEE.Idx + 0)] == 1)
                        {
                            List.Add(CalcMovesMoveList, SEE.SourceIdx);
                            List.Add(CalcMovesScoreList, (0 - SEE.SourcePiece));
                        }
                    }
                }
            }
            SEE.SourceIdx += 1;
        }
        Call SortMoveList((MoveDepth + ((MoveDepth % 2) + Side)));
        SEE.Idx = 1;
        Repeat (List.Length(CalcMovesMoveList))
        {
            If (Side == 1)
            {
                List.Add(SEE.TmpList1, CalcMovesMoveList[(SEE.Idx + 0)]);
            }
            Else
            {
                List.Add(SEE.TmpList2, CalcMovesMoveList[(SEE.Idx + 0)]);
            }
            SEE.Idx += 1;
        }
        Side += 1;
    }
    If (Board[(SEE.TargetIdx + 0)] > 0)
    {
        Side = 2;
    }
    Else
    {
        Side = 1;
    }
    IsDone = (((Side == 1) And (List.Length(SEE.TmpList1) == 0)) Or ((Side == 2) And (List.Length(SEE.TmpList2) == 0)));
    Repeat Until (IsDone == 1)
    {
        FoundIdx = 0;
        SEE.Idx = 1;
        Repeat Until ((FoundIdx > 0) Or (((Side == 1) And (SEE.Idx > List.Length(SEE.TmpList1))) Or ((Side == 2) And (SEE.Idx > List.Length(SEE.TmpList2)))))
        {
            If (Side == 1)
            {
                SEE.SourceIdx = SEE.TmpList1[(SEE.Idx + 0)];
            }
            Else
            {
                SEE.SourceIdx = SEE.TmpList2[(SEE.Idx + 0)];
            }
            Call SEE.IsCounterCaptureReachable(abs(Board[(SEE.SourceIdx + 0)]))(SEE.SourceIdx)(SEE.TargetIdx);
            If (IsReachableRes == 1)
            {
                If (Side == 1)
                {
                    List.DeleteItem(SEE.TmpList1, SEE.Idx);
                }
                Else
                {
                    List.DeleteItem(SEE.TmpList2, SEE.Idx);
                }
                FoundIdx = SEE.SourceIdx;
            }
            Else
            {
                SEE.Idx += 1;
            }
        }
        If (FoundIdx > 0)
        {
            SEE.Move = ((FoundIdx * 100) + SEE.TargetIdx);
            Depth += 1;
            Call ClearMoveList(Depth);
            Call AddMoveToList(SEE.Move)(Depth);
            List.ReplaceItem(MovesIdx, Depth, 1);
            Call ApplyMoveLight(Depth);
            SEE.Result += (0 - TargetPieces[Depth]);
            If (Not ((abs(SourcePieces[Depth]) == GoK_BlackKing)))
            {
                If (Side == 1)
                {
                    If (SEE.Result < 0)
                    {
                        IsDone = 1;
                    }
                }
                Else
                {
                    If (SEE.Result > 0)
                    {
                        IsDone = 1;
                    }
                }
            }
            If (abs(TargetPieces[Depth]) == GoK_BlackKing)
            {
                IsDone = 1;
            }
            MoveCountQ += 1;
            NodeCountQ += 1;
        }
        Else
        {
            IsDone = 1;
        }
        If (Side == 1)
        {
            Side = 2;
        }
        Else
        {
            Side = 1;
        }
    }
    Repeat Until (Depth == MoveDepth)
    {
        Call RevertMoveLight(Depth);
        Depth += -1;
    }
    List.DeleteAll(CalcMovesMoveList);
    List.DeleteAll(CalcMovesScoreList);
    Idx = 1;
    Repeat (List.Length(SEE.TmpList3))
    {
        List.Add(CalcMovesMoveList, SEE.TmpList3[(Idx + 0)]);
        Idx += 1;
    }
    Idx = 1;
    Repeat (List.Length(SEE.TmpList4))
    {
        List.Add(CalcMovesScoreList, SEE.TmpList4[(Idx + 0)]);
        Idx += 1;
    }
}

Define SEE.IsCounterCaptureReachable(string SourcePieceAbs)(string SourceIdx)(string TargetIdx) (warp=true)
{
    IsReachableRes = 0;
    If ((SourcePieceAbs == GoK_BlackKing) Or (SourcePieceAbs == GoK_BlackKnight))
    {
        IsReachableRes = 1;
        Stop(this script);
    }
    If (SourcePieceAbs == GoK_BlackPawn)
    {
        If (Not ((IdxToFile[(SourceIdx + 0)] == IdxToFile[(TargetIdx + 0)])))
        {
            IsReachableRes = 1;
        }
        Stop(this script);
    }
    If ((SourcePieceAbs > GoK_BlackKnight) And (SourcePieceAbs < GoK_BlackKing))
    {
        SEECC.Idx = ((SourceIdx * 100) + TargetIdx);
        SEECC.SourceIdx = SourceIdx;
        Repeat ((MovePathDelta[(SEECC.Idx + 0)] - 1))
        {
            SEECC.SourceIdx += MovePathStepInc[(SEECC.Idx + 0)];
            If (Not ((Board[(SEECC.SourceIdx + 0)] == 0)))
            {
                Stop(this script);
            }
        }
        IsReachableRes = 1;
    }
}

Define SetCastlingStateFlag(string Depth)(string Offset)(string Val) (warp=true)
{
    CurrentValue = CastlingState[Depth];
    If (Not ((Operator.LetterOf(CurrentValue, Offset) == Val)))
    {
        Idx = (((((Operator.LetterOf(CurrentValue, 1) * 128) + (Operator.LetterOf(CurrentValue, 2) * 64)) + ((Operator.LetterOf(CurrentValue, 3) * 32) + (Operator.LetterOf(CurrentValue, 4) * 16))) + (((Operator.LetterOf(CurrentValue, 5) * 8) + (Operator.LetterOf(CurrentValue, 6) * 4)) + ((Operator.LetterOf(CurrentValue, 7) * 2) + Operator.LetterOf(CurrentValue, 8)))) + 1);
        If (Val == 1)
        {
            List.ReplaceItem(CastlingState, Depth, CastlingStateLookup[(Idx + CastlingStatePow2[Offset])]);
        }
        Else
        {
            List.ReplaceItem(CastlingState, Depth, CastlingStateLookup[(Idx - CastlingStatePow2[Offset])]);
        }
    }
}

Define SetInitialEnPassantTarget(string Depth) (warp=true)
{
    List.ReplaceItem(EnPassantTarget, Depth, "");
    Call GetSubstringRight(GameMoves)(4);
    SourceIdx = floor((SubstringRes / 100));
    TargetIdx = floor((SubstringRes % 100));
    If ((abs(Board[TargetIdx]) == GoK_BlackPawn) And (abs((TargetIdx - SourceIdx)) == 16))
    {
        List.ReplaceItem(EnPassantTarget, Depth, TargetIdx);
    }
}

Define SortList (warp=true)
{
    If (List.Length(CalcMovesScoreList) > 1)
    {
        Call QuickSort;
    }
}

Define SortMoveList(string Depth) (warp=true)
{
    If ((Depth % 2) == 1)
    {
        Idx = 1;
        Repeat (List.Length(CalcMovesScoreList))
        {
            List.ReplaceItem(CalcMovesScoreList, Idx, (0 - CalcMovesScoreList[Idx]));
            Idx += 1;
        }
    }
    If (Depth == 1)
    {
        List.DeleteAll(Moves1);
    }
    If (Depth == 2)
    {
        List.DeleteAll(Moves2);
    }
    Call SortList;
    IdxSub = ((Depth - 1) * MaxMovesPerGeneration);
    Idx = 1;
    Repeat (List.Length(CalcMovesMoveList))
    {
        List.ReplaceItem(Moves, (IdxSub + Idx), CalcMovesMoveList[Idx]);
        If (Depth == 1)
        {
            List.Add(Moves1, CalcMovesMoveList[Idx]);
        }
        If (Depth == 2)
        {
            List.Add(Moves2, CalcMovesMoveList[Idx]);
        }
        Idx += 1;
    }
    List.ReplaceItem(MovesCount, Depth, List.Length(CalcMovesMoveList));
    If ((Depth % 2) == 1)
    {
        Idx = 1;
        Repeat (List.Length(CalcMovesScoreList))
        {
            List.ReplaceItem(CalcMovesScoreList, Idx, (0 - CalcMovesScoreList[Idx]));
            Idx += 1;
        }
    }
}

Define StagedMoveGenKillerMoves(string Depth)(string Move)(string SourceIdx)(string TargetIdx)(string SourcePieceAbs)(string KillerMoveIdx) (warp=true)
{
    If (SourcePieceAbs == GoK_BlackPawn)
    {
        If ((TargetIdx > 56) Or (TargetIdx < 9))
        {
            Stop(this script);
        }
        If (abs((TargetIdx - SourceIdx)) == 16)
        {
            If (Not ((Board[((TargetIdx + SourceIdx) / 2)] == 0)))
            {
                Stop(this script);
            }
        }
        If (Not ((IdxToFile[(SourceIdx + 0)] == IdxToFile[(TargetIdx + 0)])))
        {
            Stop(this script);
        }
    }
    If (SourcePieceAbs == GoK_BlackKing)
    {
        If (BoardAttackedCalculated[(Depth + 0)] == 0)
        {
            Stop(this script);
        }
        If ((Depth % 2) == 1)
        {
            If (Operator.LetterOf(BoardAttackedByWhiteSnapshot[(Depth + 0)], TargetIdx) > 0)
            {
                Stop(this script);
            }
        }
        Else
        {
            If (Operator.LetterOf(BoardAttackedByBlackSnapshot[(Depth + 0)], TargetIdx) > 0)
            {
                Stop(this script);
            }
        }
    }
    If (SourcePieceAbs > GoK_BlackKnight)
    {
        SourceIdx = SourceIdx;
        IdxInc = MovePathStepInc[(Move + 0)];
        Repeat ((MovePathDelta[(Move + 0)] - 1))
        {
            SourceIdx += IdxInc;
            If (Not ((Board[(SourceIdx + 0)] == 0)))
            {
                Stop(this script);
            }
        }
    }
    Call GetNormalizedMove(Move);
    If Operator.Contains(PickedMoves[(Depth + 0)], NormalizedMoveRes)
    {
        Stop(this script);
    }
    If List.ContainsItem(TmpList1, Move)
    {
        Stop(this script);
    }
    Call GetMoveScore(Board[SourceIdx])(Board[TargetIdx])(SourceIdx)(TargetIdx)(Move)(Depth);
    List.Add(TmpList1, Move);
    List.Add(TmpList2, MoveScoreRes);
}

Define StagedMoveGenMVVLVA(string Depth)(string SourceIdx)(string TargetIdx)(string SourcePieceAbs)(string TargetPieceAbs)(string PrevTargetIdx) (warp=true)
{
    If (CheckedState[(Depth + 0)] == 1)
    {
        If (Not ((TargetIdx == PrevTargetIdx)))
        {
            Stop(this script);
        }
    }
    Else
    {
        If (1 == 0)
        {
            If (TargetPieceAbs < SourcePieceAbs)
            {
                Stop(this script);
            }
        }
    }
    If (SourcePieceAbs == GoK_BlackPawn)
    {
        If (IdxToFile[(SourceIdx + 0)] == IdxToFile[(TargetIdx + 0)])
        {
            Stop(this script);
        }
        If ((TargetIdx > 56) Or (TargetIdx < 9))
        {
            Stop(this script);
        }
    }
    If (SourcePieceAbs == GoK_BlackKing)
    {
        If (BoardAttackedCalculated[(Depth + 0)] == 0)
        {
            Stop(this script);
        }
        If ((Depth % 2) == 1)
        {
            If (Operator.LetterOf(BoardAttackedByWhiteSnapshot[(Depth + 0)], TargetIdx) > 0)
            {
                Stop(this script);
            }
        }
        Else
        {
            If (Operator.LetterOf(BoardAttackedByBlackSnapshot[(Depth + 0)], TargetIdx) > 0)
            {
                Stop(this script);
            }
        }
    }
    If (SourcePieceAbs > GoK_BlackKnight)
    {
        Idx = ((SourceIdx * 100) + TargetIdx);
        IdxInc = MovePathStepInc[(Idx + 0)];
        SourceIdx = SourceIdx;
        Repeat ((MovePathDelta[(Idx + 0)] - 1))
        {
            SourceIdx += IdxInc;
            If (Not ((Board[(SourceIdx + 0)] == 0)))
            {
                Stop(this script);
            }
        }
    }
    CurrentMoveOuter = ((SourceIdx * 100) + TargetIdx);
    Call GetNormalizedMove(Move);
    If Operator.Contains(PickedMoves[(Depth + 0)], NormalizedMoveRes)
    {
        Stop(this script);
    }
    If List.ContainsItem(TmpList1, CurrentMoveOuter)
    {
        Stop(this script);
    }
    Call GetMoveScore(Board[(SourceIdx + 0)])(Board[(TargetIdx + 0)])(SourceIdx)(TargetIdx)(CurrentMoveOuter)(Depth);
    If (Not ((abs(MoveScoreRes) < 7000000)))
    {
        List.Add(TmpList1, CurrentMoveOuter);
        List.Add(TmpList2, MoveScoreRes);
    }
}

Define StoreAttackInfo(string Depth)(string StoreDepth) (warp=true)
{
    If ((Depth % 2) == 1)
    {
        CurrentValue = "";
        CurrentValue2 = "";
        Idx = 1;
        Repeat (16)
        {
            CurrentValue = Operator.Join(CurrentValue, MoveToZeroPadStr[((((BoardAttackedByBlack[(Idx + 0)] * 1000) + (BoardAttackedByBlack[(Idx + 1)] * 100)) + ((BoardAttackedByBlack[(Idx + 2)] * 10) + BoardAttackedByBlack[(Idx + 3)])) + 1)]);
            CurrentValue2 = Operator.Join(CurrentValue2, MoveToZeroPadStr[(((BoardAttackedByBlackPiece[(Idx + 0)] * 100) + BoardAttackedByBlackPiece[(Idx + 1)]) + 1)]);
            CurrentValue2 = Operator.Join(CurrentValue2, MoveToZeroPadStr[(((BoardAttackedByBlackPiece[(Idx + 2)] * 100) + BoardAttackedByBlackPiece[(Idx + 3)]) + 1)]);
            Idx += 4;
        }
        List.ReplaceItem(BoardAttackedByBlackSnapshot, StoreDepth, CurrentValue);
        List.ReplaceItem(BoardAttackedByBlackPieceSnapshot, StoreDepth, CurrentValue2);
        If ((StoreDepth % 2) == 0)
        {
            List.ReplaceItem(CheckedState, StoreDepth, IsWhiteChecked);
            If (IsWhiteChecked == 0)
            {
                List.ReplaceItem(CheckedStateAttackLines, StoreDepth, "");
            }
            Else
            {
                CurrentValue = "";
                Idx = 1;
                Repeat (64)
                {
                    If List.ContainsItem(KingAttackLines, Idx)
                    {
                        CurrentValue = Operator.Join(CurrentValue, 1);
                    }
                    Else
                    {
                        CurrentValue = Operator.Join(CurrentValue, 0);
                    }
                    Idx += 1;
                }
                List.ReplaceItem(CheckedStateAttackLines, StoreDepth, CurrentValue);
            }
            If (1 == 0)
            {
                Call TTStoreNode(CurrentBoardHash)(StoreDepth)("")("")("")(CheckedState[StoreDepth])(0)("")("")(BoardAttackedByBlackSnapshot[StoreDepth])(BoardAttackedByBlackPieceSnapshot[StoreDepth])(CheckedStateAttackLines[StoreDepth])("");
            }
            Call TTStoreNode(CurrentBoardHash)(StoreDepth)("")("")("")(CheckedState[StoreDepth])("")("")("")("")("")("")("");
        }
    }
    Else
    {
        CurrentValue = "";
        CurrentValue2 = "";
        Idx = 1;
        Repeat (16)
        {
            CurrentValue = Operator.Join(CurrentValue, MoveToZeroPadStr[((((BoardAttackedByWhite[(Idx + 0)] * 1000) + (BoardAttackedByWhite[(Idx + 1)] * 100)) + ((BoardAttackedByWhite[(Idx + 2)] * 10) + BoardAttackedByWhite[(Idx + 3)])) + 1)]);
            CurrentValue2 = Operator.Join(CurrentValue2, MoveToZeroPadStr[(((BoardAttackedByWhitePiece[(Idx + 0)] * 100) + BoardAttackedByWhitePiece[(Idx + 1)]) + 1)]);
            CurrentValue2 = Operator.Join(CurrentValue2, MoveToZeroPadStr[(((BoardAttackedByWhitePiece[(Idx + 2)] * 100) + BoardAttackedByWhitePiece[(Idx + 3)]) + 1)]);
            Idx += 4;
        }
        List.ReplaceItem(BoardAttackedByWhiteSnapshot, StoreDepth, CurrentValue);
        List.ReplaceItem(BoardAttackedByWhitePieceSnapshot, StoreDepth, CurrentValue2);
        If ((StoreDepth % 2) == 1)
        {
            List.ReplaceItem(CheckedState, StoreDepth, IsBlackChecked);
            If (IsBlackChecked == 0)
            {
                List.ReplaceItem(CheckedStateAttackLines, StoreDepth, "");
            }
            Else
            {
                CurrentValue = "";
                Idx = 1;
                Repeat (64)
                {
                    If List.ContainsItem(KingAttackLines, Idx)
                    {
                        CurrentValue = Operator.Join(CurrentValue, 1);
                    }
                    Else
                    {
                        CurrentValue = Operator.Join(CurrentValue, 0);
                    }
                    Idx += 1;
                }
                List.ReplaceItem(CheckedStateAttackLines, StoreDepth, CurrentValue);
            }
            If (1 == 0)
            {
                Call TTStoreNode(CurrentBoardHash)(StoreDepth)("")("")("")(CheckedState[StoreDepth])(0)("")("")(BoardAttackedByWhiteSnapshot[StoreDepth])(BoardAttackedByWhitePieceSnapshot[StoreDepth])(CheckedStateAttackLines[StoreDepth])("");
            }
            Call TTStoreNode(CurrentBoardHash)(StoreDepth)("")("")("")(CheckedState[StoreDepth])("")("")("")("")("")("")("");
        }
    }
}

Define StoreKillerMove(string Depth)(string Move)(string MaxDepth) (warp=true)
{
    IdxSub = (((Depth - 1) * 2) + 1);
    If (Not ((KillerMoves[(IdxSub + 1)] == Move)))
    {
        List.ReplaceItem(KillerMoves, IdxSub, KillerMoves[(IdxSub + 1)]);
        List.ReplaceItem(KillerMoves, (IdxSub + 1), Move);
    }
    Idx = (((Depth % 2) * 1000) + ((PieceIdxLookup[abs(Board[floor((Move / 100))])] * 100) + floor((Move % 100))));
    CurrentValue = (HistoryMoveScores[Idx] + ((IdxDeepening + 5) - Depth));
    List.ReplaceItem(HistoryMoveScores, Idx, CurrentValue);
    If (CurrentValue > MaxHistoryMoveScore[((Depth % 2) + 1)])
    {
        List.ReplaceItem(MaxHistoryMoveScore, ((Depth % 2) + 1), CurrentValue);
    }
    List.ReplaceItem(HistoryCounterMoves, AppliedMove[(Depth - 1)], Move);
}

Define StoreMinMaxDrawResult(string BoardHash)(string Depth) (warp=true)
{
    List.ReplaceItem(MinMaxResults, Depth, 0);
    List.ReplaceItem(MinMaxResultsIsDynamic, Depth, 0);
    Call TTStoreNode(BoardHash)(Depth)(0)("")("E")("")(99)("")("")("")("")("")(0);
}

Define TaperedEval.Add(string Mg)(string Eg) (warp=true)
{
    TaperedEval.Mg += Operator.Round(Mg);
    TaperedEval.Eg += Operator.Round(Eg);
}

Define TaperedEval.AddIdentical(string Val) (warp=true)
{
    TaperedEval.Mg += Operator.Round(Val);
    TaperedEval.Eg += Operator.Round(Val);
}

Define TaperedEval.GetPiecePosResult(string Piece)(string Idx) (warp=true)
{
    TaperedEval.PiecePosResult = 0;
    IdxSub2 = ((PieceIdxLookup[abs(Piece)] * 10000) + Idx);
    If (Piece > 0)
    {
        Call TaperedEval.GetScalarResult(MovePosLookupBlackMg[IdxSub2])(MovePosLookupBlackEg[IdxSub2])(TaperedEval.ScaleFactor)(TaperedEval.Phase);
        TaperedEval.PiecePosResult = TaperedEval.ScalarResult;
    }
    Else
    {
        If (Piece < 0)
        {
            Call TaperedEval.GetScalarResult(MovePosLookupWhiteMg[IdxSub2])(MovePosLookupWhiteEg[IdxSub2])(TaperedEval.ScaleFactor)(TaperedEval.Phase);
            TaperedEval.PiecePosResult = TaperedEval.ScalarResult;
        }
    }
}

Define TaperedEval.GetScalarResult(string Mg)(string Eg)(string ScaleFactor)(string ScalePhase) (warp=true)
{
    TaperedEval.ScalarResult = Operator.Round((((Mg * ScalePhase) + (Eg * ((128 - ScalePhase) * (ScaleFactor / 128)))) / 128));
}

Define TaperedEval.GetSumResult (warp=true)
{
    Call TaperedEval.GetScalarResult(TaperedEval.Mg)(TaperedEval.Eg)(TaperedEval.ScaleFactor)(TaperedEval.Phase);
    TaperedEval.SumResult = TaperedEval.ScalarResult;
}

Define TaperedEval.Init (warp=true)
{
    TaperedEval.Eg = 0;
    TaperedEval.Mg = 0;
    TaperedEval.SumResult = 0;
    TaperedEval.BlackMaterial = ((BlackQueenCountLocal * 14) + ((BlackRookCountLocal * 6) + ((BlackMinorCountLocal - BlackRookCountLocal) * 3)));
    TaperedEval.WhiteMaterial = ((WhiteQueenCountLocal * 14) + ((WhiteRookCountLocal * 6) + ((WhiteMinorCountLocal - WhiteRookCountLocal) * 3)));
    TaperedEval.Material = (TaperedEval.WhiteMaterial + TaperedEval.BlackMaterial);
    If (TaperedEval.Material > 76)
    {
        TaperedEval.Material = 76;
    }
    If (TaperedEval.Material < 8)
    {
        TaperedEval.Material = 8;
    }
    TaperedEval.Phase = Operator.Round((((TaperedEval.Material - 8) * 128) / (76 - 8)));
    TaperedEval.WhiteMaterial += WhitePawnCountLocal;
    TaperedEval.BlackMaterial += BlackPawnCountLocal;
    If ((1 == 1) And ((((BlackBishopCountLocal == 1) And (BlackBishopCountLocal == 1)) And (((WhiteQueenCountLocal + (WhiteRookCountLocal + WhiteMinorCountLocal)) == 1) And ((BlackQueenCountLocal + (BlackRookCountLocal + WhiteMinorCountLocal)) == 1))) And (Not (((List.IndexOf(Board, GoK_BlackBishop) % 2) == (List.IndexOf(Board, GoK_WhiteBishop) % 2))))))
    {
        If (TaperedEval.WhiteMaterial > TaperedEval.BlackMaterial)
        {
            TaperedEval.ScaleFactor = (42 + (6 * (WhiteMinorCountLocal - WhiteRookCountLocal)));
        }
        Else
        {
            TaperedEval.ScaleFactor = (42 + (6 * (BlackMinorCountLocal - BlackRookCountLocal)));
        }
    }
    Else
    {
        If ((1 == 1) And ((((WhiteQueenCountLocal == 0) And (BlackQueenCountLocal == 0)) And ((WhiteMinorCountLocal < 2) And (BlackMinorCountLocal < 2))) And ((((TaperedEval.WhiteMaterial > TaperedEval.BlackMaterial) And ((WhitePawnCountLocal - BlackPawnCountLocal) > 2)) Or ((TaperedEval.BlackMaterial > TaperedEval.WhiteMaterial) And ((BlackPawnCountLocal - WhitePawnCountLocal) > 2))) Or (abs((WhitePawnCountLocal - BlackPawnCountLocal)) > 2))))
        {
            If (TaperedEval.WhiteMaterial > TaperedEval.BlackMaterial)
            {
                TaperedEval.ScaleFactor = (136 + (3 * WhitePawnCountLocal));
            }
            Else
            {
                TaperedEval.ScaleFactor = (136 + (3 * BlackPawnCountLocal));
            }
        }
        Else
        {
            If (TaperedEval.WhiteMaterial > TaperedEval.BlackMaterial)
            {
                TaperedEval.ScaleFactor = (72 + (14 * WhitePawnCountLocal));
            }
            Else
            {
                TaperedEval.ScaleFactor = (72 + (14 * BlackPawnCountLocal));
            }
            If (TaperedEval.ScaleFactor > 128)
            {
                TaperedEval.ScaleFactor = 128;
            }
        }
    }
}

Define TTProbeBoard(string BoardHash)(string Depth) (warp=true)
{
    Call GetTTNodeHash(BoardHash)(Depth);
    Call TTProbeBoardImpl(TTNodeHashResult);
}

Define TTProbeBoardImpl(string BoardHash) (warp=true)
{
    HashBucket = ((BoardHash % (List.Length(TTBoardHash) - 5)) + 1);
    If (Not ((TTBoardHash[(HashBucket + 0)] == BoardHash)))
    {
        HashBucket += 1;
        If (Not ((TTBoardHash[(HashBucket + 0)] == BoardHash)))
        {
            HashBucket += 1;
            If (Not ((TTBoardHash[(HashBucket + 0)] == BoardHash)))
            {
                HashBucket += 1;
                If (Not ((TTBoardHash[(HashBucket + 0)] == BoardHash)))
                {
                    HashBucket += 1;
                    If (Not ((TTBoardHash[(HashBucket + 0)] == BoardHash)))
                    {
                        TTProbeRes = 0;
                        Stop(this script);
                    }
                }
            }
        }
    }
    TTProbeRes = 1;
    TTProbeBoardScore1Res = TTBoardScore1[(HashBucket + 0)];
    TTProbeBoardScore2Res = TTBoardScore2[(HashBucket + 0)];
    TTProbeBoardScore3Res = TTBoardScore3[(HashBucket + 0)];
    TTProbeBoardScoreSumRes = TTBoardScoreSum[(HashBucket + 0)];
    TTProbeBoardAgeRes = TTBoardAge[(HashBucket + 0)];
}

Define TTProbeNode(string BoardHash)(string Depth) (warp=true)
{
    Call GetTTNodeHash(BoardHash)(Depth);
    Call TTProbeNodeImpl(TTNodeHashResult);
}

Define TTProbeNodeImpl(string BoardHash) (warp=true)
{
    HashBucket = ((BoardHash % (List.Length(TTNodeHash) - 5)) + 1);
    If (Not ((TTNodeHash[(HashBucket + 0)] == (BoardHash + 0))))
    {
        HashBucket += 1;
        If (Not ((TTNodeHash[(HashBucket + 0)] == (BoardHash + 0))))
        {
            HashBucket += 1;
            If (Not ((TTNodeHash[(HashBucket + 0)] == (BoardHash + 0))))
            {
                HashBucket += 1;
                If (Not ((TTNodeHash[(HashBucket + 0)] == (BoardHash + 0))))
                {
                    HashBucket += 1;
                    If (Not ((TTNodeHash[(HashBucket + 0)] == (BoardHash + 0))))
                    {
                        TTProbeRes = 0;
                        Stop(this script);
                    }
                }
            }
        }
    }
    TTProbeRes = 1;
    TTProbeBestMoveRes = TTNodeBestMove[(HashBucket + 0)];
    TTProbeNodeScoreRes = TTNodeScore[(HashBucket + 0)];
    TTProbeNodeTypeRes = TTNodeType[(HashBucket + 0)];
    TTProbeCheckedRes = TTNodeChecked[(HashBucket + 0)];
    TTProbeCheckedAttackLinesRes = TTNodeCheckedAttackLines[(HashBucket + 0)];
    TTProbeHorizonRes = TTNodeHorizon[(HashBucket + 0)];
    TTProbeBoardAttackedByOpp = TTNodeBoardAttackedByOpp[(HashBucket + 0)];
    TTProbeBoardAttackedByOppPiece = TTNodeBoardAttackedByOppPiece[(HashBucket + 0)];
    TTProbeNodeAgeRes = TTNodeAge[(HashBucket + 0)];
    TTProbeNodeScoreIsDynamicRes = TTNodeIsDynamic[(HashBucket + 0)];
}

Define TTStoreBoard(string BoardHash)(string Depth)(string BoardScore1)(string BoardScore2)(string BoardScore3)(string BoardScoreSum) (warp=true)
{
    If (IsMinMaxTimeout == 1)
    {
        Stop(this script);
    }
    Call GetTTNodeHash(BoardHash)(Depth);
    Call TTStoreBoardImpl(TTNodeHashResult)(BoardScore1)(BoardScore2)(BoardScore3)(BoardScoreSum);
}

Define TTStoreBoardImpl(string BoardHash)(string BoardScore1)(string BoardScore2)(string BoardScore3)(string BoardScoreSum) (warp=true)
{
    HashBucket = ((BoardHash % (List.Length(TTBoardHash) - 5)) + 1);
    Hash = TTBoardHash[(HashBucket + 0)];
    Idx = 1;
    Repeat Until (((Hash == BoardHash) Or (Hash == 0)) Or (Idx > 4))
    {
        Idx += 1;
        HashBucket += 1;
        Hash = TTBoardHash[(HashBucket + 0)];
    }
    If ((Not ((Hash == BoardHash))) And (Not ((Hash == 0))))
    {
        Idx = 1;
        Repeat Until (TTBoardAge[(HashBucket + 0)] < (TTCurrentAge - 1))
        {
            If (Idx > 4)
            {
                Stop(this script);
            }
            Idx += 1;
            HashBucket += 1;
        }
    }
    If (TTBoardHash[(HashBucket + 0)] == BoardHash)
    {
        If (Not ((BoardScore1 == "")))
        {
            List.ReplaceItem(TTBoardScore1, (HashBucket + 0), BoardScore1);
        }
        If (Not ((BoardScore2 == "")))
        {
            List.ReplaceItem(TTBoardScore2, (HashBucket + 0), BoardScore2);
        }
        If (Not ((BoardScore3 == "")))
        {
            List.ReplaceItem(TTBoardScore3, (HashBucket + 0), BoardScore3);
        }
        If (Not ((BoardScoreSum == "")))
        {
            List.ReplaceItem(TTBoardScoreSum, (HashBucket + 0), BoardScoreSum);
        }
        List.ReplaceItem(TTBoardAge, (HashBucket + 0), TTCurrentAge);
    }
    Else
    {
        List.ReplaceItem(TTBoardHash, (HashBucket + 0), BoardHash);
        List.ReplaceItem(TTBoardScore1, (HashBucket + 0), BoardScore1);
        List.ReplaceItem(TTBoardScore2, (HashBucket + 0), BoardScore2);
        List.ReplaceItem(TTBoardScore3, (HashBucket + 0), BoardScore3);
        List.ReplaceItem(TTBoardScoreSum, (HashBucket + 0), BoardScoreSum);
        List.ReplaceItem(TTBoardAge, (HashBucket + 0), TTCurrentAge);
    }
}

Define TTStoreNode(string BoardHash)(string Depth)(string Score)(string BestMove)(string Type)(string Checked)(string Horizon)(string BlackMob)(string WhiteMob)(string BoardAttackedByOpp)(string BoardAttackedByOppPiece)(string CheckedAttackLines)(string IsDynamic) (warp=true)
{
    If (IsMinMaxTimeout == 1)
    {
        Stop(this script);
    }
    If (Score == DrawByRepetitionEval)
    {
        Stop(this script);
    }
    If (Score > AbsMinCheckmateEval)
    {
        Stop(this script);
    }
    If (ChebyshevDistance[((BlackKingIdx * 100) + WhiteKingIdx)] == 1)
    {
        Stop(this script);
    }
    Call GetTTNodeHash(BoardHash)(Depth);
    Call TTStoreNodeImpl(TTNodeHashResult)(Depth)(Score)(BestMove)(Type)(Checked)(Horizon)(BlackMob)(WhiteMob)(BoardAttackedByOpp)(BoardAttackedByOppPiece)(CheckedAttackLines)(IsDynamic);
}

Define TTStoreNodeImpl(string BoardHash)(string Depth)(string Score)(string BestMove)(string Type)(string Checked)(string Horizon)(string BlackMob)(string WhiteMob)(string BoardAttackedByOpp)(string BoardAttackedByOppPiece)(string CheckedAttackLines)(string IsDynamic) (warp=true)
{
    HashBucket = ((BoardHash % (List.Length(TTNodeHash) - 5)) + 1);
    Hash = TTNodeHash[(HashBucket + 0)];
    Idx = 1;
    Repeat Until (((Hash == BoardHash) Or (Hash == 0)) Or (Idx > 4))
    {
        Idx += 1;
        HashBucket += 1;
        Hash = TTNodeHash[(HashBucket + 0)];
    }
    If ((Not ((Hash == BoardHash))) And (Not ((Hash == 0))))
    {
        Idx = 1;
        Repeat Until (TTNodeAge[(HashBucket + 0)] < (TTCurrentAge - 1))
        {
            If (Idx > 4)
            {
                Stop(this script);
            }
            Idx += 1;
            HashBucket += 1;
        }
    }
    If (TTNodeHash[(HashBucket + 0)] == BoardHash)
    {
        If (Not ((BoardAttackedByOpp == "")))
        {
            List.ReplaceItem(TTNodeBoardAttackedByOpp, (HashBucket + 0), BoardAttackedByOpp);
            List.ReplaceItem(TTNodeBoardAttackedByOppPiece, (HashBucket + 0), BoardAttackedByOppPiece);
            List.ReplaceItem(TTNodeCheckedAttackLines, (HashBucket + 0), CheckedAttackLines);
        }
        If (Not ((Checked == "")))
        {
            List.ReplaceItem(TTNodeChecked, (HashBucket + 0), Checked);
        }
        HorizonLoc = TTNodeHorizon[(HashBucket + 0)];
        If (((Not ((Score == ""))) And (Not ((Horizon == "")))) And (((Not ((Horizon < HorizonLoc))) Or (HorizonLoc == "")) Or (TTNodeScore[(HashBucket + 0)] == "")))
        {
            List.ReplaceItem(TTNodeType, (HashBucket + 0), Type);
            List.ReplaceItem(TTNodeScore, (HashBucket + 0), Score);
            List.ReplaceItem(TTNodeHorizon, (HashBucket + 0), Horizon);
            List.ReplaceItem(TTNodeAge, (HashBucket + 0), TTCurrentAge);
            List.ReplaceItem(MinMaxResultsIsDynamic, (HashBucket + 0), IsDynamic);
            List.ReplaceItem(TTNodeBestMove, (HashBucket + 0), BestMove);
        }
    }
    Else
    {
        List.ReplaceItem(TTNodeHash, (HashBucket + 0), BoardHash);
        List.ReplaceItem(TTNodeDepth, (HashBucket + 0), Depth);
        List.ReplaceItem(TTNodeHorizon, (HashBucket + 0), Horizon);
        List.ReplaceItem(TTNodeType, (HashBucket + 0), Type);
        List.ReplaceItem(TTNodeScore, (HashBucket + 0), Score);
        List.ReplaceItem(TTNodeBestMove, (HashBucket + 0), BestMove);
        List.ReplaceItem(TTNodeBoardAttackedByOpp, (HashBucket + 0), BoardAttackedByOpp);
        List.ReplaceItem(TTNodeBoardAttackedByOppPiece, (HashBucket + 0), BoardAttackedByOppPiece);
        List.ReplaceItem(TTNodeChecked, (HashBucket + 0), Checked);
        List.ReplaceItem(TTNodeCheckedAttackLines, (HashBucket + 0), CheckedAttackLines);
        List.ReplaceItem(MinMaxResultsIsDynamic, (HashBucket + 0), IsDynamic);
        List.ReplaceItem(TTNodeAge, (HashBucket + 0), TTCurrentAge);
    }
}

Define UndoMove (warp=false)
{
    Call EnterExecution;
    If ((IsInUndo == 0) And (List.Length(GameMovesAN) > 1))
    {
        IsInUndo = 1;
        Stg_FromSquareIdx = -1;
        Stg_ToSquareIdx = -1;
        Event.BroadcastAndWait("fromsquareselected");
        Event.BroadcastAndWait("tosquareselected");
        Call UndoPrevMove;
        If (BoardHistoryWasEngineMove[List.Length(BoardHistoryWasEngineMove)] == 0)
        {
            Call UndoPrevMove;
        }
        Call DrawBoardAndWait;
        GoK_IsGameSuspended = 0;
        IsInUndo = 0;
    }
    Call ExitExecution;
}

Define UndoPrevMove (warp=false)
{
    If (List.Length(GameMovesAN) > 0)
    {
        List.DeleteItem(BoardHistory, List.Length(BoardHistory));
        List.DeleteItem(BoardHistoryHash, List.Length(BoardHistoryHash));
        List.DeleteItem(BoardHistoryFiftyMoves, List.Length(BoardHistoryFiftyMoves));
        List.DeleteItem(BoardHistoryMetaState, List.Length(BoardHistoryMetaState));
        List.DeleteItem(BoardHistoryWasEngineMove, List.Length(BoardHistoryWasEngineMove));
        List.DeleteItem(GameMovesAN, List.Length(GameMovesAN));
        Call ImportBoardImpl(BoardHistory[List.Length(BoardHistory)]);
        Call GetSubstringLeft(GameMoves)((Variable.Length(GameMoves) - 4));
        GameMoves = SubstringRes;
        HasBlackCastled = Operator.LetterOf(BoardHistoryMetaState[List.Length(BoardHistoryMetaState)], 1);
        HasBlackKingMoved = Operator.LetterOf(BoardHistoryMetaState[List.Length(BoardHistoryMetaState)], 2);
        HasBlackRookKSMoved = Operator.LetterOf(BoardHistoryMetaState[List.Length(BoardHistoryMetaState)], 3);
        HasBlackRookQSMoved = Operator.LetterOf(BoardHistoryMetaState[List.Length(BoardHistoryMetaState)], 4);
        HasWhiteCastled = Operator.LetterOf(BoardHistoryMetaState[List.Length(BoardHistoryMetaState)], 5);
        HasWhiteKingMoved = Operator.LetterOf(BoardHistoryMetaState[List.Length(BoardHistoryMetaState)], 6);
        HasWhiteRookKSMoved = Operator.LetterOf(BoardHistoryMetaState[List.Length(BoardHistoryMetaState)], 7);
        HasWhiteRookQSMoved = Operator.LetterOf(BoardHistoryMetaState[List.Length(BoardHistoryMetaState)], 8);
        Call CalcBoardStats;
    }
}

Define UpdateMoveHashPosScore(string Piece)(string SourceIdx)(string TargetIdx)(bool PosScoreUpdate)(string Depth) (warp=true)
{
    Call TaperedEval.Init;
    Call GetPiecePosHash(Piece)(SourceIdx);
    CurrentBoardHash = (CurrentBoardHash - PiecePosHash);
    If ((abs(Piece) == GoK_BlackPawn) Or (abs(Piece) == GoK_BlackKing))
    {
        CurrentBoardHash2 = (CurrentBoardHash2 - PiecePosHash);
    }
    Call GetPiecePosHash(Piece)(TargetIdx);
    CurrentBoardHash = (CurrentBoardHash + PiecePosHash);
    If ((abs(Piece) == GoK_BlackPawn) Or (abs(Piece) == GoK_BlackKing))
    {
        CurrentBoardHash2 = (CurrentBoardHash2 + PiecePosHash);
    }
    Call TaperedEval.GetPiecePosResult(Piece)(SourceIdx);
    If PosScoreUpdate
    {
        List.ReplaceItem(PosScoreDelta, Depth, (PosScoreDelta[Depth] - TaperedEval.PiecePosResult));
    }
    Else
    {
        List.ReplaceItem(PosScoreDelta, Depth, (0 - TaperedEval.PiecePosResult));
    }
    Call TaperedEval.GetPiecePosResult(Piece)(TargetIdx);
    List.ReplaceItem(PosScoreDelta, Depth, (PosScoreDelta[Depth] + TaperedEval.PiecePosResult));
}

Define UpdateMoveNotationPV (warp=true)
{
    PV = "";
    Idx = 2;
    Repeat (PV[1])
    {
        PV = Operator.Join(Operator.Join(PV, PV[Idx]), " ");
        Idx += 1;
    }
}

Define UpdatePV(string Depth)(string BestMove) (warp=true)
{
    Idx = (((Depth - 1) * MaxSearchDepthStackFrames) + 1);
    IdxSub = ((Depth * MaxSearchDepthStackFrames) + 1);
    Len = PV[IdxSub];
    List.ReplaceItem(PV, Idx, (Len + 1));
    Call GetMoveNotation(BestMove);
    List.ReplaceItem(PV, (Idx + 1), MoveNotationRes);
    Idx += 2;
    IdxSub += 1;
    Repeat (Len)
    {
        List.ReplaceItem(PV, Idx, PV[IdxSub]);
        Idx += 1;
        IdxSub += 1;
    }
    If (Depth == 1)
    {
        If (PV[1] > 1)
        {
            Call UpdateMoveNotationPV;
        }
    }
}

Define _ClearLists (warp=true)
{
    List.DeleteItem(MoveToZeroPadStr, all);
    List.DeleteItem(OpeningMoves, all);
    List.DeleteItem(OpeningMovesMapHash, all);
    List.DeleteItem(OpeningMovesMapMove, all);
    List.DeleteItem(OpeningMovesMapStack, all);
    List.DeleteItem(PosPieceHashLookup, all);
    List.DeleteItem(KillerMoves, all);
    List.DeleteItem(HistoryMoveScores, all);
    List.DeleteItem(MaxHistoryMoveScore, all);
    List.DeleteItem(HistoryCounterMoves, all);
    List.DeleteItem(BoardHistory, all);
    List.DeleteItem(BoardHistoryHash, all);
    List.DeleteItem(BoardHistoryFiftyMoves, all);
    List.DeleteItem(BoardHistoryMetaState, all);
    List.DeleteItem(BoardHistoryWasEngineMove, all);
    List.DeleteItem(GameMovesAN, all);
    List.DeleteItem(BoardAttackedByWhite, all);
    List.DeleteItem(BoardAttackedByBlack, all);
    List.DeleteItem(PieceMobility, all);
    List.DeleteItem(BoardAttackedByWhitePiece, all);
    List.DeleteItem(BoardAttackedByBlackPiece, all);
    List.DeleteItem(Alphas, all);
    List.DeleteItem(Betas, all);
    List.DeleteItem(AlphasOld, all);
    List.DeleteItem(BetasOld, all);
    List.DeleteItem(MinMaxResults, all);
    List.DeleteItem(MinMaxResultsIsDynamic, all);
    List.DeleteItem(MovesCount, all);
    List.DeleteItem(MovesIdx, all);
    List.DeleteItem(MovesIdxBestMove, all);
    List.DeleteItem(TargetPieces, all);
    List.DeleteItem(PreviousBoardHash, all);
    List.DeleteItem(PreviousBoardHash2, all);
    List.DeleteItem(ScoreTypes, all);
    List.DeleteItem(PickMoveRes, all);
    List.DeleteItem(PickPhase, all);
    List.DeleteItem(PickedMoves, all);
    List.DeleteItem(PickedMoveCount, all);
    List.DeleteItem(BestMoves, all);
    List.DeleteItem(CheckedState, all);
    List.DeleteItem(CheckedStateAttackLines, all);
    List.DeleteItem(PromotionPieces, all);
    List.DeleteItem(TargetPiecesIdx, all);
    List.DeleteItem(PosScoreDelta, all);
    List.DeleteItem(BoardAttackedCalculated, all);
    List.DeleteItem(PutsInCheck, all);
    List.DeleteItem(EvalExtended1, all);
    List.DeleteItem(PlyExtension, all);
    List.DeleteItem(SourcePieces, all);
    List.DeleteItem(EvalExtended2, all);
    List.DeleteItem(EvalExtended3, all);
    List.DeleteItem(BlackMobBonus, all);
    List.DeleteItem(WhiteMobBonus, all);
    List.DeleteItem(AppliedMove, all);
    List.DeleteItem(CapturesDeltaSum, all);
    List.DeleteItem(PosScoreDeltaSum, all);
    List.DeleteItem(PlyExtensionTagged, all);
    List.DeleteItem(BoardAttackedByBlackPieceSnapshot, all);
    List.DeleteItem(BoardAttackedByBlackSnapshot, all);
    List.DeleteItem(BoardAttackedByWhitePieceSnapshot, all);
    List.DeleteItem(BoardAttackedByWhiteSnapshot, all);
    List.DeleteItem(Quiescence, all);
    List.DeleteItem(EnPassantTarget, all);
    List.DeleteItem(PassedWhitePawnOnEndgame, all);
    List.DeleteItem(CastlingState, all);
    List.DeleteItem(PawnShelterCapture, all);
    List.DeleteItem(BoardEval, all);
    List.DeleteItem(HashMoveMetaData, all);
    List.DeleteAll(ChebyshevDistance);
    List.DeleteAll(MoveHashLookupBlack);
    List.DeleteAll(MoveHashLookupWhite);
    List.DeleteAll(MovePosLookupBlackMg);
    List.DeleteAll(MovePosLookupWhiteMg);
    List.DeleteAll(MovePathDelta);
    List.DeleteAll(MovePathStepInc);
    List.DeleteAll(Moves);
    List.DeleteAll(HistoryMoveScores);
    List.DeleteAll(HistoryCounterMoves);
    List.DeleteAll(PieceIdxLookup);
    List.DeleteItem(MoveLookupStraight, all);
    List.DeleteItem(MoveLookupCross, all);
    List.DeleteItem(MoveLookupOffsetsStraight, all);
    List.DeleteItem(MoveLookupOffsetsCross, all);
    List.DeleteItem(MoveLookupKnight, all);
    List.DeleteItem(MoveLookupKing, all);
    List.DeleteItem(MoveLookupIndexOffset, all);
    List.DeleteItem(MoveLookupLineIndexOffset, all);
    List.DeleteItem(TTNodeHash, all);
    List.DeleteItem(TTNodeBestMove, all);
    List.DeleteItem(TTNodeScore, all);
    List.DeleteItem(TTNodeDepth, all);
    List.DeleteItem(TTNodeAge, all);
    List.DeleteItem(TTNodeIsDynamic, all);
    List.DeleteItem(TTNodeType, all);
    List.DeleteItem(TTNodeChecked, all);
    List.DeleteItem(TTNodeHorizon, all);
    List.DeleteItem(TTBoardAge, all);
    List.DeleteItem(TTBoardHash, all);
    List.DeleteItem(TTBoardScore1, all);
    List.DeleteItem(TTBoardScore2, all);
    List.DeleteItem(TTBoardScore3, all);
    List.DeleteItem(TTBoardScoreSum, all);
    List.DeleteItem(TTNodeBoardAttackedByOpp, all);
    List.DeleteItem(TTNodeBoardAttackedByOppPiece, all);
    List.DeleteItem(TTNodeCheckedAttackLines, all);
    List.DeleteItem(PieceMobilityPrep, all);
    List.DeleteItem(PieceMobility, all);
    List.DeleteItem(MovePosLookupBlackLegal, all);
    List.DeleteItem(MovePosLookupWhiteLegal, all);
    List.DeleteItem(MovePosLookupBlackEg, all);
    List.DeleteItem(MovePosLookupWhiteEg, all);
    List.DeleteItem(MovePosLookupBlackMg, all);
    List.DeleteItem(MovePosLookupWhiteMg, all);
    List.DeleteItem(MinMaxPly1Scores, all);
}

