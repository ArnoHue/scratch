//----- Green flag events ---------------------------------------------------------------------------------------------

WhenGreenFlagClicked()
{
    NNUE_Decoded = 0;
    Level = 4;
    GoK_Level = 4;
    If is compiled?
    {
        IsScratch3 = 0;
    }
    Else
    {
        IsScratch3 = 1;
    }
    Call OnRestart;
}


//----- Key pressed events --------------------------------------------------------------------------------------------

WhenKeyPressed(l)
{
    If (DebugMode == -1)
    {
        Stop(this script);
    }
    List.Show(Logfile);
}

WhenKeyPressed(p)
{
    If (ProfilerMode == -1)
    {
        Stop(this script);
    }
    If ((ProfilerMode % 10) == 0)
    {
        ProfilerMode += 1;
        IsBlockProfilerEnabled = 0;
        Call SayAsync("Statistical profiling enabled. Press 'l' to view data.")(2);
    }
    Else
    {
        If ((ProfilerMode % 10) == 1)
        {
            ProfilerMode += 1;
            IsBlockProfilerEnabled = 1;
            Call SayAsync("Full profiling enabled. Press 'l' / 'r' to view data.")(2);
        }
        Else
        {
            If ((ProfilerMode % 10) == 2)
            {
                ProfilerMode += -2;
                IsBlockProfilerEnabled = 0;
                Call SayAsync("Profiling disabled.")(2);
            }
        }
    }
}

WhenKeyPressed(d)
{
    If (DebugMode == -1)
    {
        Stop(this script);
    }
    If (DebugMode == 0)
    {
        DebugMode = 1;
        Variable.Show(IdxDeepening);
        Variable.Show(BestSearchEvalRes);
        Variable.Show(BestMove);
        Variable.Show(NPS);
        Variable.Show(MPS);
        Variable.Show(PV);
    }
    Else
    {
        DebugMode = 0;
        Variable.Hide(IdxDeepening);
        Variable.Hide(BestSearchEvalRes);
        Variable.Hide(BestMove);
        Variable.Hide(NPS);
        Variable.Hide(MPS);
        Variable.Hide(PV);
    }
}

WhenKeyPressed(v)
{
    Call SayAsync("Game of Kings Chess NNUE Version 7.337 (14.09.2025) by ArnoHu")(5);
}

WhenKeyPressed(r)
{
    If (ProfilerMode == -1)
    {
        Stop(this script);
    }
    If (ProfilerMode < 10)
    {
        ProfilerMode += 10;
        List.Show(ProfilingData);
    }
    Else
    {
        ProfilerMode += -10;
        List.Hide(ProfilingData);
    }
}

WhenKeyPressed(t)
{
    If (TimeControl == -1)
    {
        Stop(this script);
    }
    If (TimeControl == 0)
    {
        TimeControl = 1;
        Variable.Show(CustomThinkTime);
    }
    Else
    {
        TimeControl = 0;
        Variable.Hide(CustomThinkTime);
    }
}


//----- Broadcast received events -------------------------------------------------------------------------------------

WhenBroadcastReceived(GoK_LevelChanged)
{
    Level = GoK_Level;
    Call DrawBoardAndWait;
}

WhenBroadcastReceived(GoK_StartGame)
{
    Motion.GoToXY(120, 120);
    ExecutionDepth = 0;
    IsExecutionRunning = 0;
    IsPlayerBlack = GoK_IsPlayerBlack;
    Call EnterExecution;
    Call InitBoard;
    Call DrawBoardAndWait;
    Looks.Say("Initializing engine, please wait...");
    Control.Wait(0.1);
    Call InitBoardPhase2;
    Control.Wait(0.1);
    Call ExitExecution;
    Call ExecuteInit;
    Looks.Say("");
}

WhenBroadcastReceived(sayasyncmsg)
{
    Looks.Say(SayAsyncText, SayAsyncDuration);
}

WhenBroadcastReceived(showmoves)
{
    Call ExportMovesPGN;
    List.DeleteItem(ExportMoves, all);
    List.Add(ExportMoves, ExportMovesPGN);
    List.Show(ExportMoves);
    Call SayAsync("You can copy PGN data to the clipboard via Ctrl-C")(5);
}

WhenBroadcastReceived(Stg_FromSquareSelected)
{
    If ((IsAdvisorEnabled == 1) And (Not ((Stg_FromSquareIdx == -1))))
    {
        Stg_BestMoveFromIdx = Stg_FromSquareIdx;
        List.DeleteAll(Selection_UserMoveTargets);
        Call GenerateMovesPublic(2);
        List.ReplaceItem(MovesIdx, 2, 1);
        Repeat (MovesCount[2])
        {
            Call GetCurrentMove(2);
            Caller.CurrentMove = CurrentMove;
            If (floor((Caller.CurrentMove / 100)) == Stg_FromSquareIdx)
            {
                Call ApplyMove(2);
                Call CalcBoardAttackedByMove(3);
                Call RevertMove(2);
                If (IsWhiteChecked == 0)
                {
                    List.Add(Selection_UserMoveTargets, floor((Caller.CurrentMove % 100)));
                }
            }
            Else
            {
                If (Board[Stg_FromSquareIdx] == GoK_WhiteKing)
                {
                    If (Caller.CurrentMove == GoK_WhiteKingsideCastling)
                    {
                        List.Add(Selection_UserMoveTargets, VirtualBoard[63]);
                    }
                    Else
                    {
                        If (Caller.CurrentMove == GoK_WhiteQueensideCastling)
                        {
                            List.Add(Selection_UserMoveTargets, VirtualBoard[59]);
                        }
                    }
                }
            }
            List.ReplaceItem(MovesIdx, 2, (MovesIdx[2] + 1));
        }
        Call DrawBoardAndWait;
        Event.BroadcastAndWait("UI_StampUserMoveTargets");
    }
}

WhenBroadcastReceived(Stg_SquareClicked)
{
    If ((IsExecutionRunning == 0) And (GoK_IsGameSuspended == 0))
    {
        Call EnterExecution;
        If (Board[Stg_SquareClickedIdx] < 0)
        {
            MoveFromIdx = Stg_SquareClickedIdx;
            Stg_FromSquareIdx = Stg_SquareClickedIdx;
            Event.BroadcastAndWait("Stg_FromSquareSelected");
        }
        Else
        {
            If ((Not ((MoveFromIdx == -1))) And (Not ((Stg_FromSquareIdx == -1))))
            {
                MoveToIdx = Stg_SquareClickedIdx;
                Stg_ToSquareIdx = Stg_SquareClickedIdx;
                Event.BroadcastAndWait("Stg_ToSquareSelected");
                If ((Board[MoveFromIdx] < 0) And (Not ((MoveFromIdx == MoveToIdx))))
                {
                    UserMove = "";
                    If ((Board[MoveFromIdx] == GoK_WhiteKing) And (MoveFromIdx == VirtualBoard[61]))
                    {
                        If ((MoveToIdx == VirtualBoard[59]) And (Board[VirtualBoard[57]] == GoK_WhiteRook))
                        {
                            Call GenerateMovesPublic(2);
                            If List.ContainsItem(Moves2, GoK_WhiteQueensideCastling)
                            {
                                UserMove = GoK_WhiteQueensideCastling;
                            }
                            Else
                            {
                                UserMove = Operator.Join(VirtualBoard[61], VirtualBoard[59]);
                            }
                        }
                        If ((MoveToIdx == VirtualBoard[63]) And (Board[VirtualBoard[64]] == GoK_WhiteRook))
                        {
                            Call GenerateMovesPublic(2);
                            If List.ContainsItem(Moves2, GoK_WhiteKingsideCastling)
                            {
                                UserMove = GoK_WhiteKingsideCastling;
                            }
                            Else
                            {
                                UserMove = Operator.Join(VirtualBoard[61], VirtualBoard[63]);
                            }
                        }
                    }
                    If (UserMove == "")
                    {
                        UserMove = ((MoveFromIdx * 100) + MoveToIdx);
                        If ((Board[MoveFromIdx] == GoK_WhitePawn) And (MoveToIdx < 9))
                        {
                            UserMove = (UserMove + 0.1);
                        }
                    }
                }
                Call ExecuteUserMove(UserMove);
            }
        }
        Call ExitExecution;
    }
}

WhenBroadcastReceived(Stg_StageClicked)
{
    List.Hide(ExportMoves);
    List.Hide(ExportData);
    List.Hide(CreditsData);
    List.Hide(Logfile);
    If (Not ((ProfilerMode < 10)))
    {
        ProfilerMode += -10;
        List.Hide(ProfilingData);
    }
    If (IsExecutionRunning == 0)
    {
        Looks.Say("");
    }
}

WhenBroadcastReceived(Stg_TriggerRestart)
{
    Call OnRestart;
}

WhenBroadcastReceived(UI_AdvisorClicked)
{
    If (IsExecutionRunning == 0)
    {
        If (IsAdvisorEnabled == 1)
        {
            IsAdvisorEnabled = 0;
            Call DrawBoardAndWait;
        }
        Else
        {
            IsAdvisorEnabled = 1;
            If (Not ((Stg_FromSquareIdx == -1)))
            {
                Event.BroadcastAndWait("Stg_FromSquareSelected");
            }
        }
    }
}

WhenBroadcastReceived(UI_CreditsClicked)
{
    If (IsExecutionRunning == 0)
    {
        List.DeleteItem(CreditsData, all);
        List.Add(CreditsData, "CREDITS AND LICENSE INFO");
        List.Add(CreditsData, "");
        List.Add(CreditsData, "Created by ArnoHu 2017 - 2025");
        List.Add(CreditsData, "");
        List.Add(CreditsData, "Smallbrain Neural Network Model Data (GPL)");
        List.Add(CreditsData, "https://github.com/Disservin/Smallbrain/");
        List.Add(CreditsData, "");
        List.Add(CreditsData, "When reusing NNUE code, please give credits:");
        List.Add(CreditsData, "- To the Smallbrain project for model data");
        List.Add(CreditsData, "- To ArnoHu for Scratch port & integration");
        List.Add(CreditsData, "Credits and links should be clearly visible.");
        List.Add(CreditsData, "");
        List.Add(CreditsData, "Thanks to: ");
        List.Add(CreditsData, "FastSkript for improved accumulator updates");
        List.Add(CreditsData, "Grijfland for original opening book");
        List.Add(CreditsData, "S_P_A_R_T for opening book data");
        List.Add(CreditsData, "");
        List.Add(CreditsData, "AI Bot image licensed from shutterstock.com ");
        List.Add(CreditsData, "Piece SVGs licensed from shutterstock.com license");
        List.Add(CreditsData, "All other graphics free for non-commercial use:");
        List.Add(CreditsData, "Board:");
        List.Add(CreditsData, "https://upload.wikimedia.org/wikipedia/commons/5/5b/Chess-niemann.PNG");
        List.Add(CreditsData, "Intro screen:");
        List.Add(CreditsData, "https://pixabay.com/p-316657/");
        List.Add(CreditsData, "");
        List.Add(CreditsData, "Quicksort (I fixed a method stack bug):");
        List.Add(CreditsData, "https://scratch.mit.edu/projects/41440388/");
        List.Add(CreditsData, "Piece Square Tables:");
        List.Add(CreditsData, "https://www.chessprogramming.net/using-excel-to-help-create-piece-square-tables/");
        List.Show(CreditsData);
    }
}

WhenBroadcastReceived(UI_ExportClicked)
{
    If (IsExecutionRunning == 0)
    {
        Call ExportBoardFEN((IsPlayerBlack == 1))((1 == 1));
        List.DeleteItem(ExportData, all);
        List.Add(ExportData, "DATA EXPORT");
        List.Add(ExportData, "Select data row by triple-clicking. You can then copy to");
        List.Add(ExportData, "clipboard by right-click / Copy or by pressing Ctrl-C.");
        List.Add(ExportData, "");
        List.Add(ExportData, "PGN (Game Protocol):");
        Call ExportMovesPGN;
        List.Add(ExportData, ExportMovesPGN);
        List.Add(ExportData, "");
        List.Add(ExportData, "FEN (Current Board):");
        List.Add(ExportData, ExportDataFEN);
        List.Add(ExportData, "");
        List.Add(ExportData, "Board Analysis Link (lichess.org)");
        List.Add(ExportData, ExportDataFENLichess);
        List.Show(ExportData);
    }
}

WhenBroadcastReceived(UI_ImportClicked)
{
    If (IsExecutionRunning == 0)
    {
        Sensing.Ask("Board data import. Please paste FEN data from your clipboard into the text field by pressing Ctrl-V.");
        If (Variable.Length(Sensing.Answer()) > 0)
        {
            Call ImportBoard(Sensing.Answer());
        }
    }
}

WhenBroadcastReceived(UI_UndoClicked)
{
    If (IsExecutionRunning == 0)
    {
        Call UndoMove;
        GoK_EvaluationValue = 0;
        Event.Broadcast("GoK_EvaluationValueChanged");
        Looks.Say("");
    }
}


//----- Custom blocks -------------------------------------------------------------------------------------------------

Define //(string Comment) (warp=true)
{
}

Define AddBoardToHistory(string WasEngineMove) (warp=true)
{
    Call GetBoardString;
    List.Add(BoardHistory, GetBoardStringRes);
    Call CreateCurrentBoardHash;
    List.Add(BoardHistoryHash, CurrentBoardHash);
    List.Add(BoardHistoryMetaState, Operator.Join(Operator.Join(Operator.Join(HasBlackCastled, HasBlackKingMoved), Operator.Join(HasBlackRookKSMoved, HasBlackRookQSMoved)), Operator.Join(Operator.Join(HasWhiteCastled, HasWhiteKingMoved), Operator.Join(HasWhiteRookKSMoved, HasWhiteRookQSMoved))));
    List.Add(BoardHistoryWasEngineMove, WasEngineMove);
}

Define AddLookupMove(string SourceIdx)(string Depth)(bool CalcAttackState)(bool CapturesOnly)(bool LookupMoveTypeKing) (warp=true)
{
    AddMove.SourcePiece = Board[SourceIdx];
    AddMove.Idx = MoveSourceIdxToListOffsetNonSliding[SourceIdx];
    AddMove.Count = 1;
    Repeat (8)
    {
        If LookupMoveTypeKing
        {
            AddMove.TargetIdx = MoveListOffsetToTargetIdxKing[(AddMove.Idx + AddMove.Count)];
        }
        Else
        {
            AddMove.TargetIdx = MoveListOffsetToTargetIdxKnight[(AddMove.Idx + AddMove.Count)];
        }
        If (AddMove.TargetIdx == -1)
        {
            Stop(this script);
        }
        If CalcAttackState
        {
            Call AddMoveImplLookup(SourceIdx)(AddMove.TargetIdx)(Depth)(CalcAttackState)(CapturesOnly)(LookupMoveTypeKing);
        }
        Else
        {
            If (Board[AddMove.TargetIdx] == 0)
            {
                If CapturesOnly
                {
                    If LookupMoveTypeKing
                    {
                        If (CheckedState[Depth] == 1)
                        {
                            Call AddMoveImplLookup(SourceIdx)(AddMove.TargetIdx)(Depth)(CalcAttackState)(CapturesOnly)(LookupMoveTypeKing);
                        }
                        Else
                        {
                            Call AddPotentialQuiescenceMove(SourceIdx)(AddMove.TargetIdx)(AddMove.SourcePiece)(Depth);
                        }
                    }
                    Else
                    {
                        Call AddPotentialQuiescenceMove(SourceIdx)(AddMove.TargetIdx)(AddMove.SourcePiece)(Depth);
                    }
                }
                Else
                {
                    Call AddMoveImplLookup(SourceIdx)(AddMove.TargetIdx)(Depth)(CalcAttackState)(CapturesOnly)(LookupMoveTypeKing);
                }
            }
            Else
            {
                If (AddMove.SourcePiece > 0)
                {
                    If (Board[AddMove.TargetIdx] < 0)
                    {
                        Call AddMoveImplLookup(SourceIdx)(AddMove.TargetIdx)(Depth)(CalcAttackState)(CapturesOnly)(LookupMoveTypeKing);
                    }
                }
                Else
                {
                    If (Board[AddMove.TargetIdx] > 0)
                    {
                        Call AddMoveImplLookup(SourceIdx)(AddMove.TargetIdx)(Depth)(CalcAttackState)(CapturesOnly)(LookupMoveTypeKing);
                    }
                }
            }
        }
        AddMove.Count += 1;
    }
}

Define AddMoveImpl(string SourceIdx)(string TargetIdx)(string Depth)(bool AttackTableOnly)(bool Quiescence) (warp=true)
{
    If AttackTableOnly
    {
        AM.SourcePiece = Board[(SourceIdx + 0)];
        If (AM.SourcePiece > 0)
        {
            AM.AttackCount = BoardAttackedByBlack[(TargetIdx + 0)];
            If (AM.AttackCount < 9)
            {
                List.ReplaceItem(BoardAttackedByBlack, (TargetIdx + 0), (AM.AttackCount + 1));
            }
            If ((BoardAttackedByBlackPiece[(TargetIdx + 0)] == 0) Or (Board[BoardAttackedByBlackPiece[(TargetIdx + 0)]] > AM.SourcePiece))
            {
                List.ReplaceItem(BoardAttackedByBlackPiece, (TargetIdx + 0), SourceIdx);
            }
            If (Board[(TargetIdx + 0)] == GoK_WhiteKing)
            {
                IsWhiteChecked = 1;
                List.Add(KingAttackLines, SourceIdx);
            }
        }
        Else
        {
            AM.AttackCount = BoardAttackedByWhite[(TargetIdx + 0)];
            If (AM.AttackCount < 9)
            {
                List.ReplaceItem(BoardAttackedByWhite, (TargetIdx + 0), (AM.AttackCount + 1));
            }
            If ((BoardAttackedByWhitePiece[(TargetIdx + 0)] == 0) Or (Board[BoardAttackedByWhitePiece[(TargetIdx + 0)]] < AM.SourcePiece))
            {
                List.ReplaceItem(BoardAttackedByWhitePiece, (TargetIdx + 0), SourceIdx);
            }
            If (Board[(TargetIdx + 0)] == GoK_BlackKing)
            {
                IsBlackChecked = 1;
                List.Add(KingAttackLines, SourceIdx);
            }
        }
        Stop(this script);
    }
    If (CheckedState[Depth] == 1)
    {
        If (Not ((Operator.LetterOf(CheckedStateAttackLines[Depth], TargetIdx) == 1)))
        {
            If (Not ((abs(Board[SourceIdx]) == GoK_BlackKing)))
            {
                If (Not ((abs(Board[TargetIdx]) == GoK_BlackKing)))
                {
                    If (BoardAttackedCalculated[Depth] == 1)
                    {
                        If ((Depth > 2) And (EnPassantTarget[Depth] == ""))
                        {
                            Stop(this script);
                        }
                    }
                }
            }
        }
    }
    CurrentMove = ((SourceIdx * 100) + TargetIdx);
    If (abs(Board[SourceIdx]) == GoK_BlackPawn)
    {
        If ((IdxToRank[TargetIdx] == 1) Or (IdxToRank[TargetIdx] == 8))
        {
            Call AddSpecialMove((CurrentMove + 0.1))(Depth);
            Call AddSpecialMove((CurrentMove + 0.2))(Depth);
            Call AddSpecialMove((CurrentMove + 0.3))(Depth);
            Call AddSpecialMove((CurrentMove + 0.4))(Depth);
            Stop(this script);
        }
    }
    Else
    {
        If (IsClassicEndgameEval == 1)
        {
            If (Not (Quiescence))
            {
                If (BoardAttackedByOpponentSnapshot[(((Depth - 1) * 100) + TargetIdx)] == 0)
                {
                    List.ReplaceItem(PieceMobility, SourceIdx, (PieceMobility[SourceIdx] + 1));
                }
            }
        }
    }
    List.Add(CalcMovesMoveList, CurrentMove);
    Call GetNormalizedMove(CurrentMove);
    If Operator.Contains(PickedMoves[Depth], NormalzedMoveRes)
    {
        If ((Depth % 2) == 1)
        {
            List.Add(CalcMovesScoreList, MaxMoveOrderScore);
        }
        Else
        {
            List.Add(CalcMovesScoreList, (0 - MaxMoveOrderScore));
        }
        Stop(this script);
    }
    Call GetMoveScore(Board[SourceIdx])(Board[TargetIdx])(SourceIdx)(TargetIdx)(CurrentMove)(Depth);
    List.Add(CalcMovesScoreList, MoveScoreRes);
}

Define AddMoveImplLookup(string SourceIdx)(string TargetIdx)(string Depth)(bool CalcAttackState)(bool CapturesOnly)(bool IsKing) (warp=true)
{
    If IsKing
    {
        If ((Not (CalcAttackState)) And (Not (CapturesOnly)))
        {
            If ((Depth % 2) == 1)
            {
                If (ChebyshevDistance[((TargetIdx * 100) + WhiteKingIdx)] < 2)
                {
                    Stop(this script);
                }
            }
            Else
            {
                If (ChebyshevDistance[((TargetIdx * 100) + BlackKingIdx)] < 2)
                {
                    Stop(this script);
                }
            }
            If (BoardAttackedCalculated[Depth] == 0)
            {
                GenerateMovesRequiresAttackRecalc = 1;
                Stop(this script);
            }
            Else
            {
                If (BoardAttackedByOpponentSnapshot[(((Depth - 1) * 100) + TargetIdx)] > 0)
                {
                    Stop(this script);
                }
            }
        }
    }
    Call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)(CalcAttackState)(CapturesOnly);
}

Define AddMoveToList(string Move)(string Depth) (warp=true)
{
    Search.Count = (MovesCount[Depth] + 1);
    List.ReplaceItem(Moves, (((Depth - 1) * MaxMovesPerGeneration) + Search.Count), Move);
    List.ReplaceItem(MovesCount, Depth, Search.Count);
    If (Depth < 3)
    {
        If (Depth == 1)
        {
            List.Add(Moves1, Move);
        }
        Else
        {
            If (Depth == 2)
            {
                List.Add(Moves2, Move);
            }
        }
    }
}

Define AddPotentialQuiescenceMove(string SourceIdx)(string TargetIdx)(string Piece)(string Depth) (warp=true)
{
    Call //("Allow check evasions and - up to a limit - also checks during quiescence search");
    If (CheckedState[Depth] == 1)
    {
        If (BoardAttackedCalculated[Depth] == 0)
        {
            GenerateMovesRequiresAttackRecalc = 1;
            Stop(this script);
        }
        If (abs(Piece) == GoK_BlackKing)
        {
            If (BoardAttackedByOpponentSnapshot[(((Depth - 1) * 100) + TargetIdx)] > 0)
            {
                Stop(this script);
            }
            Call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)((1 == 0))((1 == 1));
        }
        Else
        {
            If (Operator.LetterOf(CheckedStateAttackLines[Depth], TargetIdx) == 1)
            {
                Call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)((1 == 0))((1 == 1));
            }
        }
        Stop(this script);
    }
    If (Piece == GoK_BlackPawn)
    {
        If (IdxToRank[TargetIdx] == 8)
        {
            Call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)((1 == 0))((1 == 1));
            Stop(this script);
        }
    }
    If (Piece == GoK_WhitePawn)
    {
        If (IdxToRank[TargetIdx] == 1)
        {
            Call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)((1 == 0))((1 == 1));
            Stop(this script);
        }
    }
    If (IsPotentialNonCapQuiescMove == 0)
    {
        Stop(this script);
    }
    Caller.TargetPiece = Board[TargetIdx];
    List.ReplaceItem(Board, TargetIdx, Board[SourceIdx]);
    List.ReplaceItem(Board, SourceIdx, 0);
    Call IsCheckingPieceDiscovery(SourceIdx)(TargetIdx)(Depth);
    List.ReplaceItem(Board, SourceIdx, Board[TargetIdx]);
    List.ReplaceItem(Board, TargetIdx, Caller.TargetPiece);
    If (IsCheckingPieceRes == 1)
    {
        Call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)((1 == 0))((1 == 1));
        Stop(this script);
    }
    If (abs(Piece) == GoK_BlackKing)
    {
        Stop(this script);
    }
    If (Piece > 0)
    {
        If (MoveToHash[((60000 + (PieceIdxLookup[Piece] * 10000)) + ((TargetIdx * 100) + WhiteKingIdx))] == 0)
        {
            Stop(this script);
        }
        If (Piece == GoK_BlackPawn)
        {
            If (IdxToFile[TargetIdx] == IdxToFile[WhiteKingIdx])
            {
                Stop(this script);
            }
            Call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)((1 == 0))((1 == 1));
            Stop(this script);
        }
        If (Piece == GoK_BlackKnight)
        {
            Call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)((1 == 0))((1 == 1));
            Stop(this script);
        }
        CurrentMove = ((TargetIdx * 100) + WhiteKingIdx);
    }
    Else
    {
        If (MoveToHash[((PieceIdxLookup[(0 - Piece)] * 10000) + ((TargetIdx * 100) + BlackKingIdx))] == 0)
        {
            Stop(this script);
        }
        If (Piece == GoK_WhitePawn)
        {
            If (IdxToFile[TargetIdx] == IdxToFile[BlackKingIdx])
            {
                Stop(this script);
            }
            Call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)((1 == 0))((1 == 1));
            Stop(this script);
        }
        If (Piece == GoK_WhiteKnight)
        {
            Call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)((1 == 0))((1 == 1));
            Stop(this script);
        }
        CurrentMove = ((TargetIdx * 100) + BlackKingIdx);
    }
    SourceIdx = TargetIdx;
    IdxInc = MoveToPathStepInc[CurrentMove];
    Repeat ((MoveToPathDelta[CurrentMove] - 1))
    {
        SourceIdx += IdxInc;
        If (Not ((Board[SourceIdx] == 0)))
        {
            Stop(this script);
        }
    }
    Call AddMoveImpl(SourceIdx)(TargetIdx)(Depth)((1 == 0))((1 == 1));
}

Define AddSlidingMove(string SourceIdx)(string Depth)(bool Quiescence)(bool SlidingStraight) (warp=true)
{
    AddMove.SourcePiece = Board[SourceIdx];
    AddMove.Count = 1;
    AddMove.Idx = MoveSourceIdxToListOffsetSliding[SourceIdx];
    AddMove.Idx2 = 8;
    Repeat Until (AddMove.Count > 32)
    {
        If SlidingStraight
        {
            AddMove.TargetIdx = MoveSlidingStraightListIdxToTargetIdx[(AddMove.Idx + AddMove.Count)];
        }
        Else
        {
            AddMove.TargetIdx = MoveCrossListIdxToTargetIdx[(AddMove.Idx + AddMove.Count)];
        }
        If (AddMove.TargetIdx == -1)
        {
            AddMove.Count += AddMove.Idx2;
            AddMove.Idx2 = 8;
        }
        Else
        {
            AddMove.TargetPiece = Board[(AddMove.TargetIdx + 0)];
            If (AddMove.TargetPiece == 0)
            {
                If Quiescence
                {
                    Call AddPotentialQuiescenceMove(SourceIdx)(AddMove.TargetIdx)(AddMove.SourcePiece)(Depth);
                }
                Else
                {
                    Call AddMoveImpl(SourceIdx)(AddMove.TargetIdx)(Depth)((1 == 0))(Quiescence);
                }
                AddMove.Count += 1;
                AddMove.Idx2 += -1;
            }
            Else
            {
                If (AddMove.SourcePiece > 0)
                {
                    If (AddMove.TargetPiece < 0)
                    {
                        Call AddMoveImpl(SourceIdx)(AddMove.TargetIdx)(Depth)((1 == 0))(Quiescence);
                    }
                }
                Else
                {
                    If (AddMove.TargetPiece > 0)
                    {
                        Call AddMoveImpl(SourceIdx)(AddMove.TargetIdx)(Depth)((1 == 0))(Quiescence);
                    }
                }
                AddMove.Count += AddMove.Idx2;
                AddMove.Idx2 = 8;
            }
        }
    }
}

Define AddSlidingMove(string SourceIdx)(string Depth)(bool AttackTableOnly)(bool Quiescence)(bool SlidingStraight) (warp=true)
{
    If AttackTableOnly
    {
        Call AddSlidingMoveForAttackTable(SourceIdx)(Depth)(SlidingStraight);
    }
    Else
    {
        Call AddSlidingMove(SourceIdx)(Depth)(Quiescence)(SlidingStraight);
    }
}

Define AddSlidingMoveForAttackTable(string SourceIdx)(string Depth)(bool SlidingStraight) (warp=true)
{
    AddMove.SourcePiece = Board[SourceIdx];
    AddMove.Count = 1;
    AddMove.Idx = MoveSourceIdxToListOffsetSliding[SourceIdx];
    AddMove.Idx2 = 8;
    List.DeleteAll(KingAttackLinesTemp);
    Repeat Until (AddMove.Count > 32)
    {
        If SlidingStraight
        {
            AddMove.TargetIdx = MoveSlidingStraightListIdxToTargetIdx[(AddMove.Idx + AddMove.Count)];
        }
        Else
        {
            AddMove.TargetIdx = MoveCrossListIdxToTargetIdx[(AddMove.Idx + AddMove.Count)];
        }
        If (AddMove.TargetIdx == -1)
        {
            AddMove.Count += AddMove.Idx2;
            AddMove.Idx2 = 8;
            List.DeleteAll(KingAttackLinesTemp);
        }
        Else
        {
            AddMove.TargetPiece = Board[(AddMove.TargetIdx + 0)];
            If (AddMove.TargetPiece == 0)
            {
                Call AddMoveImpl(SourceIdx)(AddMove.TargetIdx)(Depth)((1 == 1))((1 == 0));
                List.Add(KingAttackLinesTemp, AddMove.TargetIdx);
                AddMove.Count += 1;
                AddMove.Idx2 += -1;
            }
            Else
            {
                Call AddMoveImpl(SourceIdx)(AddMove.TargetIdx)(Depth)((1 == 1))((1 == 0));
                IsXRay = 0;
                If (AddMove.SourcePiece > 0)
                {
                    If (AddMove.TargetPiece == GoK_WhiteKing)
                    {
                        Idx = 1;
                        Repeat (List.Length(KingAttackLinesTemp))
                        {
                            List.Add(KingAttackLines, KingAttackLinesTemp[Idx]);
                            Idx += 1;
                        }
                    }
                    If (AddMove.TargetPiece > GoK_BlackKnight)
                    {
                        If SlidingStraight
                        {
                            If ((AddMove.TargetPiece == GoK_BlackQueen) Or (AddMove.TargetPiece == GoK_BlackRook))
                            {
                                IsXRay = 1;
                            }
                        }
                        Else
                        {
                            If ((AddMove.TargetPiece == GoK_BlackQueen) Or (AddMove.TargetPiece == GoK_BlackBishop))
                            {
                                IsXRay = 1;
                            }
                        }
                    }
                }
                Else
                {
                    If (AddMove.TargetPiece == GoK_BlackKing)
                    {
                        Idx = 1;
                        Repeat (List.Length(KingAttackLinesTemp))
                        {
                            List.Add(KingAttackLines, KingAttackLinesTemp[Idx]);
                            Idx += 1;
                        }
                    }
                    If (AddMove.TargetPiece < GoK_WhiteKnight)
                    {
                        If SlidingStraight
                        {
                            If ((AddMove.TargetPiece == GoK_WhiteQueen) Or (AddMove.TargetPiece == GoK_WhiteRook))
                            {
                                IsXRay = 1;
                            }
                        }
                        Else
                        {
                            If ((AddMove.TargetPiece == GoK_WhiteQueen) Or (AddMove.TargetPiece == GoK_WhiteBishop))
                            {
                                IsXRay = 1;
                            }
                        }
                    }
                }
                If (IsXRay == 1)
                {
                    AddMove.Count += 1;
                    AddMove.Idx2 += -1;
                }
                Else
                {
                    AddMove.Count += AddMove.Idx2;
                    AddMove.Idx2 = 8;
                }
                List.DeleteAll(KingAttackLinesTemp);
            }
        }
    }
}

Define AddSpecialMove(string Move)(string Depth) (warp=true)
{
    List.Add(CalcMovesMoveList, Move);
    If (Variable.Length(PickedMoves[Depth]) > 0)
    {
        Call GetNormalizedMove(Move);
        If Operator.Contains(PickedMoves[Depth], NormalzedMoveRes)
        {
            If ((Depth % 2) == 1)
            {
                List.Add(CalcMovesScoreList, MaxMoveOrderScore);
            }
            Else
            {
                List.Add(CalcMovesScoreList, (0 - MaxMoveOrderScore));
            }
            Stop(this script);
        }
    }
    SourcePiece = "";
    If (Variable.Length(Move) == 6)
    {
        SourcePiece = GoK_BlackPawn;
    }
    If (floor((Move / 100)) == 0)
    {
        SourcePiece = GoK_BlackKing;
    }
    If ((Depth % 2) == 1)
    {
        Call GetMoveScore(SourcePiece)(0)("")("")(Move)(Depth);
    }
    Else
    {
        Call GetMoveScore((0 - SourcePiece))(0)("")("")(Move)(Depth);
    }
    List.Add(CalcMovesScoreList, MoveScoreRes);
}

Define ApplyMove(num Depth) (warp=true)
{
    Call NNUE_Public_OnMakeMoveStart(Depth);
    List.ReplaceItem(PosEvalDelta, Depth, 0);
    List.ReplaceItem(SourcePieces, Depth, 0);
    List.ReplaceItem(TargetPiecesIdx, Depth, "");
    List.ReplaceItem(TargetPieces, Depth, 0);
    List.ReplaceItem(PromotionPieces, Depth, 0);
    If (Depth > 1)
    {
        List.ReplaceItem(CastlingState, Depth, CastlingState[(Depth - 1)]);
    }
    List.ReplaceItem(EnPassantTarget, (Depth + 1), "");
    List.ReplaceItem(PreviousBoardHash, Depth, CurrentBoardHash);
    List.ReplaceItem(PreviousBoardHashKP, Depth, CurrentBoardHashKP);
    Call GetCurrentMove(Depth);
    List.ReplaceItem(AppliedMove, Depth, CurrentMove);
    SourceIdx = floor((CurrentMove / 100));
    If (SourceIdx > 0)
    {
        TargetIdx = floor((CurrentMove % 100));
        SourcePiece = Board[SourceIdx];
        TargetPiece = Board[TargetIdx];
        Call //("Update search stack variables");
        List.ReplaceItem(SourcePieces, Depth, SourcePiece);
        List.ReplaceItem(TargetPiecesIdx, Depth, TargetIdx);
        List.ReplaceItem(TargetPieces, Depth, TargetPiece);
        List.ReplaceItem(PromotionPieces, Depth, 0);
        List.ReplaceItem(Board, TargetIdx, SourcePiece);
        List.ReplaceItem(Board, SourceIdx, 0);
        Call //("Incremental positional eval via move-to-eval lookup table");
        Idx2 = ((((DepthEvalFactor[Depth] + 1) * 30000) + (PieceIdxLookup[abs(SourcePiece)] * 10000)) + ((SourceIdx * 100) + TargetIdx));
        List.ReplaceItem(PosEvalDelta, Depth, MoveToEvalDelta[Idx2]);
        Call //("Incremental Zobrist hash update via move-to-hash lookup table");
        CurrentBoardHash += MoveToHash[Idx2];
        If (abs(SourcePiece) == GoK_BlackPawn)
        {
            CurrentBoardHashKP += MoveToHash[Idx2];
            If (Not ((IdxToFile[SourceIdx] == IdxToFile[TargetIdx])))
            {
                If (TargetPieces[Depth] == 0)
                {
                    Call //("en-passant => stack vars and Zobrist hash update");
                    Idx = (TargetIdx + (8 * (0 - DepthEvalFactor[Depth])));
                    List.ReplaceItem(TargetPiecesIdx, Depth, Idx);
                    List.ReplaceItem(TargetPieces, Depth, Board[Idx]);
                    TargetPiece = Board[Idx];
                    List.ReplaceItem(Board, Idx, 0);
                    Call GetPiecePosHash(Board[Idx])(Idx);
                    CurrentBoardHash = (CurrentBoardHash - PiecePosHash);
                    CurrentBoardHashKP = (CurrentBoardHashKP - PiecePosHash);
                }
            }
            If ((TargetIdx - SourceIdx) == (16 * DepthEvalFactor[Depth]))
            {
                List.ReplaceItem(EnPassantTarget, (Depth + 1), TargetIdx);
            }
            If (TargetIdx < 9)
            {
                PromotionVal = Operator.LetterOf(CurrentMove, Variable.Length(CurrentMove));
                If (PromotionVal == 1)
                {
                    List.ReplaceItem(PromotionPieces, Depth, GoK_WhiteQueen);
                    WhiteQueenCountLocal += 1;
                }
                If (PromotionVal == 2)
                {
                    List.ReplaceItem(PromotionPieces, Depth, GoK_WhiteRook);
                    WhiteRookCountLocal += 1;
                    WhiteMinorCountLocal += 1;
                }
                If (PromotionVal == 3)
                {
                    List.ReplaceItem(PromotionPieces, Depth, GoK_WhiteBishop);
                    WhiteBishopCountLocal += 1;
                    WhiteMinorCountLocal += 1;
                }
                If (PromotionVal == 4)
                {
                    List.ReplaceItem(PromotionPieces, Depth, GoK_WhiteKnight);
                    WhiteMinorCountLocal += 1;
                }
                WhitePawnCountLocal += -1;
            }
            If (TargetIdx > 56)
            {
                PromotionVal = Operator.LetterOf(CurrentMove, Variable.Length(CurrentMove));
                If (PromotionVal == 1)
                {
                    List.ReplaceItem(PromotionPieces, Depth, GoK_BlackQueen);
                    BlackQueenCountLocal += 1;
                }
                If (PromotionVal == 2)
                {
                    List.ReplaceItem(PromotionPieces, Depth, GoK_BlackRook);
                    BlackRookCountLocal += 1;
                    BlackMinorCountLocal += 1;
                }
                If (PromotionVal == 3)
                {
                    List.ReplaceItem(PromotionPieces, Depth, GoK_BlackBishop);
                    BlackBishopCountLocal += 1;
                    BlackMinorCountLocal += 1;
                }
                If (PromotionVal == 4)
                {
                    List.ReplaceItem(PromotionPieces, Depth, GoK_BlackKnight);
                    BlackMinorCountLocal += 1;
                }
                BlackPawnCountLocal += -1;
            }
            If ((TargetIdx < 9) Or (TargetIdx > 56))
            {
                Call //("promotions => Zobrist hash update");
                List.ReplaceItem(Board, TargetIdx, PromotionPieces[Depth]);
                Call GetPiecePosHash(SourcePiece)(SourceIdx);
                CurrentBoardHash = (CurrentBoardHash - PiecePosHash);
                CurrentBoardHashKP = (CurrentBoardHashKP - PiecePosHash);
                Call GetPiecePosHash(PromotionPieces[Depth])(TargetIdx);
                CurrentBoardHash = (CurrentBoardHash + PiecePosHash);
            }
        }
        Call //("King or rook move => update castling meta state");
        If (SourcePiece == GoK_BlackKing)
        {
            BlackKingIdx = TargetIdx;
            CurrentBoardHashKP += MoveToHash[Idx2];
            Call SetCastlingStateFlag(Depth)(2)(1);
        }
        If (SourcePiece == GoK_BlackRook)
        {
            If (Operator.LetterOf(CastlingState[Depth], 3) == 0)
            {
                If (SourceIdx == VirtualBoard[8])
                {
                    Call SetCastlingStateFlag(Depth)(3)(1);
                }
            }
            If (Operator.LetterOf(CastlingState[Depth], 4) == 0)
            {
                If (SourceIdx == VirtualBoard[1])
                {
                    Call SetCastlingStateFlag(Depth)(4)(1);
                }
            }
        }
        If (SourcePiece == GoK_WhiteKing)
        {
            WhiteKingIdx = TargetIdx;
            CurrentBoardHashKP += MoveToHash[Idx2];
            Call SetCastlingStateFlag(Depth)(6)(1);
        }
        If (SourcePiece == GoK_WhiteRook)
        {
            If (Operator.LetterOf(CastlingState[Depth], 7) == 0)
            {
                If (SourceIdx == VirtualBoard[64])
                {
                    Call SetCastlingStateFlag(Depth)(7)(1);
                }
            }
            If (Operator.LetterOf(CastlingState[Depth], 8) == 0)
            {
                If (SourceIdx == VirtualBoard[57])
                {
                    Call SetCastlingStateFlag(Depth)(8)(1);
                }
            }
        }
        If (Not ((TargetPiece == 0)))
        {
            Call //("Captures => incremental positional eval and Zobrist hash update");
            Idx2 = ((((DepthEvalFactor[(Depth + 1)] + 1) * 30000) + (PieceIdxLookup[abs(TargetPiece)] * 10000)) + (TargetIdx * 100));
            List.ReplaceItem(PosEvalDelta, Depth, (PosEvalDelta[Depth] + MoveToEvalDelta[Idx2]));
            CurrentBoardHash += MoveToHash[Idx2];
            If ((abs(TargetPiece) == GoK_BlackPawn) Or (abs(TargetPiece) == GoK_BlackKing))
            {
                CurrentBoardHashKP += MoveToHash[Idx2];
            }
            If (TargetPiece > 0)
            {
                If (TargetPiece == GoK_BlackPawn)
                {
                    BlackPawnCountLocal += -1;
                }
                Else
                {
                    If (TargetPiece < GoK_BlackQueen)
                    {
                        BlackMinorCountLocal += -1;
                        If (TargetPiece == GoK_BlackRook)
                        {
                            BlackRookCountLocal += -1;
                        }
                        If (TargetPiece == GoK_BlackBishop)
                        {
                            BlackBishopCountLocal += -1;
                        }
                    }
                    Else
                    {
                        If (TargetPiece == GoK_BlackQueen)
                        {
                            BlackQueenCountLocal += -1;
                        }
                    }
                }
            }
            Else
            {
                If (TargetPiece == GoK_WhitePawn)
                {
                    WhitePawnCountLocal += -1;
                }
                Else
                {
                    If (TargetPiece > GoK_WhiteQueen)
                    {
                        WhiteMinorCountLocal += -1;
                        If (TargetPiece == GoK_WhiteRook)
                        {
                            WhiteRookCountLocal += -1;
                        }
                        If (TargetPiece == GoK_WhiteBishop)
                        {
                            WhiteBishopCountLocal += -1;
                        }
                    }
                    Else
                    {
                        If (TargetPiece == GoK_WhiteQueen)
                        {
                            WhiteQueenCountLocal += -1;
                        }
                    }
                }
            }
        }
    }
    Else
    {
        Call //("Castling => incremental positional eval and Zobrist hash update");
        If (CurrentMove == GoK_WhiteKingsideCastling)
        {
            List.ReplaceItem(SourcePieces, Depth, GoK_WhiteKing);
            List.ReplaceItem(Board, VirtualBoard[61], 0);
            List.ReplaceItem(Board, VirtualBoard[62], GoK_WhiteRook);
            List.ReplaceItem(Board, VirtualBoard[63], GoK_WhiteKing);
            List.ReplaceItem(Board, VirtualBoard[64], 0);
            WhiteKingIdx = VirtualBoard[63];
            Call SetCastlingStateFlag(Depth)(5)(1);
            Call UpdateMoveHashPosEval(GoK_WhiteKing)(VirtualBoard[61])(VirtualBoard[63])((1 == 0))(Depth);
            Call UpdateMoveHashPosEval(GoK_WhiteRook)(VirtualBoard[64])(VirtualBoard[62])((1 == 1))(Depth);
            Call SetCastlingStateFlag(Depth)(5)(1);
        }
        Else
        {
            If (CurrentMove == GoK_WhiteQueensideCastling)
            {
                List.ReplaceItem(SourcePieces, Depth, GoK_WhiteKing);
                List.ReplaceItem(Board, VirtualBoard[57], 0);
                List.ReplaceItem(Board, VirtualBoard[59], GoK_WhiteKing);
                List.ReplaceItem(Board, VirtualBoard[60], GoK_WhiteRook);
                List.ReplaceItem(Board, VirtualBoard[61], 0);
                WhiteKingIdx = VirtualBoard[59];
                Call UpdateMoveHashPosEval(GoK_WhiteKing)(VirtualBoard[61])(VirtualBoard[59])((1 == 0))(Depth);
                Call UpdateMoveHashPosEval(GoK_WhiteRook)(VirtualBoard[57])(VirtualBoard[59])((1 == 1))(Depth);
                Call SetCastlingStateFlag(Depth)(5)(1);
            }
            Else
            {
                If (CurrentMove == GoK_BlackKingsideCastling)
                {
                    List.ReplaceItem(SourcePieces, Depth, GoK_BlackKing);
                    List.ReplaceItem(Board, VirtualBoard[5], 0);
                    List.ReplaceItem(Board, VirtualBoard[6], GoK_BlackRook);
                    List.ReplaceItem(Board, VirtualBoard[7], GoK_BlackKing);
                    List.ReplaceItem(Board, VirtualBoard[8], 0);
                    BlackKingIdx = VirtualBoard[3];
                    Call UpdateMoveHashPosEval(GoK_BlackKing)(VirtualBoard[5])(VirtualBoard[7])((1 == 0))(Depth);
                    Call UpdateMoveHashPosEval(GoK_BlackRook)(VirtualBoard[8])(VirtualBoard[6])((1 == 1))(Depth);
                    Call SetCastlingStateFlag(Depth)(1)(1);
                }
                Else
                {
                    If (CurrentMove == GoK_BlackQueensideCastling)
                    {
                        List.ReplaceItem(SourcePieces, Depth, GoK_BlackKing);
                        List.ReplaceItem(Board, VirtualBoard[1], 0);
                        List.ReplaceItem(Board, VirtualBoard[3], GoK_BlackKing);
                        List.ReplaceItem(Board, VirtualBoard[4], GoK_BlackRook);
                        List.ReplaceItem(Board, VirtualBoard[5], 0);
                        BlackKingIdx = VirtualBoard[5];
                        Call UpdateMoveHashPosEval(GoK_BlackKing)(VirtualBoard[5])(VirtualBoard[3])((1 == 0))(Depth);
                        Call UpdateMoveHashPosEval(GoK_BlackRook)(VirtualBoard[1])(VirtualBoard[4])((1 == 1))(Depth);
                        Call SetCastlingStateFlag(Depth)(1)(1);
                    }
                }
            }
        }
    }
    If ((floor((AppliedMove[Depth] / 100)) == 0) Or ((Not ((PromotionPieces[Depth] == 0))) Or (Not ((TargetPiecesIdx[Depth] == floor((AppliedMove[Depth] % 100)))))))
    {
        Call NNUE_Public_OnMakeMoveStop(Depth)("")("")("");
    }
    Else
    {
        Call NNUE_Public_OnMakeMoveStop(Depth)(AppliedMove[Depth])(SourcePieces[Depth])(TargetPieces[Depth]);
    }
    If (Not ((AppliedMove[Depth] == 0)))
    {
        If (Quiescence[Depth] == 0)
        {
            NodeCount += 1;
        }
        Else
        {
            NodeCountQ += 1;
        }
    }
}

Define ApplyMoveFull(string Depth) (warp=true)
{
    Call ApplyMove(Depth);
    Call GetNormalizedMove(AppliedMove[Depth]);
    List.ReplaceItem(PickedMoves, Depth, Operator.Join(PickedMoves[Depth], Operator.Join(NormalzedMoveRes, ":")));
    List.ReplaceItem(PickedMoveCount, Depth, (PickedMoveCount[Depth] + 1));
}

Define ApplyMoveLight(string Depth) (warp=true)
{
    List.ReplaceItem(PreviousBoardHash, Depth, CurrentBoardHash);
    Call GetCurrentMove(Depth);
    List.ReplaceItem(AppliedMove, Depth, CurrentMove);
    SourceIdx = floor((CurrentMove / 100));
    If (SourceIdx > 0)
    {
        TargetIdx = floor((CurrentMove % 100));
        SourcePiece = Board[SourceIdx];
        TargetPiece = Board[TargetIdx];
        List.ReplaceItem(SourcePieces, Depth, SourcePiece);
        List.ReplaceItem(TargetPiecesIdx, Depth, TargetIdx);
        List.ReplaceItem(TargetPieces, Depth, TargetPiece);
        List.ReplaceItem(PromotionPieces, Depth, 0);
        List.ReplaceItem(Board, TargetIdx, SourcePiece);
        List.ReplaceItem(Board, SourceIdx, 0);
        Idx = ((PieceIdxLookup[abs(SourcePiece)] * 10000) + ((SourceIdx * 100) + TargetIdx));
        If (SourcePiece > 0)
        {
            Idx += 60000;
        }
        CurrentBoardHash += MoveToHash[Idx];
        If (Not ((TargetPiece == 0)))
        {
            Idx = ((PieceIdxLookup[abs(TargetPiece)] * 10000) + (TargetIdx * 100));
            If (TargetPiece > 0)
            {
                Idx += 60000;
            }
            CurrentBoardHash += MoveToHash[Idx];
        }
    }
    Else
    {
        List.ReplaceItem(PosEvalDelta, Depth, 0);
        List.ReplaceItem(SourcePieces, Depth, 0);
        List.ReplaceItem(TargetPiecesIdx, Depth, "");
        List.ReplaceItem(TargetPieces, Depth, 0);
        List.ReplaceItem(PromotionPieces, Depth, 0);
        If (CurrentMove == GoK_WhiteKingsideCastling)
        {
            List.ReplaceItem(SourcePieces, Depth, GoK_WhiteKing);
            List.ReplaceItem(Board, VirtualBoard[61], 0);
            List.ReplaceItem(Board, VirtualBoard[62], GoK_WhiteRook);
            List.ReplaceItem(Board, VirtualBoard[63], GoK_WhiteKing);
            List.ReplaceItem(Board, VirtualBoard[64], 0);
            WhiteKingIdx = VirtualBoard[63];
            Call UpdateMoveHashPosEval(GoK_WhiteKing)(VirtualBoard[61])(VirtualBoard[63])((1 == 0))(Depth);
            Call UpdateMoveHashPosEval(GoK_WhiteRook)(VirtualBoard[64])(VirtualBoard[62])((1 == 1))(Depth);
        }
        Else
        {
            If (CurrentMove == GoK_WhiteQueensideCastling)
            {
                List.ReplaceItem(SourcePieces, Depth, GoK_WhiteKing);
                List.ReplaceItem(Board, VirtualBoard[57], 0);
                List.ReplaceItem(Board, VirtualBoard[59], GoK_WhiteKing);
                List.ReplaceItem(Board, VirtualBoard[60], GoK_WhiteRook);
                List.ReplaceItem(Board, VirtualBoard[61], 0);
                WhiteKingIdx = VirtualBoard[59];
                Call UpdateMoveHashPosEval(GoK_WhiteKing)(VirtualBoard[61])(VirtualBoard[59])((1 == 0))(Depth);
                Call UpdateMoveHashPosEval(GoK_WhiteRook)(VirtualBoard[57])(VirtualBoard[59])((1 == 1))(Depth);
            }
            Else
            {
                If (CurrentMove == GoK_BlackKingsideCastling)
                {
                    List.ReplaceItem(SourcePieces, Depth, GoK_BlackKing);
                    List.ReplaceItem(Board, VirtualBoard[5], 0);
                    List.ReplaceItem(Board, VirtualBoard[6], GoK_BlackRook);
                    List.ReplaceItem(Board, VirtualBoard[7], GoK_BlackKing);
                    List.ReplaceItem(Board, VirtualBoard[8], 0);
                    BlackKingIdx = VirtualBoard[3];
                    Call UpdateMoveHashPosEval(GoK_BlackKing)(VirtualBoard[5])(VirtualBoard[7])((1 == 0))(Depth);
                    Call UpdateMoveHashPosEval(GoK_BlackRook)(VirtualBoard[8])(VirtualBoard[6])((1 == 1))(Depth);
                }
                Else
                {
                    If (CurrentMove == GoK_BlackQueensideCastling)
                    {
                        List.ReplaceItem(SourcePieces, Depth, GoK_BlackKing);
                        List.ReplaceItem(Board, VirtualBoard[1], 0);
                        List.ReplaceItem(Board, VirtualBoard[3], GoK_BlackKing);
                        List.ReplaceItem(Board, VirtualBoard[4], GoK_BlackRook);
                        List.ReplaceItem(Board, VirtualBoard[5], 0);
                        BlackKingIdx = VirtualBoard[5];
                        Call UpdateMoveHashPosEval(GoK_BlackKing)(VirtualBoard[5])(VirtualBoard[3])((1 == 0))(Depth);
                        Call UpdateMoveHashPosEval(GoK_BlackRook)(VirtualBoard[1])(VirtualBoard[4])((1 == 1))(Depth);
                    }
                }
            }
        }
    }
}

Define CalcBoardAttackedByMove(string Depth) (warp=true)
{
    Call ClearBoardAttackedByMove(Depth);
    Call GenerateMovesImplWrapper(Depth)((1 == 1))((1 == 0));
}

Define CalcBoardAttackedByMoveChecked(string Depth) (warp=true)
{
    Call TTProbeNode(CurrentBoardHash)((Depth + 1));
    If ((TTProbeRes == 1) And (Not ((TTProbeNode.CheckedRes == ""))))
    {
        If ((Depth % 2) == 1)
        {
            IsWhiteChecked = TTProbeNode.CheckedRes;
        }
        Else
        {
            IsBlackChecked = TTProbeNode.CheckedRes;
        }
        Stop(this script);
    }
    If ((Depth % 2) == 1)
    {
        IsWhiteChecked = 0;
        Caller.Idx = 1;
        Repeat (64)
        {
            If (Board[Caller.Idx] > 0)
            {
                Call IsCheckingPiece(Caller.Idx);
                If (IsCheckingPieceRes == 1)
                {
                    IsWhiteChecked = 1;
                }
            }
            Caller.Idx += 1;
        }
        Call TTStoreNode(CurrentBoardHash)((Depth + 1))("")("")("")(IsWhiteChecked)("")("")("")("")("")("")("")("");
    }
    Else
    {
        IsBlackChecked = 0;
        Caller.Idx = 1;
        Repeat (64)
        {
            If (Board[Caller.Idx] < 0)
            {
                Call IsCheckingPiece(Caller.Idx);
                If (IsCheckingPieceRes == 1)
                {
                    IsBlackChecked = 1;
                }
            }
            Caller.Idx += 1;
        }
        Call TTStoreNode(CurrentBoardHash)((Depth + 1))("")("")("")(IsBlackChecked)("")("")("")("")("")("")("")("");
    }
}

Define CalcBoardAttackedOnDemand(string Depth)(bool Quiescence)(bool ForceOnCheck)(string MaxDepth) (warp=true)
{
    If (BoardAttackedCalculated[Depth] == 0)
    {
        If ((ForceOnCheck And (CheckedState[Depth] == 1)) Or ((Not (Quiescence)) And (Not ((Depth > MaxDepth)))))
        {
            Call CalcBoardAttackedByMove((Depth + 1));
            Call StoreAttackInfo(Depth);
            List.ReplaceItem(BoardAttackedCalculated, Depth, 1);
        }
    }
}

Define CalcBoardStats (warp=true)
{
    BlackKingIdx = "";
    WhiteKingIdx = "";
    CurrentBoardHash = 0;
    CurrentBoardHashKP = 0;
    Idx = 1;
    Repeat (8)
    {
        List.ReplaceItem(BlackPawnCount, Idx, 0);
        List.ReplaceItem(WhitePawnCount, Idx, 0);
        Idx += 1;
    }
    Idx = 1;
    Repeat (64)
    {
        If (Board[Idx] == GoK_WhitePawn)
        {
            List.ReplaceItem(WhitePawnCount, IdxToFile[Idx], (WhitePawnCount[IdxToFile[Idx]] + 1));
        }
        Else
        {
            If (Board[Idx] == GoK_BlackPawn)
            {
                List.ReplaceItem(BlackPawnCount, IdxToFile[Idx], (BlackPawnCount[IdxToFile[Idx]] + 1));
            }
            Else
            {
                If (Board[Idx] == GoK_WhiteKing)
                {
                    WhiteKingIdx = Idx;
                }
                Else
                {
                    If (Board[Idx] == GoK_BlackKing)
                    {
                        BlackKingIdx = Idx;
                    }
                }
            }
        }
        Call GetPiecePosHash(Board[Idx])(Idx);
        CurrentBoardHash = (CurrentBoardHash + PiecePosHash);
        If ((abs(Board[Idx]) == GoK_BlackPawn) Or (abs(Board[Idx]) == GoK_BlackKing))
        {
            CurrentBoardHashKP = (CurrentBoardHashKP + PiecePosHash);
        }
        Idx += 1;
    }
    BlackMinorCount = 0;
    BlackQueenCount = 0;
    BlackPawnCount = 0;
    BlackRookCount = 0;
    BlackBishopCount = 0;
    WhiteQueenCount = 0;
    WhiteMinorCount = 0;
    WhitePawnCount = 0;
    WhiteRookCount = 0;
    WhiteBishopCount = 0;
    Idx = 1;
    Repeat (64)
    {
        If (Board[Idx] == GoK_WhiteQueen)
        {
            WhiteQueenCount += 1;
        }
        If (Board[Idx] == GoK_BlackQueen)
        {
            BlackQueenCount += 1;
        }
        If ((Board[Idx] == GoK_WhiteKnight) Or ((Board[Idx] == GoK_WhiteBishop) Or (Board[Idx] == GoK_WhiteRook)))
        {
            WhiteMinorCount += 1;
            If (Board[Idx] == GoK_WhiteRook)
            {
                WhiteRookCount += 1;
            }
            If (Board[Idx] == GoK_WhiteBishop)
            {
                WhiteBishopCount += 1;
            }
        }
        If ((Board[Idx] == GoK_BlackKnight) Or ((Board[Idx] == GoK_BlackBishop) Or (Board[Idx] == GoK_BlackRook)))
        {
            BlackMinorCount += 1;
            If (Board[Idx] == GoK_BlackRook)
            {
                BlackRookCount += 1;
            }
            If (Board[Idx] == GoK_BlackBishop)
            {
                BlackBishopCount += 1;
            }
        }
        If (Board[Idx] == GoK_WhitePawn)
        {
            WhitePawnCount += 1;
        }
        If (Board[Idx] == GoK_BlackPawn)
        {
            BlackPawnCount += 1;
        }
        Idx += 1;
    }
    IsClassicEndgameEval = 0;
    If (IsScratch3 == 1)
    {
        If (((BlackQueenCount + BlackMinorCount) == 0) Or ((WhiteQueenCount + WhiteMinorCount) == 0))
        {
            IsClassicEndgameEval = 1;
        }
    }
    Else
    {
        If (((((BlackQueenCount + BlackMinorCount) + BlackPawnCount) == 0) And ((WhiteQueenCount == 0) And (WhiteMinorCount < 3))) Or ((((WhiteQueenCount + WhiteMinorCount) + WhitePawnCount) == 0) And ((BlackQueenCount == 0) And (BlackMinorCount < 3))))
        {
            IsClassicEndgameEval = 1;
        }
    }
    If ((((WhiteQueenCount + WhiteMinorCount) + (BlackQueenCount + BlackMinorCount)) < 3) And ((WhiteQueenCount == 0) Or (BlackQueenCount == 0)))
    {
        IsEndgame2 = 1;
        IsEndgame = 1;
    }
    Else
    {
        If ((((WhiteQueenCount * 9) + (WhiteMinorCount * 4)) < 10) Or (((BlackQueenCount * 9) + (BlackMinorCount * 4)) < 10))
        {
            IsEndgame2 = 0;
            IsEndgame = 1;
        }
        Else
        {
            IsEndgame2 = 0;
            IsEndgame = 0;
        }
    }
    If ((HasBlackCastled == 0) And ((HasBlackKingMoved == 0) And ((HasBlackRookKSMoved == 0) Or (HasBlackRookQSMoved == 0))))
    {
        IsBlackCastlingPossible = 1;
    }
    Else
    {
        IsBlackCastlingPossible = 0;
    }
    If ((HasWhiteCastled == 0) And ((HasWhiteKingMoved == 0) And ((HasWhiteRookKSMoved == 0) Or (HasWhiteRookQSMoved == 0))))
    {
        IsWhiteCastlingPossible = 1;
    }
    Else
    {
        IsWhiteCastlingPossible = 0;
    }
    WhiteQueenCountLocal = WhiteQueenCount;
    WhiteMinorCountLocal = WhiteMinorCount;
    BlackQueenCountLocal = BlackQueenCount;
    BlackMinorCountLocal = BlackMinorCount;
    WhiteRookCountLocal = WhiteRookCount;
    BlackRookCountLocal = BlackRookCount;
    WhitePawnCountLocal = WhitePawnCount;
    BlackPawnCountLocal = BlackPawnCount;
    WhiteBishopCountLocal = WhiteBishopCount;
    BlackBishopCountLocal = BlackBishopCount;
    List.ReplaceItem(CastlingState, 1, Operator.Join(Operator.Join(Operator.Join(HasBlackCastled, HasBlackKingMoved), Operator.Join(HasBlackRookKSMoved, HasBlackRookQSMoved)), Operator.Join(Operator.Join(HasWhiteCastled, HasWhiteKingMoved), Operator.Join(HasWhiteRookKSMoved, HasWhiteRookQSMoved))));
    List.ReplaceItem(CastlingState, 2, CastlingState[1]);
}

Define ClearBoardAttackedByMove(num Depth) (warp=true)
{
    If ((Depth % 2) == 1)
    {
        List.DeleteAll(BoardAttackedByBlack);
        List.DeleteAll(BoardAttackedByBlackPiece);
        Repeat (64)
        {
            List.Add(BoardAttackedByBlack, 0);
            List.Add(BoardAttackedByBlackPiece, 0);
        }
        IsWhiteChecked = 0;
    }
    Else
    {
        List.DeleteAll(BoardAttackedByWhite);
        List.DeleteAll(BoardAttackedByWhitePiece);
        Repeat (64)
        {
            List.Add(BoardAttackedByWhite, 0);
            List.Add(BoardAttackedByWhitePiece, 0);
        }
        IsBlackChecked = 0;
    }
    List.DeleteAll(KingAttackLines);
}

Define ClearMoveList(num Depth) (warp=true)
{
    List.ReplaceItem(MovesCount, Depth, 0);
    If (Depth == 1)
    {
        List.DeleteAll(Moves1);
    }
    Else
    {
        If (Depth == 2)
        {
            List.DeleteAll(Moves2);
        }
    }
}

Define ClearTT (warp=true)
{
    If (IsScratch3 == 1)
    {
        Call ClearTTImpl(50000);
    }
    Else
    {
        Call ClearTTImpl(500000);
    }
}

Define ClearTTImpl(string Size) (warp=true)
{
    List.DeleteItem(TTNodeHash, all);
    List.DeleteItem(TTNodeBoardHash, all);
    List.DeleteItem(TTNodeBestMove, all);
    List.DeleteItem(TTNodeEval, all);
    List.DeleteItem(TTNodeDepth, all);
    List.DeleteItem(TTNodeAge, all);
    List.DeleteItem(TTNodeType, all);
    List.DeleteItem(TTNodeChecked, all);
    List.DeleteItem(TTNodeHorizon, all);
    List.DeleteItem(TTBoardAge, all);
    List.DeleteItem(TTBoardHash, all);
    List.DeleteItem(TTBoardEvalSum, all);
    List.DeleteItem(TTNodeBoardAttackedByOpp, all);
    List.DeleteItem(TTNodeBoardAttackedByOppPiece, all);
    List.DeleteItem(TTNodeCheckedAttackLines, all);
    List.DeleteItem(TTNodeEvalIsDynamic, all);
    List.DeleteItem(TTBoardEvalIsDynamic, all);
    Repeat (Size)
    {
        List.Add(TTNodeHash, 0);
        List.Add(TTNodeBoardHash, 0);
        List.Add(TTNodeAge, 0);
        List.Add(TTNodeBestMove, "");
        List.Add(TTNodeEval, "");
        List.Add(TTNodeDepth, "");
        List.Add(TTNodeType, "");
        List.Add(TTNodeChecked, "");
        List.Add(TTNodeHorizon, "");
        List.Add(TTNodeCheckedAttackLines, "");
        List.Add(TTNodeBoardAttackedByOpp, "");
        List.Add(TTNodeBoardAttackedByOppPiece, "");
    }
    Repeat ((Size * 1))
    {
        List.Add(TTBoardHash, 0);
        List.Add(TTBoardAge, 0);
        List.Add(TTBoardEvalIsDynamic, "");
        List.Add(TTBoardEvalSum, "");
    }
}

Define CreateCurrentBoardHash (warp=true)
{
    CurrentBoardHash = 0;
    CurrentBoardHashKP = 0;
    Idx = 1;
    Repeat (64)
    {
        Call GetPiecePosHash(Board[Idx])(Idx);
        CurrentBoardHash = (CurrentBoardHash + PiecePosHash);
        If ((abs(Board[Idx]) == GoK_BlackPawn) Or (abs(Board[Idx]) == GoK_BlackKing))
        {
            CurrentBoardHashKP = (CurrentBoardHashKP + PiecePosHash);
        }
        Idx += 1;
    }
}

Define DrawBoardAndWait (warp=false)
{
    List.DeleteAll(GoK_Board);
    List.DeleteAll(GoK_VirtualBoard);
    Idx = 1;
    Repeat (64)
    {
        List.Add(GoK_Board, Board[Idx]);
        List.Add(GoK_VirtualBoard, VirtualBoard[Idx]);
        Idx += 1;
    }
    GoK_ProgressValue = 0;
    Event.BroadcastAndWait("Pieces_DrawBoard");
    Event.BroadcastAndWait("GoK_ProgressValueChanged");
    Event.BroadcastAndWait("GoK_EvaluationValueChanged");
}

Define EnterExecution (warp=false)
{
    ExecutionDepth += 1;
    If (ExecutionDepth == 1)
    {
        IsExecutionRunning = 1;
        Event.BroadcastAndWait("GoK_ModeBusy");
    }
}

Define Evaluate(string Depth)(bool ForceFullEval) (warp=true)
{
    If (IsBlockProfilerEnabled == 1)
    {
        Call ProfilerMethodEnter(Depth);
    }
    EvaluationRes = "";
    EvaluationIsDynamicRes = "";
    If (IsClassicEndgameEval == 1)
    {
        If (Depth == 0)
        {
            Call EvaluateBoardBasic;
            EvalBase = EvalBoardBasicRes;
            Call CalcBoardAttackedByMove(2);
            Call StoreAttackInfo(1);
            If (IsBlockProfilerEnabled == 1)
            {
                Call ProfilerMethodExit(Depth);
            }
            Stop(this script);
        }
        Call //("Incremental Evaluation");
        If (Depth == 1)
        {
            List.ReplaceItem(PosEvalDeltaSum, Depth, PosEvalDelta[Depth]);
            List.ReplaceItem(CapturesDeltaSum, Depth, TargetPieces[Depth]);
        }
        Else
        {
            List.ReplaceItem(PosEvalDeltaSum, Depth, (PosEvalDeltaSum[(Depth - 1)] + PosEvalDelta[Depth]));
            List.ReplaceItem(CapturesDeltaSum, Depth, (CapturesDeltaSum[(Depth - 1)] + TargetPieces[Depth]));
        }
        If (Not ((PromotionPieces[Depth] == 0)))
        {
            List.ReplaceItem(CapturesDeltaSum, Depth, ((CapturesDeltaSum[Depth] - PromotionPieces[Depth]) + SourcePieces[Depth]));
        }
    }
    If ForceFullEval
    {
        EvaluationRes = 0;
        EvaluationIsDynamicRes = 0;
        If (1 == 1)
        {
            Call TTProbeBoard(CurrentBoardHash)((Depth + 1));
            If ((TTProbeRes == 1) And (Not ((TTProbeBoard.EvalSumRes == ""))))
            {
                EvaluationRes = TTProbeBoard.EvalSumRes;
                If (IsClassicEndgameEval == 1)
                {
                    If (Not ((PromotionPieces[1] == 0)))
                    {
                        EvaluationRes += 75;
                        EvaluationIsDynamicRes = 1;
                    }
                }
                If (IsBlockProfilerEnabled == 1)
                {
                    Call ProfilerMethodExit(Depth);
                }
                Stop(this script);
            }
        }
        If (IsClassicEndgameEval == 0)
        {
            Call NNUE_Public_Evaluate((Depth + 1));
            Call EvaluatePostProcess(Depth);
            EvaluationRes = Operator.Round(NNUE_EvalRes);
            EvaluationIsDynamicRes = 0;
            Call TTStoreBoard(CurrentBoardHash)((Depth + 1))(EvaluationRes);
        }
        Else
        {
            EvaluationRes = (EvalBase + (PosEvalDeltaSum[Depth] - CapturesDeltaSum[Depth]));
            If (((BlackQueenCountLocal + BlackMinorCountLocal) == 0) Or ((WhiteQueenCountLocal + WhiteMinorCountLocal) == 0))
            {
                Side = 0;
                If ((BlackQueenCountLocal + BlackMinorCountLocal) > 0)
                {
                    Side = 1;
                }
                Else
                {
                    If ((WhiteQueenCountLocal + WhiteMinorCountLocal) > 0)
                    {
                        Side = 2;
                    }
                }
                If (Not ((Side == 0)))
                {
                    CurrentValue = ChebyshevDistance[((WhiteKingIdx * 100) + BlackKingIdx)];
                    If (Side == 1)
                    {
                        EvaluationRes += (-20 * CurrentValue);
                    }
                    Else
                    {
                        EvaluationRes += (20 * CurrentValue);
                    }
                    If (Side == 1)
                    {
                        File = IdxToFile[WhiteKingIdx];
                        Rank = IdxToRank[WhiteKingIdx];
                    }
                    Else
                    {
                        File = IdxToFile[BlackKingIdx];
                        Rank = IdxToRank[BlackKingIdx];
                    }
                    Delta = 0;
                    Delta2 = 0;
                    If (Rank < 4)
                    {
                        Delta = (4 - Rank);
                    }
                    Else
                    {
                        If (Rank > 5)
                        {
                            Delta = (Rank - 5);
                        }
                    }
                    If (File < 4)
                    {
                        Delta2 = (4 - File);
                    }
                    Else
                    {
                        If (File > 5)
                        {
                            Delta2 = (File - 5);
                        }
                    }
                    If (Side == 1)
                    {
                        EvaluationRes += (20 * (Delta + Delta2));
                    }
                    Else
                    {
                        EvaluationRes += (-20 * (Delta + Delta2));
                    }
                }
            }
            Call EvaluatePostProcess(Depth);
            Call TTStoreBoard(CurrentBoardHash)((Depth + 1))(EvaluationRes);
            If (Not ((PromotionPieces[1] == 0)))
            {
                EvaluationRes += 75;
                EvaluationIsDynamicRes = 1;
            }
        }
    }
    If (IsBlockProfilerEnabled == 1)
    {
        Call ProfilerMethodExit(Depth);
    }
}

Define EvaluateBoardBasic (warp=true)
{
    EvalBoardBasicRes = 0;
    Idx = 1;
    Repeat (64)
    {
        Piece = Board[Idx];
        If (Not ((Piece == 0)))
        {
            EvalBoardBasicRes += Piece;
            Call GetPiecePosEval(Piece)(Idx);
            EvalBoardBasicRes += PosEvalRes;
        }
        Idx += 1;
    }
}

Define EvaluatePostProcess(string Depth) (warp=true)
{
    Call //("Early promotion detection via Rule-of-Squares / Chebyshev distance");
    If (((WhiteQueenCountLocal + WhiteMinorCountLocal) == 0) And ((BlackQueenCountLocal + BlackMinorCountLocal) == 0))
    {
        List.DeleteItem(BlackPawnCount, all);
        List.DeleteItem(WhitePawnCount, all);
        Repeat (8)
        {
            List.Add(BlackPawnCount, 0);
            List.Add(WhitePawnCount, 0);
        }
        List.DeleteItem(PawnAdvancePerFile, all);
        Repeat (32)
        {
            List.Add(PawnAdvancePerFile, 0);
        }
        Idx = 1;
        Repeat (64)
        {
            SourcePiece = Board[Idx];
            If (SourcePiece == GoK_BlackPawn)
            {
                File = IdxToFile[Idx];
                Rank = IdxToRank[Idx];
                List.ReplaceItem(BlackPawnCount, File, (BlackPawnCount[File] + 1));
                If ((PawnAdvancePerFile[(File + 16)] == 0) Or (Rank < PawnAdvancePerFile[(File + 16)]))
                {
                    List.ReplaceItem(PawnAdvancePerFile, (File + 16), Rank);
                }
                If (Rank > PawnAdvancePerFile[(File + 24)])
                {
                    List.ReplaceItem(PawnAdvancePerFile, (File + 24), Rank);
                }
            }
            If (SourcePiece == GoK_WhitePawn)
            {
                File = IdxToFile[Idx];
                Rank = IdxToRank[Idx];
                List.ReplaceItem(WhitePawnCount, File, (WhitePawnCount[File] + 1));
                If (Rank > PawnAdvancePerFile[File])
                {
                    List.ReplaceItem(PawnAdvancePerFile, File, Rank);
                }
                If ((PawnAdvancePerFile[(File + 8)] == 0) Or (Rank < PawnAdvancePerFile[(File + 8)]))
                {
                    List.ReplaceItem(PawnAdvancePerFile, (File + 8), Rank);
                }
            }
            Idx += 1;
        }
        Count = 0;
        Count2 = 0;
        Idx = 1;
        Repeat (8)
        {
            WhitePawnForwardRank = PawnAdvancePerFile[(Idx + 8)];
            BlackPawnForwardRank = PawnAdvancePerFile[(Idx + 24)];
            If ((BlackQueenCountLocal + BlackMinorCountLocal) == 0)
            {
                If ((WhitePawnForwardRank < 7) And (WhitePawnForwardRank > 0))
                {
                    BlackPawnBackwardRank = PawnAdvancePerFile[(Idx + 16)];
                    If ((WhitePawnForwardRank < BlackPawnBackwardRank) Or (BlackPawnBackwardRank == 0))
                    {
                        LeftOppPawnRank = PawnAdvancePerFile[((Idx + 16) - 1)];
                        If (((Idx == 1) Or (LeftOppPawnRank == 0)) Or (WhitePawnForwardRank < LeftOppPawnRank))
                        {
                            RightOppPawnRank = PawnAdvancePerFile[((Idx + 16) + 1)];
                            If (((Idx == 8) Or (RightOppPawnRank == 0)) Or (WhitePawnForwardRank < RightOppPawnRank))
                            {
                                TargetIdx = Idx;
                                Delta = (WhitePawnForwardRank - 1);
                                If (Delta > 5)
                                {
                                    Delta = 5;
                                }
                                If ((ChebyshevDistance[((BlackKingIdx * 100) + TargetIdx)] - ((Depth + 1) % 2)) > Delta)
                                {
                                    If (Count == 0)
                                    {
                                        EvaluationRes += ((GoK_WhiteQueen - GoK_WhitePawn) + 100);
                                    }
                                    Count += 1;
                                }
                            }
                        }
                    }
                }
            }
            If ((WhiteQueenCountLocal + WhiteMinorCountLocal) == 0)
            {
                If (BlackPawnForwardRank > 2)
                {
                    WhitePawnBackwardRank = PawnAdvancePerFile[Idx];
                    If (BlackPawnForwardRank > WhitePawnBackwardRank)
                    {
                        LeftOppPawnRank = PawnAdvancePerFile[(Idx - 1)];
                        If (((Idx == 1) Or (LeftOppPawnRank == 0)) Or (BlackPawnForwardRank > LeftOppPawnRank))
                        {
                            RightOppPawnRank = PawnAdvancePerFile[(Idx + 1)];
                            If (((Idx == 8) Or (RightOppPawnRank == 0)) Or (BlackPawnForwardRank > RightOppPawnRank))
                            {
                                TargetIdx = (56 + Idx);
                                Delta = (8 - BlackPawnForwardRank);
                                If (Delta > 5)
                                {
                                    Delta = 5;
                                }
                                If ((ChebyshevDistance[((WhiteKingIdx * 100) + TargetIdx)] - (Depth % 2)) > Delta)
                                {
                                    If (Count2 == 0)
                                    {
                                        EvaluationRes += ((GoK_BlackQueen - GoK_BlackPawn) - 100);
                                    }
                                    Count2 += 1;
                                }
                            }
                        }
                    }
                }
            }
            Idx += 1;
        }
    }
}

Define ExecuteEngineMove (warp=false)
{
    Call EnterExecution;
    Call ExecuteEngineMoveImpl;
    Call ExitExecution;
}

Define ExecuteEngineMoveImpl (warp=false)
{
    If (GoK_IsGameSuspended == 1)
    {
        Stop(this script);
    }
    Event.Broadcast("UI_OpeningBookHide");
    BestMove = "";
    If ((Level > 2) And (1 == 1))
    {
        Call GetOpeningMoves;
        If (List.Length(OpeningMovesRes) > 0)
        {
            Event.Broadcast("UI_OpeningBookShow");
            BestMove = OpeningMovesRes[Operator.Random(1 , List.Length(OpeningMovesRes))];
        }
    }
    Call IsEngineValidMove(BestMove);
    If (ValidMoveRes == 0)
    {
        Control.Wait(0);
        If (Level > 2)
        {
            If (Level > 4)
            {
                Call GetBestMoveMedDiff;
            }
            Else
            {
                Call GetBestMoveBlitz;
            }
        }
        Else
        {
            Call GetBestMoveEasy;
        }
    }
    Event.BroadcastAndWait("UI_HideBestMove");
    Call OnProgressChanged(100);
    Control.Wait(0);
    Call IsEngineValidMove(BestMove);
    If (ValidMoveRes == 0)
    {
        Looks.Say(Operator.Join("Internal Error: No valid move found. Sorry, this should not happen. Maybe you cleared lookup lists in the editor? If you are running a normal game, please export board data and report bug via project comment", Operator.Join(" Move: ", BestMove)), 10);
        GoK_IsGameSuspended = 1;
        Stop(this script);
    }
    Looks.Think("");
    Pieces_MovePieceFromIdx = floor((BestMove / 100));
    Pieces_MovePieceToIdx = floor((BestMove % 100));
    If (((BestMove == GoK_BlackQueensideCastling) Or (BestMove == GoK_BlackKingsideCastling)) Or ((BestMove == GoK_WhiteQueensideCastling) Or (BestMove == GoK_WhiteKingsideCastling)))
    {
        Pieces_MovePieceSpecial = BestMove;
    }
    Else
    {
        Pieces_MovePieceSpecial = "";
    }
    Event.BroadcastAndWait("Pieces_MovePiece");
    Event.Broadcast("SoundMove");
    GameMoves = Operator.Join(GameMoves, MoveToZeroPaddedStr[floor((BestMove + 1))]);
    Call GetMoveNotation(BestMove);
    List.Add(GameMovesAN, MoveNotationRes);
    Call ClearMoveList(1);
    Call AddMoveToList(BestMove)(1);
    List.ReplaceItem(MovesIdx, 1, 1);
    Call ApplyMove(1);
    Call DrawBoardAndWait;
    If (Board[(BestMove % 100)] == GoK_BlackKing)
    {
        HasBlackKingMoved = 1;
    }
    If (Board[(BestMove % 100)] == GoK_BlackRook)
    {
        If (floor((BestMove / 100)) == VirtualBoard[1])
        {
            HasBlackRookQSMoved = 1;
        }
        If (floor((BestMove / 100)) == VirtualBoard[8])
        {
            HasBlackRookKSMoved = 1;
        }
    }
    If ((BestMove == GoK_BlackQueensideCastling) Or (BestMove == GoK_BlackKingsideCastling))
    {
        HasBlackKingMoved = 1;
        HasBlackCastled = 1;
    }
    Call AddBoardToHistory(1);
    Call GetRepetitionCount;
    If (RepetitionCountRes > 2)
    {
        Looks.Say("Draw!");
        Event.Broadcast("SoundDraw");
        GoK_IsGameSuspended = 1;
    }
    Else
    {
        Call IsDrawByMaterial;
        If (IsDrawRes == 1)
        {
            Looks.Say("Draw!");
            Event.Broadcast("SoundDraw");
            GoK_IsGameSuspended = 1;
        }
        Else
        {
            Call IsWhiteKingCheckMate;
            If (IsWhiteKingCheckMateRes == 1)
            {
                Looks.Say("Checkmate!");
                Event.Broadcast("SoundCheckmate");
                GoK_IsGameSuspended = 1;
            }
            Else
            {
                Call IsDrawByStalemate(2);
                If (IsDrawRes == 1)
                {
                    Looks.Say("Draw!");
                    Event.Broadcast("SoundDraw");
                    GoK_IsGameSuspended = 1;
                }
                Else
                {
                    Call CalcBoardAttackedByMove(1);
                    If (IsWhiteChecked == 1)
                    {
                        Call SayAsync("Check!")(2);
                        Event.Broadcast("SoundCheck");
                    }
                }
            }
        }
    }
}

Define ExecuteInit (warp=false)
{
    ExecutionDepth = 0;
    IsExecutionRunning = 0;
    If (IsPlayerBlack == 1)
    {
        Call ExecuteEngineMove;
    }
}

Define ExecuteUserMove(string UserMove) (warp=false)
{
    Call EnterExecution;
    Call ExecuteUserMoveImpl(UserMove);
    Call ExitExecution;
}

Define ExecuteUserMoveImpl(string UserMoveParam) (warp=false)
{
    If (GoK_IsGameSuspended == 1)
    {
        Stop(this script);
    }
    Pieces_MovePieceFromIdx = floor((UserMoveParam / 100));
    Pieces_MovePieceToIdx = floor((UserMoveParam % 100));
    If (((UserMoveParam == GoK_BlackQueensideCastling) Or (UserMoveParam == GoK_BlackKingsideCastling)) Or ((UserMoveParam == GoK_WhiteQueensideCastling) Or (UserMoveParam == GoK_WhiteKingsideCastling)))
    {
        Pieces_MovePieceSpecial = UserMoveParam;
    }
    Else
    {
        Pieces_MovePieceSpecial = "";
    }
    Event.Broadcast("SoundMove");
    Stg_FromSquareIdx = -1;
    Stg_ToSquareIdx = -1;
    Event.BroadcastAndWait("Stg_FromSquareSelected");
    Event.BroadcastAndWait("Stg_ToSquareSelected");
    Call GenerateMovesPublic(2);
    If (Not (List.ContainsItem(Moves2, UserMoveParam)))
    {
        Call SayAsync("Invalid move!")(2);
        Event.Broadcast("SoundInvalidMove");
        Call DrawBoardAndWait;
        Stop(this script);
    }
    UserMove = UserMoveParam;
    If (Operator.LetterOf(UserMove, (Variable.Length(UserMove) - 1)) == ".")
    {
        Looks.Say("Please select promotion piece");
        Event.BroadcastAndWait("Pieces_SelectPromotionPiece");
        Looks.Say("");
        If (Pieces_SelectedPromotionPiece == GoK_WhiteQueen)
        {
            UserMove = (floor(UserMove) + 0.1);
        }
        Else
        {
            If (Pieces_SelectedPromotionPiece == GoK_WhiteRook)
            {
                UserMove = (floor(UserMove) + 0.2);
            }
            Else
            {
                If (Pieces_SelectedPromotionPiece == GoK_WhiteBishop)
                {
                    UserMove = (floor(UserMove) + 0.3);
                }
                Else
                {
                    If (Pieces_SelectedPromotionPiece == GoK_WhiteKnight)
                    {
                        UserMove = (floor(UserMove) + 0.4);
                    }
                }
            }
        }
    }
    Call GetMoveNotation(UserMove);
    Call ClearMoveList(2);
    Call AddMoveToList(UserMove)(2);
    List.ReplaceItem(MovesIdx, 2, 1);
    Call ApplyMove(2);
    Call DrawBoardAndWait;
    Call CalcBoardAttackedByMove(1);
    If (IsWhiteChecked == 1)
    {
        Call RevertMove(2);
        Call DrawBoardAndWait;
        Control.Wait(0);
        Call SayAsync("Invalid move - Check!")(2);
        Event.Broadcast("SoundInvalidMoveCheck");
        Stop(this script);
    }
    List.Add(GameMovesAN, MoveNotationRes);
    GameMoves = Operator.Join(GameMoves, MoveToZeroPaddedStr[floor((UserMove + 1))]);
    Call DrawBoardAndWait;
    Control.Wait(0);
    SourceIdx = floor((UserMove / 100));
    TargetIdx = floor((UserMove % 100));
    If (Board[TargetIdx] == GoK_WhiteKing)
    {
        HasWhiteKingMoved = 1;
    }
    If (Board[TargetIdx] == GoK_WhiteRook)
    {
        If (SourceIdx == VirtualBoard[57])
        {
            HasWhiteRookQSMoved = 1;
        }
        If (SourceIdx == VirtualBoard[64])
        {
            HasWhiteRookKSMoved = 1;
        }
    }
    If ((UserMove == GoK_WhiteQueensideCastling) Or (UserMove == GoK_WhiteKingsideCastling))
    {
        HasWhiteCastled = 1;
        HasWhiteKingMoved = 1;
    }
    Call AddBoardToHistory(0);
    Call IsBlackKingCheckMate;
    If (IsBlackKingCheckMateRes == 1)
    {
        Looks.Say("Checkmate!");
        Event.Broadcast("SoundCheckmate");
        GoK_IsGameSuspended = 1;
    }
    Else
    {
        Call IsDrawByStalemate(1);
        If (IsDrawRes == 1)
        {
            Looks.Say("Draw!");
            Event.Broadcast("SoundDraw");
            GoK_IsGameSuspended = 1;
        }
        Else
        {
            Call GetRepetitionCount;
            If (RepetitionCountRes > 2)
            {
                Looks.Say("Draw!");
                Event.Broadcast("SoundDraw");
                GoK_IsGameSuspended = 1;
            }
            Else
            {
                Call IsDrawByMaterial;
                If (IsDrawRes == 1)
                {
                    Looks.Say("Draw!");
                    Event.Broadcast("SoundDraw");
                    GoK_IsGameSuspended = 1;
                }
                Else
                {
                    Call ExecuteEngineMove;
                }
            }
        }
    }
}

Define ExitExecution (warp=false)
{
    ExecutionDepth += -1;
    If (ExecutionDepth == 0)
    {
        IsExecutionRunning = 0;
        Event.BroadcastAndWait("GoK_ModeInput");
    }
}

Define ExportBoardFEN(bool IsPlayerBlack)(bool IsPlayerTurn) (warp=true)
{
    ExportDataFEN = "";
    ExportDataFENLichess = "https://lichess.org/analysis/";
    Idx = 1;
    Repeat Until (Idx > 64)
    {
        If IsPlayerBlack
        {
            Piece = (0 - Board[(65 - Idx)]);
        }
        Else
        {
            Piece = Board[Idx];
        }
        If (Piece == GoK_BlackPawn)
        {
            CurrentValue = "p";
        }
        If (Piece == GoK_BlackKnight)
        {
            CurrentValue = "n";
        }
        If (Piece == GoK_BlackBishop)
        {
            CurrentValue = "b";
        }
        If (Piece == GoK_BlackRook)
        {
            CurrentValue = "r";
        }
        If (Piece == GoK_BlackQueen)
        {
            CurrentValue = "q";
        }
        If (Piece == GoK_BlackKing)
        {
            CurrentValue = "k";
        }
        If (Piece == GoK_WhitePawn)
        {
            CurrentValue = "P";
        }
        If (Piece == GoK_WhiteKnight)
        {
            CurrentValue = "N";
        }
        If (Piece == GoK_WhiteBishop)
        {
            CurrentValue = "B";
        }
        If (Piece == GoK_WhiteRook)
        {
            CurrentValue = "R";
        }
        If (Piece == GoK_WhiteQueen)
        {
            CurrentValue = "Q";
        }
        If (Piece == GoK_WhiteKing)
        {
            CurrentValue = "K";
        }
        If (Piece == 0)
        {
            Idx2 = Idx;
            Repeat Until (((Idx2 % 8) == 0) Or (((Not (IsPlayerBlack)) And (Not ((Board[(Idx2 + 1)] == 0)))) Or (IsPlayerBlack And (Not ((Board[(65 - (Idx2 + 1))] == 0))))))
            {
                Idx2 += 1;
            }
            CurrentValue = ((Idx2 - Idx) + 1);
            Idx += (Idx2 - Idx);
        }
        ExportDataFEN = Operator.Join(ExportDataFEN, CurrentValue);
        ExportDataFENLichess = Operator.Join(ExportDataFENLichess, CurrentValue);
        If (((Idx % 8) == 0) And (Idx < 64))
        {
            ExportDataFEN = Operator.Join(ExportDataFEN, "/");
            ExportDataFENLichess = Operator.Join(ExportDataFENLichess, "/");
        }
        Idx += 1;
    }
    If ((IsPlayerBlack And IsPlayerTurn) Or ((Not (IsPlayerBlack)) And (Not (IsPlayerTurn))))
    {
        ExportDataFEN = Operator.Join(ExportDataFEN, " b");
        ExportDataFENLichess = Operator.Join(ExportDataFENLichess, "_b");
    }
    Else
    {
        ExportDataFEN = Operator.Join(ExportDataFEN, " w");
        ExportDataFENLichess = Operator.Join(ExportDataFENLichess, "_w");
    }
}

Define ExportMovesPGN (warp=true)
{
    ExportMovesPGN = "";
    Idx = 1;
    Repeat (List.Length(GameMovesAN))
    {
        If ((Idx % 2) == 1)
        {
            ExportMovesPGN = Operator.Join(ExportMovesPGN, Operator.Join((((Idx - 1) / 2) + 1), ". "));
        }
        ExportMovesPGN = Operator.Join(ExportMovesPGN, Operator.Join(GameMovesAN[Idx], " "));
        Idx += 1;
    }
}

Define FillBoard (warp=true)
{
    List.DeleteItem(VirtualBoard, all);
    Idx = 1;
    Repeat (64)
    {
        If (IsPlayerBlack == 0)
        {
            List.Add(VirtualBoard, Idx);
        }
        Else
        {
            List.Add(VirtualBoard, (((IdxToRank[Idx] - 1) * 8) + (9 - IdxToFile[Idx])));
        }
        Idx += 1;
    }
    List.DeleteItem(Board, all);
    Repeat (64)
    {
        List.Add(Board, 0);
    }
    List.ReplaceItem(Board, VirtualBoard[1], GoK_BlackRook);
    List.ReplaceItem(Board, VirtualBoard[2], GoK_BlackKnight);
    List.ReplaceItem(Board, VirtualBoard[3], GoK_BlackBishop);
    List.ReplaceItem(Board, VirtualBoard[4], GoK_BlackQueen);
    List.ReplaceItem(Board, VirtualBoard[5], GoK_BlackKing);
    List.ReplaceItem(Board, VirtualBoard[6], GoK_BlackBishop);
    List.ReplaceItem(Board, VirtualBoard[7], GoK_BlackKnight);
    List.ReplaceItem(Board, VirtualBoard[8], GoK_BlackRook);
    Idx = 9;
    Repeat (8)
    {
        List.ReplaceItem(Board, VirtualBoard[Idx], GoK_BlackPawn);
        Idx += 1;
    }
    Idx = 49;
    Repeat (8)
    {
        List.ReplaceItem(Board, VirtualBoard[Idx], GoK_WhitePawn);
        Idx += 1;
    }
    List.ReplaceItem(Board, VirtualBoard[57], GoK_WhiteRook);
    List.ReplaceItem(Board, VirtualBoard[58], GoK_WhiteKnight);
    List.ReplaceItem(Board, VirtualBoard[59], GoK_WhiteBishop);
    List.ReplaceItem(Board, VirtualBoard[60], GoK_WhiteQueen);
    List.ReplaceItem(Board, VirtualBoard[61], GoK_WhiteKing);
    List.ReplaceItem(Board, VirtualBoard[62], GoK_WhiteBishop);
    List.ReplaceItem(Board, VirtualBoard[63], GoK_WhiteKnight);
    List.ReplaceItem(Board, VirtualBoard[64], GoK_WhiteRook);
}

Define GenerateMovesForSource(string Depth)(string SourceIdx)(bool AttackTableOnly)(bool Quiescence) (warp=true)
{
    MoveGen.SourcePiece = Board[SourceIdx];
    Call //("Pawn moves (generated via code logic)");
    If (MoveGen.SourcePiece == GoK_BlackPawn)
    {
        If (AttackTableOnly Or (Board[(SourceIdx + 7)] < 0))
        {
            If (IdxToFile[SourceIdx] > 1)
            {
                Call AddMoveImpl(SourceIdx)((SourceIdx + 7))(Depth)(AttackTableOnly)(Quiescence);
            }
        }
        If (AttackTableOnly Or (Board[(SourceIdx + 9)] < 0))
        {
            If (IdxToFile[SourceIdx] < 8)
            {
                Call AddMoveImpl(SourceIdx)((SourceIdx + 9))(Depth)(AttackTableOnly)(Quiescence);
            }
        }
        If (Not (AttackTableOnly))
        {
            If (Board[(SourceIdx + 8)] == 0)
            {
                If Quiescence
                {
                    Call AddPotentialQuiescenceMove(SourceIdx)((SourceIdx + 8))(GoK_BlackPawn)(Depth);
                }
                Else
                {
                    Call AddMoveImpl(SourceIdx)((SourceIdx + 8))(Depth)(AttackTableOnly)(Quiescence);
                }
                If ((IdxToRank[SourceIdx] == 2) And (Board[(SourceIdx + 16)] == 0))
                {
                    If Quiescence
                    {
                        Call AddPotentialQuiescenceMove(SourceIdx)((SourceIdx + 16))(GoK_BlackPawn)(Depth);
                    }
                    Else
                    {
                        Call AddMoveImpl(SourceIdx)((SourceIdx + 16))(Depth)(AttackTableOnly)(Quiescence);
                    }
                }
            }
        }
        If (Not ((EnPassantTarget[Depth] == "")))
        {
            TargetIdx = EnPassantTarget[Depth];
            If ((Not (AttackTableOnly)) And (IdxToRank[SourceIdx] == IdxToRank[TargetIdx]))
            {
                If (abs((IdxToFile[SourceIdx] - IdxToFile[TargetIdx])) == 1)
                {
                    Call AddMoveImpl(SourceIdx)((TargetIdx + 8))(Depth)(AttackTableOnly)(Quiescence);
                }
            }
        }
        Stop(this script);
    }
    If (MoveGen.SourcePiece == GoK_WhitePawn)
    {
        If (AttackTableOnly Or (Board[(SourceIdx - 9)] > 0))
        {
            If (IdxToFile[SourceIdx] > 1)
            {
                Call AddMoveImpl(SourceIdx)((SourceIdx - 9))(Depth)(AttackTableOnly)(Quiescence);
            }
        }
        If (AttackTableOnly Or (Board[(SourceIdx - 7)] > 0))
        {
            If (IdxToFile[SourceIdx] < 8)
            {
                Call AddMoveImpl(SourceIdx)((SourceIdx - 7))(Depth)(AttackTableOnly)(Quiescence);
            }
        }
        If (Not (AttackTableOnly))
        {
            If (Board[(SourceIdx - 8)] == 0)
            {
                If Quiescence
                {
                    Call AddPotentialQuiescenceMove(SourceIdx)((SourceIdx - 8))(GoK_WhitePawn)(Depth);
                }
                Else
                {
                    Call AddMoveImpl(SourceIdx)((SourceIdx - 8))(Depth)(AttackTableOnly)(Quiescence);
                }
                If ((IdxToRank[SourceIdx] == 7) And (Board[(SourceIdx - 16)] == 0))
                {
                    If Quiescence
                    {
                        Call AddPotentialQuiescenceMove(SourceIdx)((SourceIdx - 16))(GoK_WhitePawn)(Depth);
                    }
                    Else
                    {
                        Call AddMoveImpl(SourceIdx)((SourceIdx - 16))(Depth)(AttackTableOnly)(Quiescence);
                    }
                }
            }
        }
        If (Not ((EnPassantTarget[Depth] == "")))
        {
            TargetIdx = EnPassantTarget[Depth];
            If ((Not (AttackTableOnly)) And (IdxToRank[SourceIdx] == IdxToRank[TargetIdx]))
            {
                If (abs((IdxToFile[SourceIdx] - IdxToFile[TargetIdx])) == 1)
                {
                    Call AddMoveImpl(SourceIdx)((TargetIdx - 8))(Depth)(AttackTableOnly)(Quiescence);
                }
            }
        }
        Stop(this script);
    }
    Call //("Non-pawn moves (generated via lookup tables)");
    MoveGen.SourcePiece = abs(MoveGen.SourcePiece);
    If (MoveGen.SourcePiece == GoK_BlackRook)
    {
        Call AddSlidingMove(SourceIdx)(Depth)(AttackTableOnly)(Quiescence)((1 == 1));
        Stop(this script);
    }
    If (MoveGen.SourcePiece == GoK_BlackBishop)
    {
        Call AddSlidingMove(SourceIdx)(Depth)(AttackTableOnly)(Quiescence)((1 == 0));
        Stop(this script);
    }
    If (MoveGen.SourcePiece == GoK_BlackKnight)
    {
        Call AddLookupMove(SourceIdx)(Depth)(AttackTableOnly)(Quiescence)((1 == 0));
        Stop(this script);
    }
    If (MoveGen.SourcePiece == GoK_BlackKing)
    {
        Call AddLookupMove(SourceIdx)(Depth)(AttackTableOnly)(Quiescence)((1 == 1));
        Stop(this script);
    }
    If (MoveGen.SourcePiece == GoK_BlackQueen)
    {
        Call AddSlidingMove(SourceIdx)(Depth)(AttackTableOnly)(Quiescence)((1 == 1));
        Call AddSlidingMove(SourceIdx)(Depth)(AttackTableOnly)(Quiescence)((1 == 0));
        Stop(this script);
    }
}

Define GenerateMovesForSourceEx(string Depth)(string SourceIdx)(bool AttackTableOnly)(bool Quiescence) (warp=true)
{
    IsPotentialNonCapQuiescMove = 0;
    If Quiescence
    {
        Call IsQuiescentCheckCond(Depth);
        IsPotentialNonCapQuiescMove = IsQuiescentCheckRes;
    }
    GenerateMovesRequiresAttackRecalc = 0;
    List.DeleteAll(CalcMovesMoveList);
    List.DeleteAll(CalcMovesScoreList);
    Call GenerateMovesForSource(Depth)(SourceIdx)(AttackTableOnly)(Quiescence);
    Call SortMoveList(Depth);
}

Define GenerateMovesImpl(string Depth)(bool AttackTableOnly)(bool Quiescence)(bool IsBlackMove) (warp=true)
{
    If (Not (AttackTableOnly))
    {
        If (BoardAttackedCalculated[Depth] == 0)
        {
            If (Not (Quiescence))
            {
                If IsBlackMove
                {
                    If ((Operator.LetterOf(CastlingState[Depth], 1) == 0) And (Operator.LetterOf(CastlingState[Depth], 2) == 0))
                    {
                        If (Operator.LetterOf(CastlingState[Depth], 4) == 0)
                        {
                            GenerateMovesRequiresAttackRecalc = 1;
                            Stop(this script);
                        }
                        If (Operator.LetterOf(CastlingState[Depth], 3) == 0)
                        {
                            GenerateMovesRequiresAttackRecalc = 1;
                            Stop(this script);
                        }
                    }
                }
                Else
                {
                    If ((Operator.LetterOf(CastlingState[Depth], 5) == 0) And (Operator.LetterOf(CastlingState[Depth], 6) == 0))
                    {
                        If (Operator.LetterOf(CastlingState[Depth], 8) == 0)
                        {
                            GenerateMovesRequiresAttackRecalc = 1;
                            Stop(this script);
                        }
                        If (Operator.LetterOf(CastlingState[Depth], 7) == 0)
                        {
                            GenerateMovesRequiresAttackRecalc = 1;
                            Stop(this script);
                        }
                    }
                }
            }
            If IsBlackMove
            {
                KingIdx = BlackKingIdx;
            }
            Else
            {
                KingIdx = WhiteKingIdx;
            }
            Call GenerateMovesForSource(Depth)(KingIdx)(AttackTableOnly)(Quiescence);
            If (GenerateMovesRequiresAttackRecalc == 1)
            {
                Stop(this script);
            }
        }
        List.DeleteAll(PieceMobility);
        Repeat (64)
        {
            List.Add(PieceMobility, 0);
        }
    }
    List.DeleteAll(CalcMovesScoreList);
    List.DeleteAll(CalcMovesMoveList);
    Call PrepareCurrentKillerMoves(Depth);
    Call ClearMoveList(Depth);
    Caller.SourceIdx = 1;
    Repeat (64)
    {
        If ((IsBlackMove And (Board[Caller.SourceIdx] > 0)) Or ((Not (IsBlackMove)) And (Board[Caller.SourceIdx] < 0)))
        {
            Piece = Board[Caller.SourceIdx];
            Call GenerateMovesForSource(Depth)(Caller.SourceIdx)(AttackTableOnly)(Quiescence);
        }
        Caller.SourceIdx += 1;
    }
    Call //("Castling moves");
    If ((Not (AttackTableOnly)) And (Not (Quiescence)))
    {
        If IsBlackMove
        {
            If ((Operator.LetterOf(CastlingState[Depth], 1) == 0) And (Operator.LetterOf(CastlingState[Depth], 2) == 0))
            {
                If (Operator.LetterOf(CastlingState[Depth], 4) == 0)
                {
                    If ((((Board[VirtualBoard[1]] == GoK_BlackRook) And (Board[VirtualBoard[2]] == 0)) And ((Board[VirtualBoard[3]] == 0) And (Board[VirtualBoard[4]] == 0))) And (Board[VirtualBoard[5]] == GoK_BlackKing))
                    {
                        If ((BoardAttackedByOpponentSnapshot[(((Depth - 1) * 100) + VirtualBoard[3])] == 0) And ((BoardAttackedByOpponentSnapshot[(((Depth - 1) * 100) + VirtualBoard[4])] == 0) And (BoardAttackedByOpponentSnapshot[(((Depth - 1) * 100) + VirtualBoard[5])] == 0)))
                        {
                            Call AddSpecialMove(GoK_BlackQueensideCastling)(Depth);
                        }
                    }
                }
                If (Operator.LetterOf(CastlingState[Depth], 3) == 0)
                {
                    If (((Board[VirtualBoard[5]] == GoK_BlackKing) And (Board[VirtualBoard[6]] == 0)) And ((Board[VirtualBoard[7]] == 0) And (Board[VirtualBoard[8]] == GoK_BlackRook)))
                    {
                        If ((BoardAttackedByOpponentSnapshot[(((Depth - 1) * 100) + VirtualBoard[5])] == 0) And ((BoardAttackedByOpponentSnapshot[(((Depth - 1) * 100) + VirtualBoard[6])] == 0) And (BoardAttackedByOpponentSnapshot[(((Depth - 1) * 100) + VirtualBoard[7])] == 0)))
                        {
                            Call AddSpecialMove(GoK_BlackKingsideCastling)(Depth);
                        }
                    }
                }
            }
        }
        Else
        {
            If ((Operator.LetterOf(CastlingState[Depth], 5) == 0) And (Operator.LetterOf(CastlingState[Depth], 6) == 0))
            {
                If (Operator.LetterOf(CastlingState[Depth], 8) == 0)
                {
                    If (((Board[VirtualBoard[57]] == GoK_WhiteRook) And (Board[VirtualBoard[58]] == 0)) And ((Board[VirtualBoard[59]] == 0) And ((Board[VirtualBoard[60]] == 0) And (Board[VirtualBoard[61]] == GoK_WhiteKing))))
                    {
                        If ((BoardAttackedByOpponentSnapshot[(((Depth - 1) * 100) + VirtualBoard[59])] == 0) And ((BoardAttackedByOpponentSnapshot[(((Depth - 1) * 100) + VirtualBoard[60])] == 0) And (BoardAttackedByOpponentSnapshot[(((Depth - 1) * 100) + VirtualBoard[61])] == 0)))
                        {
                            Call AddSpecialMove(GoK_WhiteQueensideCastling)(Depth);
                        }
                    }
                }
                If (Operator.LetterOf(CastlingState[Depth], 7) == 0)
                {
                    If (((Board[VirtualBoard[62]] == 0) And (Board[VirtualBoard[61]] == GoK_WhiteKing)) And ((Board[VirtualBoard[63]] == 0) And (Board[VirtualBoard[64]] == GoK_WhiteRook)))
                    {
                        If ((BoardAttackedByOpponentSnapshot[(((Depth - 1) * 100) + VirtualBoard[61])] == 0) And ((BoardAttackedByOpponentSnapshot[(((Depth - 1) * 100) + VirtualBoard[62])] == 0) And (BoardAttackedByOpponentSnapshot[(((Depth - 1) * 100) + VirtualBoard[63])] == 0)))
                        {
                            Call AddSpecialMove(GoK_WhiteKingsideCastling)(Depth);
                        }
                    }
                }
            }
        }
    }
    Call //("Move ordering");
    If (Not (AttackTableOnly))
    {
        If (Depth == 1)
        {
            Idx = 1;
            Repeat (List.Length(CalcMovesMoveList))
            {
                CurrentValue = Ply1Scores[floor((CalcMovesMoveList[Idx] * 10))];
                If (Not ((CurrentValue == "")))
                {
                    List.ReplaceItem(CalcMovesScoreList, Idx, (10000000 + CurrentValue));
                }
                Idx += 1;
            }
        }
        Call SortMoveList(Depth);
    }
}

Define GenerateMovesImplWrapper(string Depth)(bool AttackTableOnly)(bool Quiescence) (warp=true)
{
    If (IsBlockProfilerEnabled == 1)
    {
        Call ProfilerMethodEnter(((((3 * MaxSearchDepthStackFrames) - (MaxSearchDepthStackFrames * Quiescence)) - ((2 * MaxSearchDepthStackFrames) * AttackTableOnly)) + Depth));
    }
    IsPotentialNonCapQuiescMove = 0;
    If Quiescence
    {
        Call IsQuiescentCheckCond(Depth);
        IsPotentialNonCapQuiescMove = IsQuiescentCheckRes;
    }
    GenerateMovesRequiresAttackRecalc = 0;
    Call GenerateMovesImpl(Depth)(AttackTableOnly)(Quiescence)(((Depth % 2) == 1));
    If (IsBlockProfilerEnabled == 1)
    {
        Call ProfilerMethodExit(((((3 * MaxSearchDepthStackFrames) - (MaxSearchDepthStackFrames * Quiescence)) - ((2 * MaxSearchDepthStackFrames) * AttackTableOnly)) + Depth));
    }
}

Define GenerateMovesPublic(string Depth) (warp=true)
{
    Idx = 1;
    Repeat (64)
    {
        If (Board[Idx] == GoK_WhiteKing)
        {
            WhiteKingIdx = Idx;
        }
        Else
        {
            If (Board[Idx] == GoK_BlackKing)
            {
                BlackKingIdx = Idx;
            }
        }
        Idx += 1;
    }
    Call CalcBoardAttackedByMove((Depth + 1));
    Call StoreAttackInfo(Depth);
    List.ReplaceItem(BoardAttackedCalculated, Depth, 1);
    Call SetInitialEnPassantTarget(Depth);
    List.ReplaceItem(CastlingState, Depth, Operator.Join(Operator.Join(Operator.Join(HasBlackCastled, HasBlackKingMoved), Operator.Join(HasBlackRookKSMoved, HasBlackRookQSMoved)), Operator.Join(Operator.Join(HasWhiteCastled, HasWhiteKingMoved), Operator.Join(HasWhiteRookKSMoved, HasWhiteRookQSMoved))));
    Call GenerateMovesImplWrapper(Depth)((1 == 0))((1 == 0));
    List.ReplaceItem(EnPassantTarget, Depth, "");
    List.ReplaceItem(BoardAttackedCalculated, Depth, 0);
    List.ReplaceItem(CastlingState, Depth, "");
}

Define GetBestMoveBlitz (warp=false)
{
    MaxSearchDepth = 20;
    ThinkTimeLimit = ((Level - 2) * 4);
    ThinkTimeStart = (Sensing.DaysSince2000() * 86400);
    IsSearchTimeout = 0;
    IsDeepeningDone = 0;
    IdxDeepening = 1;
    BestMove = "";
    BestSearchEvalRes = "";
    ThinkTimeLimitSearch = ThinkTimeLimit;
    Repeat ((((Level - 1) * 1) * (2 - IsScratch3)))
    {
        If ((IsSearchTimeout == 0) And ((IdxDeepening == 1) Or (abs(BestSearchEvalRes) < AbsMinCheckmateEval)))
        {
            Call Search(-100000)(100000)(1)((IdxDeepening + 1))((IdxDeepening == 1))((MaxSearchDepth - IdxDeepening))((1 == 1));
            If (Not ((SearchMoveRes == "")))
            {
                If ((BestMove == "") Or List.ContainsItem(SearchRootMovesDone, BestMove))
                {
                    BestMove = SearchMoveRes;
                    BestSearchEvalRes = SearchEvalRes;
                }
                Call OnEvaluationChanged(BestSearchEvalRes);
            }
        }
        IdxDeepening += 1;
    }
}

Define GetBestMoveEasy (warp=false)
{
    ThinkTimeStart = (Sensing.DaysSince2000() * 86400);
    ThinkTimeLimitSearch = 10;
    BestMove = "";
    If (Level == 1)
    {
        JuniorDistQuota = 100;
        JuniorSearchQuota = 0;
    }
    Else
    {
        If (Level == 2)
        {
            JuniorDistQuota = 40;
            JuniorSearchQuota = 20;
        }
    }
    Call Search(-100000)(100000)(1)(2)((1 == 0))(3)((1 == 1));
    BestMove = SearchMoveRes;
    CurrentValue = Operator.Random(1 , 100);
    If ((CurrentValue > ((JuniorSearchQuota + 100) / 2)) Or (((BoardAttackedByWhite[floor((BestMove / 100))] == 0) And (Board[floor((BestMove % 100))] == 0)) And (CurrentValue > JuniorSearchQuota)))
    {
        Call GenerateMovesPublic(1);
        List.ReplaceItem(MovesIdx, 1, Operator.Random(1 , ceiling((List.Length(Moves1) * (JuniorDistQuota / 100)))));
        Call ApplyMove(1);
        Call CalcBoardAttackedByMove(2);
        Call RevertMove(1);
        Repeat Until (IsBlackChecked == 0)
        {
            List.ReplaceItem(MovesIdx, 1, Operator.Random(1 , List.Length(Moves1)));
            Call ApplyMove(1);
            Call CalcBoardAttackedByMove(2);
            Call RevertMove(1);
        }
        BestMove = Moves1[MovesIdx[1]];
    }
}

Define GetBestMoveMedDiff (warp=false)
{
    MaxSearchDepth = (MaxSearchDepthStackFrames - 5);
    IsEvalStable = 1;
    If (Level == 5)
    {
        If (IsEndgame2 == 0)
        {
            ThinkTimeLimit = 15;
        }
        Else
        {
            ThinkTimeLimit = 15;
        }
    }
    Else
    {
        If (IsEndgame == 0)
        {
            ThinkTimeLimit = 25;
        }
        Else
        {
            If (IsEndgame2 == 0)
            {
                ThinkTimeLimit = 20;
            }
            Else
            {
                ThinkTimeLimit = 15;
            }
        }
    }
    If (CustomThinkTime > 0)
    {
        ThinkTimeLimit = CustomThinkTime;
    }
    List.DeleteAll(AWSize);
    List.Add(AWSize, 30);
    ThinkTimeStart = (Sensing.DaysSince2000() * 86400);
    ThinkTimeIteration = 0;
    IsSearchTimeout = 0;
    IsDeepeningDone = 0;
    IdxDeepening = 1;
    BestMove = "";
    BestSearchEvalRes = "";
    Repeat Until (IsDeepeningDone == 1)
    {
        If (IsScratch3 == 1)
        {
            QuiescenceDepth = 6;
        }
        Else
        {
            QuiescenceDepth = (MaxSearchDepth - IdxDeepening);
        }
        ThinkTimeLimitSearch = ThinkTimeLimit;
        AWCount = 1;
        AWDelta = AWSize[AWCount];
        If ((1 == 0) And ((IdxDeepening > (6 - (IsScratch3 * 3))) And ((Not ((BestSearchEvalRes == ""))) And (abs(BestSearchEvalRes) < AbsMinCheckmateEval))))
        {
            AWAlpha = Operator.Round((BestSearchEvalRes - AWDelta));
            AWBeta = Operator.Round((BestSearchEvalRes + AWDelta));
        }
        Else
        {
            AWAlpha = -100000;
            AWBeta = 100000;
        }
        IsAWDone = 0;
        ThinkTimeIteration = (Sensing.DaysSince2000() * 86400);
        Repeat Until ((IsAWDone == 1) Or (IsSearchTimeout == 1))
        {
            Call Search(AWAlpha)(AWBeta)(1)((IdxDeepening + 1))((IdxDeepening == 1))(QuiescenceDepth)((1 == 1));
            Call Log(IdxDeepening)(": AW : ")(AWAlpha)(" : ")(AWBeta)(" : ")(SearchEvalResults[1])(Operator.Join(" : ", ((Not ((SearchEvalResults[1] == ""))) And ((Not ((SearchEvalResults[1] > AWAlpha))) Or (Not ((SearchEvalResults[1] < AWBeta)))))));
            If ((Not ((SearchEvalResults[1] == ""))) And ((Not ((SearchEvalResults[1] > AWAlpha))) Or (Not ((SearchEvalResults[1] < AWBeta)))))
            {
                AWCount += 1;
                If ((Not ((AWCount > List.Length(AWSize)))) And (abs(SearchEvalResults[1]) < AbsMinCheckmateEval))
                {
                    AWDelta = Operator.Round((AWDelta + AWSize[AWCount]));
                    If (Not ((SearchEvalResults[1] > AWAlpha)))
                    {
                        AWAlpha += (0 - AWDelta);
                        If (Not ((SearchEvalResults[1] > AWAlpha)))
                        {
                            AWAlpha = (SearchEvalResults[1] - AWDelta);
                        }
                    }
                    Else
                    {
                        AWBeta += AWDelta;
                        If (Not ((SearchEvalResults[1] < AWBeta)))
                        {
                            AWBeta = (SearchEvalResults[1] + AWDelta);
                        }
                    }
                }
                Else
                {
                    AWAlpha = -100000;
                    AWBeta = 100000;
                }
            }
            Else
            {
                IsAWDone = 1;
            }
        }
        If ((AWAlpha == -100000) And (AWBeta == 100000))
        {
            ThinkTimeIteration = ((Sensing.DaysSince2000() * 86400) - ThinkTimeIteration);
        }
        Else
        {
            ThinkTimeIteration = ThinkTimeLimit;
        }
        If (Not ((SearchMoveRes == "")))
        {
            If ((BestMove == "") Or List.ContainsItem(SearchRootMovesDone, BestMove))
            {
                BestMove = SearchMoveRes;
                BestSearchEvalRes = SearchEvalRes;
            }
            Call OnEvaluationChanged(BestSearchEvalRes);
        }
        If (((IsSearchTimeout == 1) Or (IdxDeepening == MaxSearchDepth)) Or (abs(BestSearchEvalRes) > (AbsMaxCheckmateEval - (IdxDeepening * 1000))))
        {
            IsDeepeningDone = 1;
        }
        Else
        {
            IdxDeepening += 1;
        }
    }
}

Define GetBoardString (warp=true)
{
    GetBoardStringRes = "";
    Idx = 1;
    Repeat (64)
    {
        GetBoardStringRes = Operator.Join(GetBoardStringRes, Operator.Join(Board[Idx], ","));
        Idx += 1;
    }
}

Define GetCurrentMove(num Depth) (warp=true)
{
    CurrentMove = Moves[(((Depth - 1) * MaxMovesPerGeneration) + MovesIdx[Depth])];
}

Define GetKingProtection(string KingIdx)(bool IsBlack) (warp=true)
{
    KingProtection = 0;
    KingRank = IdxToRank[KingIdx];
    KingFile = IdxToFile[KingIdx];
    If ((KingFile == 1) Or (KingFile == 3))
    {
        KingFile = 2;
    }
    If ((KingFile == 6) Or (KingFile == 8))
    {
        KingFile = 7;
    }
    If IsBlack
    {
        File = (KingFile - 1);
        Repeat (3)
        {
            WhitePawnForwardRank = PawnAdvancePerFile[(File + 8)];
            BlackPawnBackwardRank = PawnAdvancePerFile[(File + 16)];
            If ((BlackPawnBackwardRank > 0) And (KingRank < BlackPawnBackwardRank))
            {
                KingProtection += PawnShelter[(((File - 1) * 8) + BlackPawnBackwardRank)];
            }
            Else
            {
                If ((KingRank == BlackPawnBackwardRank) Or (Board[((KingIdx + 8) + (File - KingFile))] > 0))
                {
                    KingProtection += Operator.Round((PawnShelter[(((File - 1) * 8) + (BlackPawnBackwardRank + 1))] / 2));
                }
                Else
                {
                    KingProtection += PawnShelter[(((File - 1) * 8) + 1)];
                }
            }
            If (abs((IdxToFile[WhiteKingIdx] - File)) > 1)
            {
                If ((WhitePawnForwardRank > 0) And (KingRank < WhitePawnForwardRank))
                {
                    CurrentValue = (0 - PawnStorm[(((File - 1) * 8) + WhitePawnForwardRank)]);
                    If ((BlackPawnBackwardRank > 0) And (BlackPawnBackwardRank < WhitePawnForwardRank))
                    {
                        KingProtection += Operator.Round((CurrentValue * 0.5));
                    }
                    Else
                    {
                        KingProtection += CurrentValue;
                    }
                }
                Else
                {
                    KingProtection += (0 - PawnStorm[(((File - 1) * 8) + 1)]);
                }
            }
            File += 1;
        }
    }
    Else
    {
        File = (KingFile - 1);
        Repeat (3)
        {
            WhitePawnBackwardRank = PawnAdvancePerFile[File];
            BlackPawnForwardRank = PawnAdvancePerFile[(File + 24)];
            If ((WhitePawnBackwardRank > 0) And (KingRank > WhitePawnBackwardRank))
            {
                KingProtection += PawnShelter[(((File - 1) * 8) + (9 - WhitePawnBackwardRank))];
            }
            Else
            {
                If ((KingRank == WhitePawnBackwardRank) Or (Board[((KingIdx - 8) + (File - KingFile))] < 0))
                {
                    KingProtection += Operator.Round((PawnShelter[(((File - 1) * 8) + (9 - WhitePawnBackwardRank))] / 2));
                }
                Else
                {
                    KingProtection += PawnShelter[(((File - 1) * 8) + 1)];
                }
            }
            If (abs((IdxToFile[BlackKingIdx] - File)) > 1)
            {
                If ((BlackPawnForwardRank > 0) And (KingRank > BlackPawnForwardRank))
                {
                    CurrentValue = (0 - PawnStorm[(((File - 1) * 8) + (9 - BlackPawnForwardRank))]);
                    If ((WhitePawnBackwardRank > 0) And (WhitePawnBackwardRank > BlackPawnForwardRank))
                    {
                        KingProtection += Operator.Round((CurrentValue * 0.5));
                    }
                    Else
                    {
                        KingProtection += CurrentValue;
                    }
                }
                Else
                {
                    KingProtection += (0 - PawnStorm[(((File - 1) * 8) + 1)]);
                }
            }
            File += 1;
        }
    }
}

Define GetMoveNotation(num Move) (warp=true)
{
    Call GetVirtualMove(Move);
    MoveNotationRes = "";
    If ((VirtualMove == GoK_BlackKingsideCastling) Or (VirtualMove == GoK_WhiteKingsideCastling))
    {
        MoveNotationRes = "O-O";
        Stop(this script);
    }
    If ((VirtualMove == GoK_BlackQueensideCastling) Or (VirtualMove == GoK_WhiteQueensideCastling))
    {
        MoveNotationRes = "O-O-O";
        Stop(this script);
    }
    SourceIdx = floor((VirtualMove / 100));
    TargetIdx = floor((VirtualMove % 100));
    Piece = Board[floor((Move / 100))];
    If ((Piece == GoK_BlackBishop) Or (Piece == GoK_WhiteBishop))
    {
        MoveNotationRes = "B";
    }
    If ((Piece == GoK_BlackKing) Or (Piece == GoK_WhiteKing))
    {
        MoveNotationRes = "K";
    }
    If ((Piece == GoK_BlackRook) Or (Piece == GoK_WhiteRook))
    {
        MoveNotationRes = "R";
    }
    If ((Piece == GoK_BlackKnight) Or (Piece == GoK_WhiteKnight))
    {
        MoveNotationRes = "N";
    }
    If ((Piece == GoK_WhiteQueen) Or (Piece == GoK_BlackQueen))
    {
        MoveNotationRes = "Q";
    }
    X = IdxToFile[SourceIdx];
    Y = (9 - IdxToRank[SourceIdx]);
    MoveNotationRes = Operator.Join(MoveNotationRes, Operator.Join(Operator.LetterOf("abcdefgh", X), Y));
    If (Not ((Board[floor((Move % 100))] == 0)))
    {
        MoveNotationRes = Operator.Join(MoveNotationRes, "x");
    }
    X = IdxToFile[TargetIdx];
    Y = (9 - IdxToRank[TargetIdx]);
    MoveNotationRes = Operator.Join(MoveNotationRes, Operator.Join(Operator.LetterOf("abcdefgh", X), Y));
    If (Operator.LetterOf(VirtualMove, (Variable.Length(VirtualMove) - 1)) == ".")
    {
        If (Operator.LetterOf(VirtualMove, Variable.Length(VirtualMove)) == 1)
        {
            MoveNotationRes = Operator.Join(MoveNotationRes, "=Q");
        }
        If (Operator.LetterOf(VirtualMove, Variable.Length(VirtualMove)) == 2)
        {
            MoveNotationRes = Operator.Join(MoveNotationRes, "=R");
        }
        If (Operator.LetterOf(VirtualMove, Variable.Length(VirtualMove)) == 3)
        {
            MoveNotationRes = Operator.Join(MoveNotationRes, "=B");
        }
        If (Operator.LetterOf(VirtualMove, Variable.Length(VirtualMove)) == 4)
        {
            MoveNotationRes = Operator.Join(MoveNotationRes, "=N");
        }
    }
}

Define GetMoveScore(string SourcePieceParam)(string TargetPieceParam)(string FromIdx)(string ToIdx)(string Move)(string Depth) (warp=true)
{
    MoveScoreRes = 0;
    Factor = (((Depth % 2) * 2) - 1);
    Call //("1: Hash moves, handled by staged move generator / PickMove()");
    If (CheckedState[Depth] == 1)
    {
        Call //("2: Check evasions");
        If (abs(SourcePieceParam) == GoK_BlackKing)
        {
            MoveScoreRes = (9000000 * Factor);
            Stop(this script);
        }
        If (Operator.LetterOf(CheckedStateAttackLines[Depth], ToIdx) == 1)
        {
            MoveScoreRes = ((8900000 + Delta) * Factor);
            Stop(this script);
        }
    }
    If (Operator.LetterOf(Move, Variable.Length((Move - 1))) == ".")
    {
        Call //("Promotions");
        MoveScoreRes = ((7500000 - Operator.LetterOf(Move, Variable.Length(Move))) * Factor);
        Stop(this script);
    }
    If (Not ((TargetPieceParam == 0)))
    {
        MvvLvaScore = ((PieceIdxLookup[abs(TargetPieceParam)] * 100) + (7 - PieceIdxLookup[abs(SourcePieceParam)]));
        If (Quiescence[Depth] == 1)
        {
            MoveScoreRes = ((7000000 + MvvLvaScore) * Factor);
            Stop(this script);
        }
        Else
        {
            Call ClearMoveList((Depth + 2));
            Call AddMoveToList(Move)((Depth + 2));
            List.ReplaceItem(MovesIdx, (Depth + 2), 1);
            Call ApplyMoveLight((Depth + 2));
            Call SEE((Depth + 2));
            Call RevertMoveLight((Depth + 2));
            If (((SourcePieceParam > 0) And (Not ((SEE.Result < 0)))) Or ((SourcePieceParam < 0) And (Not ((SEE.Result > 0)))))
            {
                MoveScoreRes = ((7000000 + MvvLvaScore) * Factor);
                Stop(this script);
            }
            Else
            {
                MoveScoreRes = (MvvLvaScore * Factor);
                Stop(this script);
            }
        }
    }
    If (floor((Move / 100)) == 0)
    {
        Call //("Castling");
        MoveScoreRes = (1000 * Factor);
        Stop(this script);
    }
    Call //("4: Killer moves");
    Call PrepareCurrentKillerMoves(Depth);
    If (CurrentKillerMoves[1] == Move)
    {
        MoveScoreRes = (6000000 * Factor);
        Stop(this script);
    }
    Else
    {
        If (CurrentKillerMoves[2] == Move)
        {
            MoveScoreRes = (5000000 * Factor);
            Stop(this script);
        }
    }
    If (HistoryCounterMoves[AppliedMove[(Depth - 1)]] == Move)
    {
        Call //("5: Counter moves");
        MoveScoreRes = (4000000 * Factor);
        Stop(this script);
    }
    If (BoardAttackedCalculated[Depth] == 1)
    {
        CurrentValue = BoardAttackedByOpponentSnapshot[(((Depth - 1) * 100) + FromIdx)];
        CurrentValue2 = BoardAttackedByOpponentSnapshot[(((Depth - 1) * 100) + ToIdx)];
        If ((CurrentValue > 0) And (Not ((CurrentValue2 > 0))))
        {
            MoveScoreRes = (1000000 * Factor);
            Stop(this script);
        }
        If (1 == 0)
        {
            If ((CurrentValue2 > 0) And (Not ((CurrentValue > 0))))
            {
                MoveScoreRes = (-1000000 * Factor);
                Stop(this script);
            }
        }
    }
    CurrentValue = HistoryMoveScores[(((Depth % 2) * 1000) + ((PieceIdxLookup[abs(SourcePieceParam)] * 100) + ToIdx))];
    CurrentValue2 = MaxHistoryMoveScore[((Depth % 2) + 1)];
    If (((CurrentValue > 0) And (CurrentValue2 > 0)) And ((CurrentValue / CurrentValue2) > 0.02))
    {
        MoveScoreRes = (CurrentValue / CurrentValue2);
        MoveScoreRes = ((1000 + Operator.Round((MoveScoreRes * 100))) * Factor);
        Stop(this script);
    }
    MoveScoreRes = MoveToEvalDelta[((((SourcePieceParam > 0) * 60000) + (PieceIdxLookup[abs(SourcePieceParam)] * 10000)) + ((FromIdx * 100) + ToIdx))];
}

Define GetNormalizedMove(string Move) (warp=true)
{
    If (Move == floor(Move))
    {
        NormalzedMoveRes = MoveToZeroPaddedStr[(Move + 1)];
    }
    Else
    {
        NormalzedMoveRes = Operator.Join(MoveToZeroPaddedStr[(floor(Move) + 1)], Operator.Join(".", Operator.LetterOf(Move, Variable.Length(Move))));
    }
}

Define GetOpeningMoves (warp=true)
{
    List.DeleteItem(OpeningMovesRes, all);
    If (IsScratch3 == 0)
    {
        If ((List.Length(BoardHistoryHash) > 11) And (Operator.Random(1 , 2) == 2))
        {
            Stop(this script);
        }
    }
    Call GenerateMovesPublic(1);
    Call CreateCurrentBoardHash;
    Idx = 1;
    Repeat (List.Length(OpeningMovesMapHash))
    {
        If (OpeningMovesMapHash[Idx] == CurrentBoardHash)
        {
            If List.ContainsItem(Moves1, OpeningMovesMapMove[Idx])
            {
                List.Add(OpeningMovesRes, OpeningMovesMapMove[Idx]);
            }
        }
        Idx += 1;
    }
}

Define GetPiecePosEval(string Piece)(string Idx) (warp=true)
{
    PosEvalRes = 0;
    If ((Idx == 0) Or (Piece == 0))
    {
        Stop(this script);
    }
    If (Piece == GoK_BlackPawn)
    {
        If (IsEndgame == 0)
        {
            If (IsBlackCastlingPossible == 1)
            {
                PosEvalRes = PawnPieceSquarePreCastling[(65 - Idx)];
            }
            Else
            {
                PosEvalRes = PawnPieceSquare[(65 - Idx)];
            }
        }
        Else
        {
            PosEvalRes = PawnPieceSquareEndgame[(65 - Idx)];
        }
        Stop(this script);
    }
    If (Piece == GoK_WhitePawn)
    {
        If (IsEndgame == 0)
        {
            If (IsWhiteCastlingPossible == 1)
            {
                PosEvalRes = (0 - PawnPieceSquarePreCastling[Idx]);
            }
            Else
            {
                PosEvalRes = (0 - PawnPieceSquare[Idx]);
            }
        }
        Else
        {
            PosEvalRes = (0 - PawnPieceSquareEndgame[Idx]);
        }
        Stop(this script);
    }
    If (IsEndgame == 1)
    {
        If (Piece > GoK_BlackBishop)
        {
            If (Piece == GoK_BlackKing)
            {
                If ((BlackPawnCount == 0) And ((BlackQueenCount + BlackMinorCount) == 0))
                {
                    PosEvalRes = Operator.Round((1.33 * KingPieceSquareEndgame[(65 - Idx)]));
                    Stop(this script);
                }
                If ((WhitePawnCount == 0) And ((WhiteQueenCount + WhiteMinorCount) == 0))
                {
                    PosEvalRes = Operator.Round((0.67 * KingPieceSquareEndgame[(65 - Idx)]));
                    Stop(this script);
                }
                PosEvalRes = KingPieceSquareEndgame[(65 - Idx)];
                Stop(this script);
            }
            If (IsEndgame2 == 1)
            {
                Stop(this script);
            }
            If (Piece == GoK_BlackRook)
            {
                PosEvalRes = RookPieceSquareEndgame[(65 - Idx)];
                Stop(this script);
            }
            If (Piece == GoK_BlackQueen)
            {
                PosEvalRes = QueenPieceSquareEndgame[(65 - Idx)];
                Stop(this script);
            }
        }
        If (Piece > 0)
        {
            If (IsEndgame2 == 1)
            {
                Stop(this script);
            }
            If (Piece == GoK_BlackKnight)
            {
                PosEvalRes = KnightPieceSquareEndgame[(65 - Idx)];
                Stop(this script);
            }
            If (Piece == GoK_BlackBishop)
            {
                PosEvalRes = BishopPieceSquareEndgame[(65 - Idx)];
                Stop(this script);
            }
        }
        If (Piece < GoK_WhiteBishop)
        {
            If (Piece == GoK_WhiteKing)
            {
                If ((WhitePawnCount == 0) And ((WhiteQueenCount + WhiteMinorCount) == 0))
                {
                    PosEvalRes = Operator.Round((1.33 * (0 - KingPieceSquareEndgame[Idx])));
                    Stop(this script);
                }
                If ((BlackPawnCount == 0) And ((BlackQueenCount + BlackMinorCount) == 0))
                {
                    PosEvalRes = Operator.Round((0.67 * (0 - KingPieceSquareEndgame[Idx])));
                    Stop(this script);
                }
                PosEvalRes = (0 - KingPieceSquareEndgame[Idx]);
                Stop(this script);
            }
            If (IsEndgame2 == 1)
            {
                Stop(this script);
            }
            If (Piece == GoK_WhiteRook)
            {
                PosEvalRes = (0 - RookPieceSquareEndgame[Idx]);
                Stop(this script);
            }
            If (Piece == GoK_WhiteQueen)
            {
                PosEvalRes = (0 - QueenPieceSquareEndgame[Idx]);
                Stop(this script);
            }
        }
        If (Piece < 0)
        {
            If (IsEndgame2 == 1)
            {
                Stop(this script);
            }
            If (Piece == GoK_WhiteBishop)
            {
                PosEvalRes = (0 - BishopPieceSquareEndgame[Idx]);
                Stop(this script);
            }
            If (Piece == GoK_WhiteKnight)
            {
                PosEvalRes = (0 - KnightPieceSquareEndgame[Idx]);
                Stop(this script);
            }
        }
        Stop(this script);
    }
    If (Piece > GoK_BlackBishop)
    {
        If (Piece == GoK_BlackRook)
        {
            PosEvalRes = RookPieceSquare[(65 - Idx)];
            Stop(this script);
        }
        If (Piece == GoK_BlackQueen)
        {
            PosEvalRes = QueenPieceSquare[(65 - Idx)];
            Stop(this script);
        }
        If (Piece == GoK_BlackKing)
        {
            PosEvalRes = KingPieceSquare[(65 - Idx)];
            Stop(this script);
        }
    }
    If (Piece > 0)
    {
        If (Piece == GoK_BlackKnight)
        {
            PosEvalRes = KnightPieceSquare[(65 - Idx)];
            Stop(this script);
        }
        If (Piece == GoK_BlackBishop)
        {
            PosEvalRes = BishopPieceSquare[(65 - Idx)];
            Stop(this script);
        }
    }
    If (Piece < GoK_WhiteBishop)
    {
        If (Piece == GoK_WhiteRook)
        {
            PosEvalRes = (0 - RookPieceSquare[Idx]);
            Stop(this script);
        }
        If (Piece == GoK_WhiteQueen)
        {
            PosEvalRes = (0 - QueenPieceSquare[Idx]);
            Stop(this script);
        }
        If (Piece == GoK_WhiteKing)
        {
            PosEvalRes = (0 - KingPieceSquare[Idx]);
            Stop(this script);
        }
    }
    If (Piece < 0)
    {
        If (Piece == GoK_WhiteBishop)
        {
            PosEvalRes = (0 - BishopPieceSquare[Idx]);
            Stop(this script);
        }
        If (Piece == GoK_WhiteKnight)
        {
            PosEvalRes = (0 - KnightPieceSquare[Idx]);
            Stop(this script);
        }
    }
}

Define GetPiecePosHash(string Piece)(string Pos) (warp=true)
{
    PiecePosHash = 0;
    If ((Not ((Pos > 0))) Or (Piece == 0))
    {
        Stop(this script);
    }
    If (Piece > 0)
    {
        PiecePosHash = PosPieceHashLookup[((64 * (PieceIdxLookup[Piece] - 1)) + Pos)];
    }
    Else
    {
        PiecePosHash = PosPieceHashLookup[(384 + ((64 * (PieceIdxLookup[abs(Piece)] - 1)) + Pos))];
    }
}

Define GetRepetitionCount (warp=true)
{
    RepetitionCountRes = 1;
    Idx = (List.Length(BoardHistory) - 2);
    Repeat Until (Idx < 1)
    {
        If (BoardHistory[Idx] == BoardHistory[List.Length(BoardHistory)])
        {
            RepetitionCountRes += 1;
        }
        Idx += -2;
    }
}

Define GetSubstring(string Text)(num FromIdx)(num ToIdx) (warp=true)
{
    SubstringRes = "";
    IdxString = FromIdx;
    Repeat (((ToIdx - FromIdx) + 1))
    {
        SubstringRes = Operator.Join(SubstringRes, Operator.LetterOf(Text, IdxString));
        IdxString += 1;
    }
}

Define GetSubstringLeft(string Text)(num Count) (warp=true)
{
    Call GetSubstring(Text)(1)(Count);
}

Define GetSubstringRight(string Text)(num Count) (warp=true)
{
    Call GetSubstring(Text)(((Variable.Length(Text) - Count) + 1))(Variable.Length(Text));
}

Define GetTargetIdx(num SourceIdx)(num DeltaX)(num DeltaY) (warp=true)
{
    GetTargetIdxRes = -1;
    X = (IdxToFile[SourceIdx] + DeltaX);
    If ((X > 0) And (X < 9))
    {
        Y = (IdxToRank[SourceIdx] + DeltaY);
        If ((Y > 0) And (Y < 9))
        {
            GetTargetIdxRes = (X + ((Y - 1) * 8));
        }
    }
}

Define GetTTNodeHash(string BoardHash)(string Depth) (warp=true)
{
    TTNodeHashResult = ((Depth % 2) + 1);
    TTNodeHashResult = ((TTNodeHashResult * 97) + (EnPassantTarget[Depth] + 1));
    TTNodeHashResult = ((TTNodeHashResult * 97) + (CastlingState[Depth] + 1));
    TTNodeHashResult = ((TTNodeHashResult * 97) + (BoardHash + 1));
}

Define GetVirtualMove(num Move) (warp=true)
{
    If (IsPlayerBlack == 0)
    {
        VirtualMove = Move;
    }
    Else
    {
        If (Not ((floor((Move / 100)) == 0)))
        {
            VirtualMove = (((65 - floor((Move / 100))) * 100) + (65 - floor((Move % 100))));
            If (Operator.LetterOf(Move, (Variable.Length(Move) - 1)) == ".")
            {
                VirtualMove = (VirtualMove + (0.1 * Operator.LetterOf(Move, Variable.Length(Move))));
            }
        }
        Else
        {
            If (Move == GoK_BlackKingsideCastling)
            {
                VirtualMove = GoK_WhiteKingsideCastling;
            }
            Else
            {
                If (Move == GoK_BlackQueensideCastling)
                {
                    VirtualMove = GoK_WhiteQueensideCastling;
                }
                Else
                {
                    If (Move == GoK_WhiteKingsideCastling)
                    {
                        VirtualMove = GoK_BlackKingsideCastling;
                    }
                    Else
                    {
                        If (Move == GoK_WhiteQueensideCastling)
                        {
                            VirtualMove = GoK_BlackQueensideCastling;
                        }
                    }
                }
            }
        }
    }
}

Define ImportBoard(string ImpBoard) (warp=false)
{
    Call EnterExecution;
    Call ExportBoardFEN((IsPlayerBlack == 1))((1 == 1));
    Call ImportBoardFEN(ImpBoard);
    Call CalcBoardStats;
    If ((BlackKingIdx == "") Or (WhiteKingIdx == ""))
    {
        Call SayAsync("Invalid FEN data")(5);
        Call ImportBoardFEN(ExportDataFEN);
        Call CalcBoardStats;
    }
    Else
    {
        Stg_FromSquareIdx = -1;
        Stg_ToSquareIdx = -1;
        Event.BroadcastAndWait("Stg_FromSquareSelected");
        Event.BroadcastAndWait("Stg_ToSquareSelected");
        IsImportedBoard = 1;
        HasWhiteKingMoved = 0;
        HasBlackKingMoved = 0;
        HasWhiteCastled = 0;
        HasBlackCastled = 0;
        HasWhiteRookKSMoved = 0;
        HasWhiteRookQSMoved = 0;
        HasBlackRookKSMoved = 0;
        HasBlackRookQSMoved = 0;
        GameMoves = "";
        List.DeleteItem(BoardHistory, all);
        List.DeleteItem(BoardHistoryHash, all);
        List.DeleteItem(BoardHistoryMetaState, all);
        List.DeleteItem(BoardHistoryWasEngineMove, all);
        List.DeleteItem(GameMovesAN, all);
        If (Not ((Board[VirtualBoard[1]] == GoK_BlackRook)))
        {
            HasBlackRookQSMoved = 1;
        }
        If (Not ((Board[VirtualBoard[5]] == GoK_BlackKing)))
        {
            HasBlackKingMoved = 1;
        }
        If (Not ((Board[VirtualBoard[8]] == GoK_BlackRook)))
        {
            HasBlackRookKSMoved = 1;
        }
        If (Not ((Board[VirtualBoard[57]] == GoK_WhiteRook)))
        {
            HasWhiteRookQSMoved = 1;
        }
        If (Not ((Board[VirtualBoard[61]] == GoK_WhiteKing)))
        {
            HasWhiteKingMoved = 1;
        }
        If (Not ((Board[VirtualBoard[64]] == GoK_WhiteRook)))
        {
            HasWhiteRookKSMoved = 1;
        }
        Call InitHIstoryScores;
        Call AddBoardToHistory("");
        Call DrawBoardAndWait;
        GoK_IsGameSuspended = 0;
        Call CalcBoardAttackedByMoveChecked(1);
        Call CalcBoardAttackedByMoveChecked(2);
        IdxString += 1;
        CurrentValue = Operator.LetterOf(ImpBoard, IdxString);
        If (((CurrentValue == "B") And (IsPlayerBlack == 0)) Or ((CurrentValue == "W") And (IsPlayerBlack == 1)))
        {
            If (IsWhiteChecked == 1)
            {
                Call SayAsync("Checkmate!")(5);
                GoK_IsGameSuspended = 1;
            }
            Else
            {
                Call IsDrawByStalemate(1);
                If (IsDrawRes == 1)
                {
                    Call SayAsync("Draw!")(5);
                    GoK_IsGameSuspended = 1;
                }
                Else
                {
                    Call ExecuteEngineMove;
                }
            }
        }
        Else
        {
            If (((CurrentValue == "W") And (IsPlayerBlack == 0)) Or ((CurrentValue == "B") And (IsPlayerBlack == 1)))
            {
                If (IsBlackChecked == 1)
                {
                    Call SayAsync("Checkmate!")(5);
                    GoK_IsGameSuspended = 1;
                }
                Else
                {
                    Call IsDrawByStalemate(2);
                    If (IsDrawRes == 1)
                    {
                        Call SayAsync("Draw!")(5);
                        GoK_IsGameSuspended = 1;
                    }
                }
            }
        }
    }
    Call ExitExecution;
}

Define ImportBoardFEN(string ImpBoard) (warp=false)
{
    Idx = 1;
    Repeat (64)
    {
        List.ReplaceItem(Board, Idx, 0);
        Idx += 1;
    }
    If (IsPlayerBlack == 0)
    {
        Idx = 1;
        IdxInc = 1;
    }
    Else
    {
        Idx = 64;
        IdxInc = -1;
    }
    IdxString = 1;
    Repeat Until (((Idx > 64) Or (Idx < 1)) Or (IdxString > Variable.Length(ImpBoard)))
    {
        CurrentValue = Operator.LetterOf(ImpBoard, IdxString);
        If ((Not ((CurrentValue < "A"))) And (Not ((CurrentValue > "Z"))))
        {
            Piece = 0;
            If (CurrentValue == "P")
            {
                Piece = GoK_BlackPawn;
            }
            If (CurrentValue == "N")
            {
                Piece = GoK_BlackKnight;
            }
            If (CurrentValue == "B")
            {
                Piece = GoK_BlackBishop;
            }
            If (CurrentValue == "R")
            {
                Piece = GoK_BlackRook;
            }
            If (CurrentValue == "Q")
            {
                Piece = GoK_BlackQueen;
            }
            If (CurrentValue == "K")
            {
                Piece = GoK_BlackKing;
            }
            Call IsLowerCase(CurrentValue);
            If (IsLowerCaseRes == 0)
            {
                Piece = (Piece * -1);
            }
            If (IsPlayerBlack == 1)
            {
                Piece = (Piece * -1);
            }
            List.ReplaceItem(Board, Idx, Piece);
            Idx += IdxInc;
        }
        Else
        {
            If ((Not ((CurrentValue < 0))) And (Not ((CurrentValue > 9))))
            {
                Repeat (CurrentValue)
                {
                    List.ReplaceItem(Board, Idx, 0);
                    Idx += IdxInc;
                }
            }
            Else
            {
                If (CurrentValue == "/")
                {
                    Repeat Until ((((Idx % 8) == 1) And (IsPlayerBlack == 0)) Or (((Idx % 8) == 0) And (IsPlayerBlack == 1)))
                    {
                        List.ReplaceItem(Board, Idx, 0);
                        Idx += IdxInc;
                    }
                }
            }
        }
        IdxString += 1;
    }
}

Define ImportBoardImpl(string ImpBoard) (warp=true)
{
    Idx = 1;
    IdxString = 1;
    Piece = "";
    Repeat Until (IdxString > Variable.Length(ImpBoard))
    {
        If (Operator.LetterOf(ImpBoard, IdxString) == ",")
        {
            List.ReplaceItem(Board, Idx, Piece);
            Idx += 1;
            Piece = "";
        }
        Else
        {
            Piece = Operator.Join(Piece, Operator.LetterOf(ImpBoard, IdxString));
        }
        IdxString += 1;
    }
}

Define InitBoard (warp=true)
{
    PV = "";
    Stg_FromSquareIdx = -1;
    Stg_ToSquareIdx = -1;
    ProfilerMode = 0;
    DebugMode = 0;
    TimeControl = 0;
    PlayingMode = 0;
    MoveFromIdx = -1;
    MoveToIdx = -1;
    GoK_ProgressValue = 0;
    GoK_EvaluationValue = 0;
    IsAdvisorEnabled = 1;
    IsInUndo = 0;
    IsBlockProfilerEnabled = 0;
    IsEndgame = 0;
    IsEndgame2 = 0;
    IsImportedBoard = 0;
    GoK_BlackKingsideCastling = 90;
    GoK_WhiteKingsideCastling = 92;
    GoK_BlackQueensideCastling = 91;
    GoK_WhiteQueensideCastling = 93;
    HasBlackCastled = 0;
    HasWhiteKingMoved = 0;
    HasWhiteCastled = 0;
    HasBlackKingMoved = 0;
    HasWhiteRookKSMoved = 0;
    HasWhiteRookQSMoved = 0;
    HasBlackRookKSMoved = 0;
    HasBlackRookQSMoved = 0;
    GameMoves = "";
    GoK_IsGameSuspended = 0;
    PrevProgressUpdate = 0;
    GoK_Empty = 0;
    GoK_WhiteKing = -50000;
    GoK_WhiteQueen = -936;
    GoK_WhiteRook = -512;
    GoK_WhiteBishop = -297;
    GoK_WhiteKnight = -281;
    GoK_WhitePawn = -114;
    GoK_BlackKing = 50000;
    GoK_BlackQueen = 936;
    GoK_BlackRook = 512;
    GoK_BlackBishop = 297;
    GoK_BlackKnight = 281;
    GoK_BlackPawn = 114;
    AbsMinCheckmateEval = (GoK_BlackKing - 10000);
    AbsMaxCheckmateEval = 97000;
    DrawByRepetitionEval = -49.9;
    MaxPly1DeepeningMoveOrderScore = 9999999;
    MaxMoveOrderScore = 9999999;
    MaxSearchDepthStackFrames = 40;
    MaxMovesPerGeneration = 300;
    Call InitCoordLookup;
    Call FillBoard;
    List.DeleteAll(PieceIdxLookup);
    Idx = 1;
    Repeat (GoK_BlackKing)
    {
        List.Add(PieceIdxLookup, "");
        Idx += 1;
    }
    List.ReplaceItem(PieceIdxLookup, GoK_BlackPawn, 1);
    List.ReplaceItem(PieceIdxLookup, GoK_BlackKnight, 2);
    List.ReplaceItem(PieceIdxLookup, GoK_BlackBishop, 3);
    List.ReplaceItem(PieceIdxLookup, GoK_BlackRook, 4);
    List.ReplaceItem(PieceIdxLookup, GoK_BlackQueen, 5);
    List.ReplaceItem(PieceIdxLookup, GoK_BlackKing, 6);
    CharsUpperCase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    List.DeleteItem(CharsUpperCaseList, all);
    Idx = 1;
    Repeat (List.Length(CharsUpperCaseList))
    {
        List.Add(CharsUpperCaseList, Operator.LetterOf(CharsUpperCase, Idx));
        Idx += 1;
    }
    List.DeleteItem(KillerMoves, all);
    Repeat ((2 * MaxSearchDepthStackFrames))
    {
        List.Add(KillerMoves, "");
    }
    List.DeleteItem(HistoryMoveScores, all);
    Repeat (2000)
    {
        List.Add(HistoryMoveScores, 0);
    }
    List.DeleteItem(MaxHistoryMoveScore, all);
    Repeat (2)
    {
        List.Add(MaxHistoryMoveScore, 0);
    }
    List.DeleteItem(HistoryCounterMoves, all);
    Repeat (10000)
    {
        List.Add(HistoryCounterMoves, "");
    }
    List.DeleteItem(BoardHistory, all);
    List.DeleteItem(BoardHistoryHash, all);
    List.DeleteItem(BoardHistoryMetaState, all);
    List.DeleteItem(BoardHistoryWasEngineMove, all);
    List.DeleteItem(GameMovesAN, all);
    List.DeleteItem(BoardAttackedByWhite, all);
    List.DeleteItem(BoardAttackedByBlack, all);
    List.DeleteItem(PieceMobility, all);
    List.DeleteItem(BoardAttackedByWhitePiece, all);
    List.DeleteItem(BoardAttackedByBlackPiece, all);
    List.DeleteItem(BoardAttackedByOpponentSnapshot, all);
    List.DeleteItem(BoardAttackedByOpponentPieceSnapshot, all);
    List.DeleteItem(BoardAttackedByOwnSnapshot, all);
    List.DeleteItem(BoardAttackedByOwnPieceSnapshot, all);
    Repeat (64)
    {
        List.Add(BoardAttackedByWhite, 0);
        List.Add(BoardAttackedByBlack, 0);
        List.Add(PieceMobility, 0);
        List.Add(BoardAttackedByWhitePiece, 0);
        List.Add(BoardAttackedByBlackPiece, 0);
    }
    Repeat ((100 * MaxSearchDepthStackFrames))
    {
        List.Add(BoardAttackedByOpponentSnapshot, 0);
        List.Add(BoardAttackedByOpponentPieceSnapshot, 0);
        List.Add(BoardAttackedByOwnSnapshot, 0);
        List.Add(BoardAttackedByOwnPieceSnapshot, 0);
    }
    Call //("Due to the lack of local variables in Scratch, we emulate a method stack for recursive Minimax using lists");
    List.DeleteItem(Alphas, all);
    List.DeleteItem(Betas, all);
    List.DeleteItem(AlphasOld, all);
    List.DeleteItem(BetasOld, all);
    List.DeleteItem(SearchEvalResults, all);
    List.DeleteItem(SearchEvalResultsIsDynamic, all);
    List.DeleteItem(MovesCount, all);
    List.DeleteItem(MovesIdx, all);
    List.DeleteItem(BestMoveListIdx, all);
    List.DeleteItem(TargetPieces, all);
    List.DeleteItem(PreviousBoardHash, all);
    List.DeleteItem(PreviousBoardHashKP, all);
    List.DeleteItem(NodeTypes, all);
    List.DeleteItem(PickMoveRes, all);
    List.DeleteItem(PickPhase, all);
    List.DeleteItem(PickedMoves, all);
    List.DeleteItem(PickedMoveCount, all);
    List.DeleteItem(BestMoves, all);
    List.DeleteItem(CheckedState, all);
    List.DeleteItem(CheckedStateAttackLines, all);
    List.DeleteItem(PromotionPieces, all);
    List.DeleteItem(TargetPiecesIdx, all);
    List.DeleteItem(PosEvalDelta, all);
    List.DeleteItem(BoardAttackedCalculated, all);
    List.DeleteItem(PutsInCheck, all);
    List.DeleteItem(EvalExtended1, all);
    List.DeleteItem(SearchExtension, all);
    List.DeleteItem(SourcePieces, all);
    List.DeleteItem(EvalExtended2, all);
    List.DeleteItem(EvalExtended3, all);
    List.DeleteItem(BlackMobBonus, all);
    List.DeleteItem(WhiteMobBonus, all);
    List.DeleteItem(AppliedMove, all);
    List.DeleteItem(CapturesDeltaSum, all);
    List.DeleteItem(PosEvalDeltaSum, all);
    List.DeleteItem(SearchExtensionTagged, all);
    List.DeleteItem(Quiescence, all);
    List.DeleteItem(EnPassantTarget, all);
    List.DeleteItem(PassedWhitePawnOnEndgame, all);
    List.DeleteItem(CastlingState, all);
    List.DeleteItem(PawnShelterCapture, all);
    List.DeleteItem(BoardEval, all);
    List.DeleteItem(QuiescentCheckMoveCount, all);
    List.DeleteItem(HashMoveMetaData, all);
    List.DeleteItem(HashMove, all);
    Repeat (MaxSearchDepthStackFrames)
    {
        List.Add(Alphas, "");
        List.Add(Betas, "");
        List.Add(AlphasOld, "");
        List.Add(BetasOld, "");
        List.Add(SearchEvalResults, "");
        List.Add(SearchEvalResultsIsDynamic, "");
        List.Add(MovesCount, 0);
        List.Add(MovesIdx, "");
        List.Add(BestMoveListIdx, "");
        List.Add(TargetPieces, "");
        List.Add(PreviousBoardHash, 0);
        List.Add(PreviousBoardHashKP, 0);
        List.Add(NodeTypes, "");
        List.Add(PickMoveRes, "");
        List.Add(PickPhase, "");
        List.Add(PickedMoves, "");
        List.Add(PickedMoveCount, 0);
        List.Add(BestMoves, "");
        List.Add(CheckedState, "");
        List.Add(CheckedStateAttackLines, "");
        List.Add(PromotionPieces, "");
        List.Add(TargetPiecesIdx, "");
        List.Add(PosEvalDelta, "");
        List.Add(BoardAttackedCalculated, "");
        List.Add(PutsInCheck, "");
        List.Add(EvalExtended1, "");
        List.Add(SearchExtension, "");
        List.Add(SourcePieces, 0);
        List.Add(EvalExtended2, "");
        List.Add(EvalExtended3, "");
        List.Add(BlackMobBonus, "");
        List.Add(WhiteMobBonus, "");
        List.Add(AppliedMove, "");
        List.Add(CapturesDeltaSum, "");
        List.Add(PosEvalDeltaSum, "");
        List.Add(SearchExtensionTagged, "");
        List.Add(Quiescence, "");
        List.Add(EnPassantTarget, "");
        List.Add(PassedWhitePawnOnEndgame, 0);
        List.Add(CastlingState, 0);
        List.Add(PawnShelterCapture, 0);
        List.Add(BoardEval, "");
        List.Add(QuiescentCheckMoveCount, "");
        List.Add(HashMoveMetaData, "");
        List.Add(HashMove, "");
    }
    List.DeleteItem(PV, all);
    Repeat ((MaxSearchDepthStackFrames * MaxSearchDepthStackFrames))
    {
        List.Add(PV, 0);
    }
    List.DeleteItem(DepthEvalFactor, all);
    Repeat ((MaxSearchDepthStackFrames / 2))
    {
        List.Add(DepthEvalFactor, 1);
        List.Add(DepthEvalFactor, -1);
    }
    List.DeleteItem(CastlingStateLookup, all);
    Idx = 0;
    Repeat (256)
    {
        List.Add(CastlingStateLookup, Operator.Join(Operator.Join(Operator.Join((floor((Idx / 128)) % 2), (floor((Idx / 64)) % 2)), Operator.Join((floor((Idx / 32)) % 2), (floor((Idx / 16)) % 2))), Operator.Join(Operator.Join((floor((Idx / 8)) % 2), (floor((Idx / 4)) % 2)), Operator.Join((floor((Idx / 2)) % 2), (Idx % 2)))));
        Idx += 1;
    }
    List.DeleteItem(CastlingStatePow2, all);
    Idx = 128;
    Repeat (8)
    {
        List.Add(CastlingStatePow2, Idx);
        Idx = (Idx / 2);
    }
    List.DeleteItem(BlackPawnCount, all);
    List.DeleteItem(WhitePawnCount, all);
    Repeat (8)
    {
        List.Add(BlackPawnCount, 0);
        List.Add(WhitePawnCount, 0);
    }
    Call //("Generated moves are stores in per-ply segments within Moves list");
    List.DeleteAll(Moves);
    Repeat ((MaxMovesPerGeneration * MaxSearchDepthStackFrames))
    {
        List.Add(Moves, "");
    }
}

Define InitBoardPhase2 (warp=true)
{
    Call InitHashLookup;
    Call InitMoveLookup;
    Call InitMobilityBonusLookup;
    Call InitKingSafety;
    Call InitPieceSquareTables;
    Call CalcBoardStats;
    Call InitMovePosLookup((1 == 1));
    Call InitOpeningBook;
    Call InitChebyshev;
    Call NNUE_Init;
    Call InitHIstoryScores;
    Call AddBoardToHistory("");
}

Define InitChebyshev (warp=true)
{
    List.DeleteAll(ChebyshevDistance);
    Repeat (6500)
    {
        List.Add(ChebyshevDistance, "");
    }
    Idx = 1;
    Repeat (64)
    {
        Idx2 = 1;
        Repeat (64)
        {
            Delta = abs((IdxToRank[Idx] - IdxToRank[Idx2]));
            Delta2 = abs((IdxToFile[Idx] - IdxToFile[Idx2]));
            If (Delta > Delta2)
            {
                List.ReplaceItem(ChebyshevDistance, ((Idx * 100) + Idx2), Delta);
            }
            Else
            {
                List.ReplaceItem(ChebyshevDistance, ((Idx * 100) + Idx2), Delta2);
            }
            Idx2 += 1;
        }
        Idx += 1;
    }
}

Define InitCoordLookup (warp=true)
{
    List.DeleteItem(IdxToFile, all);
    List.DeleteItem(IdxToRank, all);
    Idx = 1;
    Repeat (64)
    {
        List.Add(IdxToFile, (((Idx - 1) % 8) + 1));
        List.Add(IdxToRank, ceiling((Idx / 8)));
        Idx += 1;
    }
}

Define InitHashLookup (warp=true)
{
    TT.CurrentAge = 0;
    List.DeleteItem(PosPieceHashLookup, all);
    Repeat (1024)
    {
        List.Add(PosPieceHashLookup, Operator.Random(1 , ((65536 * 65536) * (65536 * 1))));
    }
    Call ClearTT;
}

Define InitHIstoryScores (warp=true)
{
    Idx = 1;
    Repeat (List.Length(HistoryMoveScores))
    {
        List.ReplaceItem(HistoryMoveScores, Idx, 0);
        Idx += 1;
    }
    Idx = 1;
    Repeat (List.Length(MaxHistoryMoveScore))
    {
        List.ReplaceItem(MaxHistoryMoveScore, Idx, 0);
        Idx += 1;
    }
}

Define InitKingSafety (warp=true)
{
    List.DeleteItem(PawnStorm, all);
    Call LoadList(" 0, 22, 27, 19,  1, -24, -33, 0,  0, 31, 31, 19,  1, -19, -28, 0,  0, 22, 19, 10,  1, -19, -28, 0,  0,  0,  1,  1,  1, -15, -19, 0,  0,  0,  1,  1,  1, -15, -19, 0,  0, 22, 19, 10,  1, -19, -28, 0,  0, 31, 31, 19,  1, -19, -28, 0,  0, 22, 27, 19,  1, -24, -33, 0,")("PawnStorm");
    List.DeleteItem(PawnShelter, all);
    Call LoadList("-3, 38, 44, 22, 18, 8, 12, 0,    -20, 29, 8, -23, -14, -5, -30, 0,     5, 35, 11, -1, 15, 1, -21, 0,    -18, -6, -14, -24, -23, -31, -48, 0,    -18, -6, -14, -24, -23, -31, -48, 0,     5, 35, 11, -1, 15, 1, -21, 0,    -20, 29, 8, -23, -14, -5, -30, 0,   - 3, 38, 44, 22, 18, 8, 12, 0,")("PawnShelter");
}

Define InitMobilityBonusLookup (warp=true)
{
    List.DeleteItem(QueenMobilityBonus, all);
    List.DeleteItem(BishopMobilityBonus, all);
    List.DeleteItem(RookMobilityBonus, all);
    List.DeleteItem(KnightMobilityBonus, all);
    Call LoadList("-15,-10,0,0,1,2,3,4,4,5,5,6,6,7,7,7,8,8,9,9,10,11,11,11,12,12,12,13")("QueenMobilityBonus");
    Call LoadList("-6,-2,2,3,4,5,5,6,7,7,8,8,9,10")("BishopMobilityBonus");
    Call LoadList("-8,-6,-1,-1,0,0,1,1,2,2,3,3,4,5,6")("RookMobilityBonus");
    Call LoadList("-8,-6,-1,0,1,2,2,3,4")("KnightMobilityBonus");
}

Define InitMoveLookup (warp=true)
{
    List.DeleteItem(KnightMoveOffsets, all);
    List.DeleteItem(KingMoveOffsets, all);
    List.Add(KnightMoveOffsets, -2);
    List.Add(KnightMoveOffsets, -1);
    List.Add(KnightMoveOffsets, -2);
    List.Add(KnightMoveOffsets, 1);
    List.Add(KnightMoveOffsets, -1);
    List.Add(KnightMoveOffsets, -2);
    List.Add(KnightMoveOffsets, -1);
    List.Add(KnightMoveOffsets, 2);
    List.Add(KnightMoveOffsets, 1);
    List.Add(KnightMoveOffsets, -2);
    List.Add(KnightMoveOffsets, 1);
    List.Add(KnightMoveOffsets, 2);
    List.Add(KnightMoveOffsets, 2);
    List.Add(KnightMoveOffsets, -1);
    List.Add(KnightMoveOffsets, 2);
    List.Add(KnightMoveOffsets, 1);
    List.Add(KingMoveOffsets, -1);
    List.Add(KingMoveOffsets, -1);
    List.Add(KingMoveOffsets, -1);
    List.Add(KingMoveOffsets, 0);
    List.Add(KingMoveOffsets, -1);
    List.Add(KingMoveOffsets, 1);
    List.Add(KingMoveOffsets, 0);
    List.Add(KingMoveOffsets, -1);
    List.Add(KingMoveOffsets, 0);
    List.Add(KingMoveOffsets, 1);
    List.Add(KingMoveOffsets, 1);
    List.Add(KingMoveOffsets, -1);
    List.Add(KingMoveOffsets, 1);
    List.Add(KingMoveOffsets, 0);
    List.Add(KingMoveOffsets, 1);
    List.Add(KingMoveOffsets, 1);
    List.DeleteItem(MoveSlidingStraightListIdxToTargetIdx, all);
    List.DeleteItem(MoveCrossListIdxToTargetIdx, all);
    List.DeleteItem(MoveSlidingStraighOffsetIdxToDelta, all);
    List.DeleteItem(MoveCrossOffsetIdxToDelta, all);
    List.DeleteItem(MoveListOffsetToTargetIdxKnight, all);
    List.DeleteItem(MoveListOffsetToTargetIdxKing, all);
    List.DeleteItem(MoveSourceIdxToListOffsetNonSliding, all);
    List.DeleteItem(MoveSourceIdxToListOffsetSliding, all);
    List.Add(MoveSlidingStraighOffsetIdxToDelta, 1);
    List.Add(MoveSlidingStraighOffsetIdxToDelta, 0);
    List.Add(MoveSlidingStraighOffsetIdxToDelta, 0);
    List.Add(MoveSlidingStraighOffsetIdxToDelta, 1);
    List.Add(MoveSlidingStraighOffsetIdxToDelta, -1);
    List.Add(MoveSlidingStraighOffsetIdxToDelta, 0);
    List.Add(MoveSlidingStraighOffsetIdxToDelta, 0);
    List.Add(MoveSlidingStraighOffsetIdxToDelta, -1);
    List.Add(MoveCrossOffsetIdxToDelta, 1);
    List.Add(MoveCrossOffsetIdxToDelta, 1);
    List.Add(MoveCrossOffsetIdxToDelta, 1);
    List.Add(MoveCrossOffsetIdxToDelta, -1);
    List.Add(MoveCrossOffsetIdxToDelta, -1);
    List.Add(MoveCrossOffsetIdxToDelta, 1);
    List.Add(MoveCrossOffsetIdxToDelta, -1);
    List.Add(MoveCrossOffsetIdxToDelta, -1);
    Idx = 1;
    Repeat (64)
    {
        Idx2 = 1;
        Repeat (4)
        {
            X = IdxToFile[Idx];
            Y = IdxToRank[Idx];
            Repeat (8)
            {
                X += MoveSlidingStraighOffsetIdxToDelta[Idx2];
                Y += MoveSlidingStraighOffsetIdxToDelta[(Idx2 + 1)];
                List.Add(MoveSlidingStraightListIdxToTargetIdx, -1);
                If ((Y > 0) And (Y < 9))
                {
                    If ((X > 0) And (X < 9))
                    {
                        TargetIdx = (X + ((Y - 1) * 8));
                        List.ReplaceItem(MoveSlidingStraightListIdxToTargetIdx, List.Length(MoveSlidingStraightListIdxToTargetIdx), TargetIdx);
                    }
                }
            }
            Idx2 += 2;
        }
        Idx2 = 1;
        Repeat (4)
        {
            X = IdxToFile[Idx];
            Y = IdxToRank[Idx];
            Repeat (8)
            {
                X += MoveCrossOffsetIdxToDelta[Idx2];
                Y += MoveCrossOffsetIdxToDelta[(Idx2 + 1)];
                List.Add(MoveCrossListIdxToTargetIdx, -1);
                If ((Y > 0) And (Y < 9))
                {
                    If ((X > 0) And (X < 9))
                    {
                        TargetIdx = (X + ((Y - 1) * 8));
                        List.ReplaceItem(MoveCrossListIdxToTargetIdx, List.Length(MoveCrossListIdxToTargetIdx), TargetIdx);
                    }
                }
            }
            Idx2 += 2;
        }
        Idx += 1;
    }
    Idx = 1;
    Repeat (64)
    {
        List.Add(MoveSourceIdxToListOffsetNonSliding, ((Idx - 1) * 8));
        List.Add(MoveSourceIdxToListOffsetSliding, ((Idx - 1) * 32));
        Idx += 1;
    }
    Idx = 1;
    Repeat (64)
    {
        Idx2 = 1;
        Repeat (8)
        {
            Call GetTargetIdx(Idx)(KingMoveOffsets[Idx2])(KingMoveOffsets[(Idx2 + 1)]);
            If (Not ((GetTargetIdxRes == -1)))
            {
                List.Add(MoveListOffsetToTargetIdxKing, GetTargetIdxRes);
            }
            Idx2 += 2;
        }
        Repeat Until (List.Length(MoveListOffsetToTargetIdxKing) == (Idx * 8))
        {
            List.Add(MoveListOffsetToTargetIdxKing, -1);
        }
        Idx2 = 1;
        Repeat (8)
        {
            Call GetTargetIdx(Idx)(KnightMoveOffsets[Idx2])(KnightMoveOffsets[(Idx2 + 1)]);
            If (Not ((GetTargetIdxRes == -1)))
            {
                List.Add(MoveListOffsetToTargetIdxKnight, GetTargetIdxRes);
            }
            Idx2 += 2;
        }
        Repeat Until (List.Length(MoveListOffsetToTargetIdxKnight) == (Idx * 8))
        {
            List.Add(MoveListOffsetToTargetIdxKnight, -1);
        }
        Idx += 1;
    }
    List.DeleteItem(MoveToPathDelta, all);
    List.DeleteItem(MoveToPathStepInc, all);
    List.DeleteItem(MoveToZeroPaddedStr, all);
    Idx = 0;
    Repeat (10000)
    {
        If (Idx < 10)
        {
            List.Add(MoveToZeroPaddedStr, Operator.Join(000, Idx));
        }
        Else
        {
            If (Idx < 100)
            {
                List.Add(MoveToZeroPaddedStr, Operator.Join(00, Idx));
            }
            Else
            {
                If (Idx < 1000)
                {
                    List.Add(MoveToZeroPaddedStr, Operator.Join(0, Idx));
                }
                Else
                {
                    List.Add(MoveToZeroPaddedStr, Idx);
                }
            }
        }
        Idx += 1;
    }
    Repeat (10000)
    {
        List.Add(MoveToPathDelta, "");
        List.Add(MoveToPathStepInc, "");
    }
    Idx = 1;
    Repeat (64)
    {
        Idx2 = 1;
        Repeat (64)
        {
            X = (IdxToFile[Idx2] - IdxToFile[Idx]);
            Y = (IdxToRank[Idx2] - IdxToRank[Idx]);
            If ((Not ((Idx == Idx2))) And (((X == 0) Or (Y == 0)) Or (abs(X) == abs(Y))))
            {
                If (abs(X) > abs(Y))
                {
                    Delta = abs(X);
                }
                Else
                {
                    Delta = abs(Y);
                }
                List.ReplaceItem(MoveToPathDelta, ((Idx * 100) + Idx2), Delta);
                List.ReplaceItem(MoveToPathStepInc, ((Idx * 100) + Idx2), ((8 * (Y / Delta)) + (X / Delta)));
            }
            Idx2 += 1;
        }
        Idx += 1;
    }
}

Define InitMovePosLookup(bool Init) (warp=true)
{
    If (IsClassicEndgameEval == 0)
    {
        MetaState = "AI";
    }
    Else
    {
        MetaState = Operator.Join(IsBlackCastlingPossible, Operator.Join(IsWhiteCastlingPossible, Operator.Join(IsEndgame, IsEndgame2)));
        If (BlackQueenCount == 0)
        {
            MetaState = Operator.Join(MetaState, 0);
        }
        Else
        {
            MetaState = Operator.Join(MetaState, 1);
        }
        If (WhiteQueenCount == 0)
        {
            MetaState = Operator.Join(MetaState, 0);
        }
        Else
        {
            MetaState = Operator.Join(MetaState, 1);
        }
        If (BlackMinorCount == 0)
        {
            MetaState = Operator.Join(MetaState, 0);
        }
        Else
        {
            MetaState = Operator.Join(MetaState, 1);
        }
        If (WhiteMinorCount == 0)
        {
            MetaState = Operator.Join(MetaState, 0);
        }
        Else
        {
            MetaState = Operator.Join(MetaState, 1);
        }
        If (BlackPawnCount == 0)
        {
            MetaState = Operator.Join(MetaState, 0);
        }
        Else
        {
            MetaState = Operator.Join(MetaState, 1);
        }
        If (WhitePawnCount == 0)
        {
            MetaState = Operator.Join(MetaState, 0);
        }
        Else
        {
            MetaState = Operator.Join(MetaState, 1);
        }
    }
    If (Init Or (Not ((MetaState == PrevMetaState))))
    {
        PrevMetaState = MetaState;
        If (Not (Init))
        {
            If (IsClassicEndgameEval == 1)
            {
                Idx = 1;
                Repeat (List.Length(TTNodeEval))
                {
                    List.ReplaceItem(TTNodeEval, Idx, "");
                    List.ReplaceItem(TTNodeEvalIsDynamic, Idx, "");
                    List.ReplaceItem(TTNodeType, Idx, "");
                    Idx += 1;
                }
                Idx = 1;
                Repeat (List.Length(TTBoardEvalSum))
                {
                    List.ReplaceItem(TTBoardEvalSum, Idx, "");
                    List.ReplaceItem(TTBoardEvalIsDynamic, Idx, "");
                    Idx += 1;
                }
            }
        }
        If ((Not ((List.Length(MoveToHash) == 140000))) Or (Not ((List.Length(MoveToEvalDelta) == 140000))))
        {
            List.DeleteAll(MoveToHash);
            List.DeleteAll(MoveToEvalDelta);
            Repeat (140000)
            {
                List.Add(MoveToEvalDelta, "");
                List.Add(MoveToHash, 0);
            }
        }
        List.DeleteAll(Pieces);
        List.Add(Pieces, GoK_BlackKing);
        List.Add(Pieces, GoK_BlackQueen);
        List.Add(Pieces, GoK_BlackRook);
        List.Add(Pieces, GoK_BlackBishop);
        List.Add(Pieces, GoK_BlackKnight);
        List.Add(Pieces, GoK_BlackPawn);
        List.Add(Pieces, GoK_WhiteKing);
        List.Add(Pieces, GoK_WhiteQueen);
        List.Add(Pieces, GoK_WhiteRook);
        List.Add(Pieces, GoK_WhiteBishop);
        List.Add(Pieces, GoK_WhiteKnight);
        List.Add(Pieces, GoK_WhitePawn);
        Caller.Idx = 1;
        Repeat (List.Length(Pieces))
        {
            SourcePiece = Pieces[Caller.Idx];
            IsSlidingPiece = 0;
            If (abs(SourcePiece) == GoK_BlackBishop)
            {
                IsSlidingPiece = 1;
            }
            If (abs(SourcePiece) == GoK_BlackRook)
            {
                IsSlidingPiece = 2;
            }
            If (abs(SourcePiece) == GoK_BlackQueen)
            {
                IsSlidingPiece = 3;
            }
            SourceIdx = 0;
            Repeat (65)
            {
                File = IdxToFile[SourceIdx];
                Rank = IdxToRank[SourceIdx];
                Call GetPiecePosEval(SourcePiece)(SourceIdx);
                PosEvalRes2 = PosEvalRes;
                Call GetPiecePosHash(SourcePiece)(SourceIdx);
                PiecePosHash2 = PiecePosHash;
                TargetIdx = 0;
                Repeat (65)
                {
                    IsLegalMove = 0;
                    If (((Not ((SourceIdx == 0))) And (Not ((TargetIdx == 0)))) And (Not ((SourceIdx == TargetIdx))))
                    {
                        X = abs((IdxToFile[TargetIdx] - File));
                        Y = abs((IdxToRank[TargetIdx] - Rank));
                        If (IsSlidingPiece == 0)
                        {
                            If (((X < 2) And (Y < 3)) Or ((X < 3) And (Y < 2)))
                            {
                                If (SourcePiece == GoK_BlackPawn)
                                {
                                    If (((IdxToRank[TargetIdx] - Rank) == 1) And (X < 2))
                                    {
                                        IsLegalMove = 1;
                                    }
                                    Else
                                    {
                                        If ((Rank == 2) And ((TargetIdx - SourceIdx) == 16))
                                        {
                                            IsLegalMove = 1;
                                        }
                                    }
                                }
                                Else
                                {
                                    If (SourcePiece == GoK_WhitePawn)
                                    {
                                        If (((IdxToRank[TargetIdx] - Rank) == -1) And (X < 2))
                                        {
                                            IsLegalMove = 1;
                                        }
                                        Else
                                        {
                                            If ((Rank == 7) And ((TargetIdx - SourceIdx) == -16))
                                            {
                                                IsLegalMove = 1;
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (abs(SourcePiece) == GoK_BlackKing)
                                        {
                                            If (((X == 1) And (Y < 2)) Or ((Y == 1) And (X < 2)))
                                            {
                                                IsLegalMove = 1;
                                            }
                                        }
                                        Else
                                        {
                                            If (abs(SourcePiece) == GoK_BlackKnight)
                                            {
                                                If (((X == 1) And (Y == 2)) Or ((X == 2) And (Y == 1)))
                                                {
                                                    IsLegalMove = 1;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        Else
                        {
                            If ((X == 0) Or (Y == 0))
                            {
                                If (IsSlidingPiece > 1)
                                {
                                    IsLegalMove = 1;
                                }
                            }
                            Else
                            {
                                If (X == Y)
                                {
                                    If (Not ((IsSlidingPiece == 2)))
                                    {
                                        IsLegalMove = 1;
                                    }
                                }
                            }
                        }
                    }
                    If ((IsLegalMove == 1) Or ((SourceIdx == 0) Or (TargetIdx == 0)))
                    {
                        Call GetPiecePosEval(SourcePiece)(TargetIdx);
                        Call GetPiecePosHash(SourcePiece)(TargetIdx);
                        Idx = ((PieceIdxLookup[abs(SourcePiece)] * 10000) + ((SourceIdx * 100) + TargetIdx));
                        If (SourcePiece > 0)
                        {
                            Idx += 60000;
                        }
                        List.ReplaceItem(MoveToEvalDelta, Idx, (PosEvalRes - PosEvalRes2));
                        List.ReplaceItem(MoveToHash, Idx, (PiecePosHash - PiecePosHash2));
                    }
                    TargetIdx += 1;
                }
                SourceIdx += 1;
            }
            Caller.Idx += 1;
        }
    }
}

Define InitOpeningBook (warp=true)
{
    List.DeleteItem(OpeningMoves, all);
    Idx = 1;
    Repeat (List.Length(OpeningMovesNeutral))
    {
        List.Add(OpeningMoves, OpeningMovesNeutral[Idx]);
        Idx += 1;
    }
    If (IsPlayerBlack == 1)
    {
        Idx = 1;
        Repeat (List.Length(OpeningMovesWhite))
        {
            List.Add(OpeningMoves, OpeningMovesWhite[Idx]);
            Idx += 1;
        }
    }
    Else
    {
        Idx = 1;
        Repeat (List.Length(OpeningMovesBlack))
        {
            List.Add(OpeningMoves, OpeningMovesBlack[Idx]);
            Idx += 1;
        }
    }
    If (IsPlayerBlack == 1)
    {
        Idx = 1;
        Repeat (List.Length(OpeningMoves))
        {
            CurrentValue = OpeningMoves[Idx];
            CurrentValue2 = "";
            Idx2 = 1;
            Repeat ((Variable.Length(CurrentValue) / 4))
            {
                Caller.CurrentMove = Operator.Join(Operator.Join(Operator.LetterOf(CurrentValue, Idx2), Operator.LetterOf(CurrentValue, (Idx2 + 1))), Operator.Join(Operator.LetterOf(CurrentValue, (Idx2 + 2)), Operator.LetterOf(CurrentValue, (Idx2 + 3))));
                Call GetVirtualMove(Caller.CurrentMove);
                CurrentValue2 = Operator.Join(CurrentValue2, MoveToZeroPaddedStr[(floor(VirtualMove) + 1)]);
                Idx2 += 4;
            }
            If ((Operator.Join(Operator.LetterOf(CurrentValue2, 1), Operator.LetterOf(CurrentValue2, 2)) == 9) Or (Operator.Join(Operator.LetterOf(CurrentValue2, 1), Operator.LetterOf(CurrentValue2, 2)) == 16))
            {
                List.ReplaceItem(OpeningMoves, Idx, "");
            }
            Else
            {
                List.ReplaceItem(OpeningMoves, Idx, CurrentValue2);
            }
            Idx += 1;
        }
    }
    Call InitOpeningMovesMap;
}

Define InitOpeningMovesMap (warp=true)
{
    List.DeleteAll(OpeningMovesMapHash);
    List.DeleteAll(OpeningMovesMapMove);
    List.DeleteAll(OpeningMovesMapStack);
    Repeat (List.Length(OpeningMoves))
    {
        List.Add(OpeningMovesMapStack, 1);
    }
    Call CreateCurrentBoardHash;
    Call InitOpeningMovesMapImpl((1 + IsPlayerBlack))(0)("")((1 == 1));
}

Define InitOpeningMovesMapImpl(string Depth)(string GameMovesLen)(string Move)(bool Init) (warp=true)
{
    List.DeleteAll(OpeningMovesRes);
    Idx = 1;
    Repeat (List.Length(OpeningMovesMapStack))
    {
        IsEqual = 0;
        CurrentValue = OpeningMoves[Idx];
        If ((OpeningMovesMapStack[Idx] % 2) == 1)
        {
            IsEqual = 1;
            IdxString = 1;
            If (Not (Init))
            {
                Repeat Until ((IsEqual == 0) Or (IdxString > 4))
                {
                    If (Not ((Operator.LetterOf(Move, IdxString) == Operator.LetterOf(CurrentValue, (GameMovesLen + IdxString)))))
                    {
                        IsEqual = 0;
                    }
                    IdxString += 1;
                }
            }
        }
        If (IsEqual == 1)
        {
            Caller.CurrentMove = Operator.Join(Operator.Join(Operator.LetterOf(CurrentValue, (GameMovesLen + IdxString)), Operator.LetterOf(CurrentValue, ((GameMovesLen + IdxString) + 1))), Operator.Join(Operator.LetterOf(CurrentValue, ((GameMovesLen + IdxString) + 2)), Operator.LetterOf(CurrentValue, ((GameMovesLen + IdxString) + 3))));
            If (Not ((Caller.CurrentMove == "")))
            {
                List.Add(OpeningMovesRes, Caller.CurrentMove);
            }
            List.ReplaceItem(OpeningMovesMapStack, Idx, ((OpeningMovesMapStack[Idx] * 2) + 1));
        }
        Else
        {
            List.ReplaceItem(OpeningMovesMapStack, Idx, ((OpeningMovesMapStack[Idx] * 2) + 0));
        }
        Idx += 1;
    }
    If (List.Length(OpeningMovesRes) > 0)
    {
        List.DeleteAll(TmpList1);
        Call ClearMoveList(Depth);
        Opening.Idx = 1;
        Repeat (List.Length(OpeningMovesRes))
        {
            Caller.CurrentMove = OpeningMovesRes[Opening.Idx];
            List.Add(OpeningMovesMapHash, CurrentBoardHash);
            List.Add(OpeningMovesMapMove, Caller.CurrentMove);
            If (Not (List.ContainsItem(TmpList1, Caller.CurrentMove)))
            {
                Call AddMoveToList(Caller.CurrentMove)(Depth);
                List.Add(TmpList1, Caller.CurrentMove);
            }
            Opening.Idx += 1;
        }
        List.ReplaceItem(MovesIdx, Depth, 1);
        Repeat (MovesCount[Depth])
        {
            Call ApplyMoveLight(Depth);
            Call GetCurrentMove(Depth);
            If Init
            {
                Call InitOpeningMovesMapImpl((Depth + 1))(0)(AppliedMove[Depth])((1 == 0));
            }
            Else
            {
                Call InitOpeningMovesMapImpl((Depth + 1))((GameMovesLen + 4))(AppliedMove[Depth])((1 == 0));
            }
            Call RevertMoveLight(Depth);
            List.ReplaceItem(MovesIdx, Depth, (MovesIdx[Depth] + 1));
        }
    }
    Idx = 1;
    Repeat (List.Length(OpeningMovesMapStack))
    {
        List.ReplaceItem(OpeningMovesMapStack, Idx, floor((OpeningMovesMapStack[Idx] / 2)));
        Idx += 1;
    }
}

Define InitPieceSquareTables (warp=true)
{
    List.DeleteItem(PawnPieceSquarePreCastling, all);
    Call LoadList("0, 0, 0, 0, 0, 0, 0, 0,  7, 11, 23, 39, 39, 23, 11, 7, -7, 1, 14, 29, 29, 14, 1, -7, -21, -8, 6, 26, 26, 6, -8, -21, -21, -16, -1, 22, 22, -1, -16, -21, -21, -16, -6, 12, 12, -6, -16, -21, -14, -8, 6, -1, -1, 6, -8, -14, 0, 0, 0, 0, 0, 0, 0, 0")("PawnPieceSquarePreCastling");
    List.DeleteItem(PawnPieceSquare, all);
    Call LoadList("0, 0, 0, 0, 0, 0, 0, 0,     7, 11, 23, 39, 39, 23, 11, 7,     -5, 1, 14, 29, 29, 14, 1, -5,     -10, -12, -4, 26, 26, -4, -12, -16,     -16, -12, -4, 22, 22, -4, -12, -16,     -12, -8, 0, 12, 12, 0, -8, -12,     -8, -4, 4, -1, -1, 4, -4, -8,     0, 0, 0, 0, 0, 0, 0, 0")("PawnPieceSquare");
    List.DeleteItem(PawnPieceSquareEndgame, all);
    Call LoadList("0, 0, 0, 0, 0, 0, 0, 0,   40, 35, 25, 20, 20, 25, 35, 40,   30, 14, 10, 10, 10, 1, 14, 30,   18, 5, 5, 0, 0, 5, 5, 18,   10, -5, -5, -10, -10, -5, -5, 10,   5, -10, -15, -20, -20, -15, -10, 5,   5, -10, -20, -25, -25, -20, -10, 5,   0, 0, 0, 0, 0, 0, 0, 0")("PawnPieceSquareEndgame");
    List.DeleteItem(KnightPieceSquare, all);
    Call LoadList("-59, -39, -29, -29, -29, -29, -39, -59, -39, 21, 41, 41, 41, 41, 21, -39, -39, 46, 61, 71, 71, 61, 46, -39,  -39, 41, 51, 51, 51, 51, 41, -39,  -39, 11, 41, 36, 36, 41, 11, -39,  -39, 1, 31, 21, 21, 31, 1, -39,  -54, -39, -9, 11, 11, -9, -39, -54,  -69, -19, -24, -14, -14, -24, -19, -69")("KnightPieceSquare");
    List.DeleteItem(KnightPieceSquareEndgame, all);
    Call LoadList("-63, -53, -43, -43, -43, -43, -53, -63,  -53, -43, 38, 48, 48, 38, -43, -53,  -43, 28, 78, 73, 73, 78, 28, -43,  -43, 38, 73, 78, 78, 73, 38, -43,  -43, 38, 58, 68, 68, 58, 38, -43,  -43, 18, 48, 38, 38, 48, 18, -43,  -53, -43, 18, 28, 28, 18, -43, -53,  -63, -53, -43, -43, -43, -43, -53, -63")("KnightPieceSquareEndgame");
    List.DeleteItem(BishopPieceSquare, all);
    Call LoadList("-20, -18, -16, -14, -14, -16, -18, -20,  -10, 11, 1, 1, 1, 1, 11, -10,   1, 11, 21, 26, 26, 21, 11, 1,   1, 21, 21, 26, 26, 21, 21, 1,   1, 1, 16, 21, 21, 16, 1, 1,   -25, 6, 16, 11, 11, 16, 6, -25,   -28, 11, 6, 1, 1, 6, 11, -28,   -30, -25, -20, -20, -20, -20, -25, -30")("BishopPieceSquare");
    List.DeleteItem(BishopPieceSquareEndgame, all);
    Call LoadList("-38, -18, -8, 2, 2, -8, -18, -38,  -18, -8, 0, 12, 12, 0, -8, -18,  -8, 2, 20, 22, 22, 20, 2, -8,  2, 12, 17, 22, 22, 17, 12, 2,  2, 12, 16, 20, 20, 16, 12, 2,  -8, 2, 10, 12, 12, 10, 2, -8,  -18, -8, 2, 7, 7, 2, -8, -18,  -38, -18, -8, 2, 2, -8, -18, -38")("BishopPieceSquareEndgame");
    List.DeleteItem(RookPieceSquare, all);
    Call LoadList("-8, -6, 2, 7, 7, 2, -6, -8,  2, 2, 7, 12, 12, 7, 2, 2,  -8, -6, 6, 10, 10, 6, -6, -8,  -8, -6, 6, 8, 8, 6, -6, -8,  -8, -6, 6, 7, 7, 6, -6, -8,  -8, -6, 6, 7, 7, 6, -6, -8,  -8, -6, 2, 7, 7, 2, -6, -8,  -8, -6, 2, 7, 7, 2, -6, -8")("RookPieceSquare");
    List.DeleteItem(RookPieceSquareEndgame, all);
    Call LoadList("0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0")("RookPieceSquareEndgame");
    List.DeleteItem(QueenPieceSquare, all);
    Call LoadList("4, 4, 4, 4, 4, 4, 4, 4,  4, 4, 4, 4, 4, 4, 4, 4,  4, 4, 4, 4, 4, 4, 4, 4,  4, 4, 4, 4, 4, 4, 4, 4,  4, 4, 4, 4, 4, 4, 4, 4,  -6, -6, -1, 4, 4, -1, -6, -6,  -16, -11, -1, 4, 4, -1, -11, -16,  -26, -16, -6, 4, 4, -6, -16, -26")("QueenPieceSquare");
    List.DeleteItem(QueenPieceSquareEndgame, all);
    Call LoadList("-26, -6, -1, 4, 4, -1, -6, -26,  -16, 4, 19, 29, 29, 19, 4, -16,  -6, 9, 24, 34, 34, 24, 9, -6,  -6, 9, 24, 34, 34, 24, 9, -6,  -6, 9, 24, 34, 34, 24, 9, -6,  -16, -1, 14, 24, 24, 14, -1, -16,  -31, -26, -16, -6, -6, -16, -26, -31,  -46, -41, -31, -26, -26, -31, -41, -46")("QueenPieceSquareEndgame");
    List.DeleteItem(KingPieceSquare, all);
    Call LoadList("-55, -55, -60, -70, -70, -60, -55, -55,  -55, -55, -60, -70, -70, -60, -55, -55,  -55, -55, -60, -70, -70, -60, -55, -55,  -55, -55, -60, -70, -70, -60, -55, -55,  -50, -50, -55, -60, -60, -55, -50, -50,  -40, -40, -45, -50, -50, -45, -40, -40,  -30, -30, -30, -35, -35, -30, -30, -30,  -20, 0, 0, -10, -10, 0, 0, -20")("KingPieceSquare");
    List.DeleteItem(KingPieceSquareEndgame, all);
    Call LoadList("-10, 10, 15, 20, 20, 15, 10, -10,  0, 20, 35, 45, 45, 35, 20, 0,  10, 25, 40, 50, 50, 40, 25, 10,  10, 25, 40, 50, 50, 40, 25, 10,  10, 25, 40, 50, 50, 40, 25, 10,  0, 15, 30, 40, 40, 30, 15, 0,  -15, -10, 0, 10, 10, 0, -10, -15,  -30, -25, -15, -10, -10, -15, -25, -30")("KingPieceSquareEndgame");
}

Define InitSearch(string MaxDepth)(bool InitialDeepening) (warp=true)
{
    IsInNullMove = 0;
    IsSearchTimeout = 0;
    If InitialDeepening
    {
        PV = "";
        Call ProfilerReset;
        Call OnProgressChanged(1);
        PrevProgressUpdate = (Sensing.DaysSince2000() * 86400);
        TT.CurrentAge = ((floor((TT.CurrentAge / 100)) + 1) * 100);
        If ((IsScratch3 == 0) And (Level > 3))
        {
            Idx = 1;
            Repeat (List.Length(TTNodeHash))
            {
                If (TTNodeAge[Idx] > 0)
                {
                    If (((floor((TTNodeAge[Idx] / 100)) * 2) + TTNodeDepth[Idx]) < ((floor((TT.CurrentAge / 100)) * 2) + 1))
                    {
                        List.ReplaceItem(TTNodeBoardAttackedByOpp, Idx, "");
                        List.ReplaceItem(TTNodeBoardAttackedByOppPiece, Idx, "");
                        List.ReplaceItem(TTNodeCheckedAttackLines, Idx, "");
                        List.ReplaceItem(TTNodeHash, Idx, 0);
                        List.ReplaceItem(TTNodeBoardHash, Idx, 0);
                        List.ReplaceItem(TTNodeAge, Idx, 0);
                    }
                }
                Idx += 1;
            }
        }
        List.DeleteItem(HistoryCounterMoves, all);
        Repeat (10000)
        {
            List.Add(HistoryCounterMoves, "");
        }
        List.DeleteAll(Ply1Scores);
        Repeat (100000)
        {
            List.Add(Ply1Scores, "");
        }
    }
    If (1 == 1)
    {
        If InitialDeepening
        {
            Factor = 0;
        }
        Else
        {
            Factor = 0.95;
        }
        Idx = 1;
        Repeat (List.Length(HistoryMoveScores))
        {
            List.ReplaceItem(HistoryMoveScores, Idx, Operator.Round((HistoryMoveScores[Idx] * Factor)));
            Idx += 1;
        }
        Idx = 1;
        Repeat (List.Length(MaxHistoryMoveScore))
        {
            List.ReplaceItem(MaxHistoryMoveScore, Idx, Operator.Round((MaxHistoryMoveScore[Idx] * Factor)));
            Idx += 1;
        }
    }
    Call SetInitialEnPassantTarget(1);
    List.DeleteItem(SearchRootMovesDone, all);
    TT.CurrentAge += 1;
    Call CalcBoardStats;
    Call InitMovePosLookup((1 == 0));
    Call NNUE_Public_Refresh;
    Call CreateCurrentBoardHash;
    Call Log(MaxDepth)(" : ")("Search start, depth = ")(MaxDepth)("")("")("")("");
}

Define IsBlackKingCheckMate (warp=true)
{
    IsBlackKingCheckMateRes = 0;
    Call CalcBoardAttackedByMove(2);
    If (IsBlackChecked == 1)
    {
        IsBlackKingCheckMateRes = 1;
        Call GenerateMovesPublic(1);
        List.ReplaceItem(MovesIdx, 1, 1);
        Repeat (MovesCount[1])
        {
            If (IsBlackKingCheckMateRes == 1)
            {
                Call ApplyMove(1);
                Call CalcBoardAttackedByMove(2);
                If (IsBlackChecked == 0)
                {
                    IsBlackKingCheckMateRes = 0;
                }
                Call RevertMove(1);
            }
            List.ReplaceItem(MovesIdx, 1, (MovesIdx[1] + 1));
        }
    }
}

Define IsCheckingPiece(string Idx) (warp=true)
{
    Call IsCheckingPieceImpl(Idx)(Board[Idx]);
}

Define IsCheckingPieceDiscovery(string SourceIdx)(string TargetIdx)(string Depth) (warp=true)
{
    IsCheckingPieceRes = 0;
    If (BoardAttackedByOpponentSnapshot[(((Depth - 1) * 100) + SourceIdx)] > 0)
    {
        SourceIdx = BoardAttackedByOpponentPieceSnapshot[(((Depth - 1) * 100) + SourceIdx)];
        If ((Board[SourceIdx] * DepthEvalFactor[Depth]) > GoK_BlackKnight)
        {
            Call IsCheckingPiece(SourceIdx);
        }
    }
}

Define IsCheckingPieceImpl(string Idx)(string Piece) (warp=true)
{
    IsCheckingPieceRes = 0;
    Piece = Piece;
    If (abs(Piece) == GoK_BlackKing)
    {
        Stop(this script);
    }
    If (Piece > 0)
    {
        If (MoveToHash[((60000 + (PieceIdxLookup[Piece] * 10000)) + ((Idx * 100) + WhiteKingIdx))] == 0)
        {
            Stop(this script);
        }
        If (Piece == GoK_BlackPawn)
        {
            If (IdxToFile[Idx] == IdxToFile[WhiteKingIdx])
            {
                Stop(this script);
            }
            IsCheckingPieceRes = 1;
            Stop(this script);
        }
        If (Piece == GoK_BlackKnight)
        {
            IsCheckingPieceRes = 1;
            Stop(this script);
        }
        CurrentMove = ((Idx * 100) + WhiteKingIdx);
    }
    Else
    {
        If (Piece < 0)
        {
            If (MoveToHash[((PieceIdxLookup[(0 - Piece)] * 10000) + ((Idx * 100) + BlackKingIdx))] == 0)
            {
                Stop(this script);
            }
            If (Piece == GoK_WhitePawn)
            {
                If (IdxToFile[Idx] == IdxToFile[BlackKingIdx])
                {
                    Stop(this script);
                }
                IsCheckingPieceRes = 1;
                Stop(this script);
            }
            If (Piece == GoK_WhiteKnight)
            {
                IsCheckingPieceRes = 1;
                Stop(this script);
            }
            CurrentMove = ((Idx * 100) + BlackKingIdx);
        }
    }
    SourceIdx = Idx;
    IdxInc = MoveToPathStepInc[CurrentMove];
    Repeat ((MoveToPathDelta[CurrentMove] - 1))
    {
        SourceIdx += IdxInc;
        If (Not ((Board[SourceIdx] == 0)))
        {
            Stop(this script);
        }
    }
    IsCheckingPieceRes = 1;
}

Define IsDrawByMaterial (warp=true)
{
    IsDrawRes = 0;
    CurrentValue = 0;
    CurrentValue2 = 0;
    Idx = 1;
    Repeat (64)
    {
        Piece = Board[Idx];
        If (Not ((Piece == 0)))
        {
            If ((Piece == GoK_BlackBishop) Or (Piece == GoK_BlackKnight))
            {
                CurrentValue += 1;
            }
            Else
            {
                If ((Piece == GoK_WhiteBishop) Or (Piece == GoK_WhiteKnight))
                {
                    CurrentValue2 += 1;
                }
                Else
                {
                    If (Not ((abs(Piece) == GoK_BlackKing)))
                    {
                        Stop(this script);
                    }
                }
            }
        }
        Idx += 1;
    }
    If ((CurrentValue + CurrentValue2) < 2)
    {
        IsDrawRes = 1;
    }
}

Define IsDrawByStalemate(string Depth) (warp=true)
{
    Call CalcBoardAttackedByMoveChecked((Depth + 1));
    If ((((Depth % 2) == 1) And (IsBlackChecked == 1)) Or (((Depth % 2) == 0) And (IsWhiteChecked == 1)))
    {
        IsDrawRes = 0;
        Stop(this script);
    }
    List.ReplaceItem(Quiescence, Depth, 0);
    Call CalcBoardAttackedByMove((Depth + 1));
    Call StoreAttackInfo(Depth);
    List.ReplaceItem(BoardAttackedCalculated, Depth, 1);
    Call GenerateMovesImplWrapper(Depth)((1 == 0))((1 == 0));
    List.ReplaceItem(BoardAttackedCalculated, Depth, 0);
    If (Quiescence[Depth] == 1)
    {
        MoveCount += MovesCount[Depth];
    }
    Else
    {
        MoveCountQ += MovesCount[Depth];
    }
    IsDrawRes = 1;
    List.ReplaceItem(MovesIdx, Depth, 1);
    Repeat (MovesCount[Depth])
    {
        Call ApplyMoveLight(Depth);
        Call CalcBoardAttackedByMoveChecked((Depth + 1));
        If ((((Depth % 2) == 1) And (IsBlackChecked == 0)) Or (((Depth % 2) == 0) And (IsWhiteChecked == 0)))
        {
            IsDrawRes = 0;
            Call RevertMoveLight(Depth);
            Stop(this script);
        }
        Call RevertMoveLight(Depth);
        List.ReplaceItem(MovesIdx, Depth, (MovesIdx[Depth] + 1));
    }
}

Define IsEngineValidMove(string Move) (warp=true)
{
    Call GenerateMovesPublic(1);
    If List.ContainsItem(Moves1, Move)
    {
        ValidMoveRes = 1;
    }
    Else
    {
        ValidMoveRes = 0;
    }
}

Define IsLowerCase(string Char) (warp=true)
{
    Chars = "";
    CharsIdx = 1;
    Repeat (Variable.Length(CharsUpperCase))
    {
        If (Operator.LetterOf(CharsUpperCase, CharsIdx) == Char)
        {
            Chars = Operator.Join(Chars, Char);
        }
        Else
        {
            Chars = Operator.Join(Chars, Operator.LetterOf(CharsUpperCase, CharsIdx));
        }
        CharsIdx += 1;
    }
    Looks.SwitchCostumeTo(_ABCDEFGHIJKLMNOPQRSTUVWXYZ);
    Looks.SwitchCostumeTo(Chars);
    If (Costume.GetNumberName(number) == 1)
    {
        IsLowerCaseRes = 0;
    }
    Else
    {
        IsLowerCaseRes = 1;
    }
}

Define IsQuiescentCheckCond(string Depth) (warp=true)
{
    Call //("Quiescence search extension for checking moves, esp. check sequences. Return value defined whether check sequences should pursued at this point");
    IsQuiescentCheckRes = 0;
    If (IsScratch3 == 1)
    {
        If ((Level > 4) And (CheckedState[Depth] == 0))
        {
            Count = 0;
            Idx = (Depth - 1);
            Repeat Until (Idx < 2)
            {
                If ((CheckedState[Idx] == 1) And ((Quiescence[(Idx - 1)] == 1) And (TargetPieces[(Idx - 1)] == 0)))
                {
                    Count += 1;
                }
                Idx += -2;
            }
            If (Count < 1)
            {
                IsQuiescentCheckRes = 1;
            }
        }
    }
    Else
    {
        If (1 == 0)
        {
            If (Quiescence[(Depth - 1)] == 0)
            {
                IsQuiescentCheckRes = 1;
            }
        }
    }
}

Define IsWhiteKingCheckMate (warp=true)
{
    IsWhiteKingCheckMateRes = 0;
    Call CalcBoardAttackedByMove(1);
    If (IsWhiteChecked == 1)
    {
        IsWhiteKingCheckMateRes = 1;
        Call GenerateMovesPublic(2);
        List.ReplaceItem(MovesIdx, 2, 1);
        Repeat (MovesCount[2])
        {
            If (IsWhiteKingCheckMateRes == 1)
            {
                Call ApplyMove(2);
                Call CalcBoardAttackedByMove(1);
                If (IsWhiteChecked == 0)
                {
                    IsWhiteKingCheckMateRes = 0;
                }
                Call RevertMove(2);
            }
            List.ReplaceItem(MovesIdx, 2, (MovesIdx[2] + 1));
        }
    }
}

Define LoadList(string Data)(string ListName) (warp=true)
{
    IdxString = 1;
    CurrentValue = "";
    Repeat Until (IdxString > Variable.Length(Data))
    {
        If ((Not ((Operator.LetterOf(Data, IdxString) == " "))) And (Not ((Operator.LetterOf(Data, IdxString) == ","))))
        {
            CurrentValue = Operator.Join(CurrentValue, Operator.LetterOf(Data, IdxString));
        }
        If ((Operator.LetterOf(Data, IdxString) == ",") Or (IdxString == Variable.Length(Data)))
        {
            If (ListName == "PawnPieceSquare")
            {
                List.Add(PawnPieceSquare, Operator.Round((CurrentValue * 1)));
            }
            If (ListName == "PawnPieceSquareEndgame")
            {
                List.Add(PawnPieceSquareEndgame, Operator.Round((CurrentValue * 2)));
            }
            If (ListName == "PawnPieceSquarePreCastling")
            {
                List.Add(PawnPieceSquarePreCastling, Operator.Round((CurrentValue * 1)));
            }
            If (ListName == "KingPieceSquare")
            {
                List.Add(KingPieceSquare, CurrentValue);
            }
            If (ListName == "KingPieceSquareEndgame")
            {
                List.Add(KingPieceSquareEndgame, CurrentValue);
            }
            If (ListName == "QueenPieceSquare")
            {
                List.Add(QueenPieceSquare, CurrentValue);
            }
            If (ListName == "QueenPieceSquareEndgame")
            {
                List.Add(QueenPieceSquareEndgame, CurrentValue);
            }
            If (ListName == "RookPieceSquare")
            {
                List.Add(RookPieceSquare, CurrentValue);
            }
            If (ListName == "RookPieceSquareEndgame")
            {
                List.Add(RookPieceSquareEndgame, CurrentValue);
            }
            If (ListName == "BishopPieceSquare")
            {
                List.Add(BishopPieceSquare, CurrentValue);
            }
            If (ListName == "BishopPieceSquareEndgame")
            {
                List.Add(BishopPieceSquareEndgame, CurrentValue);
            }
            If (ListName == "KnightPieceSquare")
            {
                List.Add(KnightPieceSquare, Operator.Round((CurrentValue * 0.4)));
            }
            If (ListName == "KnightPieceSquareEndgame")
            {
                List.Add(KnightPieceSquareEndgame, Operator.Round((CurrentValue * 0.4)));
            }
            If (ListName == "KnightMobilityBonus")
            {
                List.Add(KnightMobilityBonus, (CurrentValue * 1));
            }
            If (ListName == "BishopMobilityBonus")
            {
                List.Add(BishopMobilityBonus, (CurrentValue * 1));
            }
            If (ListName == "RookMobilityBonus")
            {
                List.Add(RookMobilityBonus, (CurrentValue * 1));
            }
            If (ListName == "QueenMobilityBonus")
            {
                List.Add(QueenMobilityBonus, (CurrentValue * 1));
            }
            If (ListName == "PawnStorm")
            {
                List.Add(PawnStorm, Operator.Round((CurrentValue * 0.8)));
            }
            If (ListName == "PawnShelter")
            {
                List.Add(PawnShelter, Operator.Round((CurrentValue * 0.8)));
            }
            CurrentValue = "";
        }
        IdxString += 1;
    }
}

Define Log(string Txt1)(string Txt2)(string Txt3)(string Txt4)(string Txt5)(string Txt6)(string Txt7)(string Txt8) (warp=true)
{
    Tmp = (floor((((Sensing.DaysSince2000() * 86400) - ThinkTimeStart) * 1000)) / 1000);
    If Operator.Contains(Tmp, ".")
    {
        If ((Operator.LetterOf(Tmp, (Variable.Length(Tmp) - 1)) == ".") Or (Operator.LetterOf(Tmp, (Variable.Length(Tmp) - 2)) == "."))
        {
            Tmp = Operator.Join(Tmp, 0);
        }
    }
    Else
    {
        Tmp = Operator.Join(Tmp, .000);
    }
    List.Add(Logfile, Operator.Join(Operator.Join(Tmp, ": "), Operator.Join(Txt1, Operator.Join(Txt2, Operator.Join(Txt3, Operator.Join(Txt4, Operator.Join(Txt5, Operator.Join(Txt6, Operator.Join(Txt7, Txt8)))))))));
}

Define NNUE_ActDeactBulkImpl(string FromSquare)(string ToSquare)(string SourcePiece)(string TargetPiece)(string Depth) (warp=true)
{
    NNUE_Side = 0;
    Repeat (2)
    {
        NNUE_Chunk = 0;
        Repeat ((NNUE_HiddenSize / 256))
        {
            NNUE_Offset = (NNUE_Chunk * 256);
            NNUE.Idx1 = (((NNUE_Side * NNUE_HiddenSize) + NNUE_Offset) + 1);
            NNUE.Idx2 = (((NNUE_InputIdxMap[(((1000 * NNUE_Side) + ((64 * SourcePiece) + FromSquare)) + 1)] * NNUE_HiddenSize) + NNUE_Offset) + 1);
            NNUE.Idx3 = (((NNUE_InputIdxMap[(((1000 * NNUE_Side) + ((64 * SourcePiece) + ToSquare)) + 1)] * NNUE_HiddenSize) + NNUE_Offset) + 1);
            If (TargetPiece == "")
            {
                NNUE.Idx4 = 0;
            }
            Else
            {
                NNUE.Idx4 = (((NNUE_InputIdxMap[(((1000 * NNUE_Side) + ((64 * TargetPiece) + ToSquare)) + 1)] * NNUE_HiddenSize) + NNUE_Offset) + 1);
            }
            If (Depth == 0)
            {
                NNUE.TargetIdx = NNUE.Idx1;
            }
            Else
            {
                NNUE.TargetIdx = (NNUE.Idx1 + ((NNUE_HiddenSize * 2) * Depth));
                If (NNUE_Accumulator_MetaState[Depth] == 1)
                {
                    NNUE.Idx1 = (NNUE.Idx1 + ((NNUE_HiddenSize * 2) * (Depth - 1)));
                }
                Else
                {
                    If (NNUE_Accumulator_MetaState[Depth] == 2)
                    {
                        NNUE.Idx1 = (NNUE.Idx1 + ((NNUE_HiddenSize * 2) * Depth));
                    }
                    Else
                    {
                        Call Log("Invalid NNUE bulk update state")("")("")("")("")("")("")("");
                        Stop(this script);
                    }
                }
            }
            If (NNUE.Idx2 > (768 * 256))
            {
                Call //("Idx2 => W2");
                NNUE.Idx2 += (0 - (768 * 256));
                If (NNUE.Idx3 > (768 * 256))
                {
                    Call //("Idx3 => W2");
                    NNUE.Idx3 += (0 - (768 * 256));
                    If (NNUE.Idx4 == 0)
                    {
                        Idx = 0;
                        Repeat (256)
                        {
                            List.ReplaceItem(NNUE_Accumulator, (NNUE.TargetIdx + Idx), ((NNUE_Accumulator[(NNUE.Idx1 + Idx)] - NNUE_InputWeights_2[(NNUE.Idx2 + Idx)]) + (NNUE_InputWeights_2[(NNUE.Idx3 + Idx)] - 0)));
                            Idx += 1;
                        }
                    }
                    Else
                    {
                        If (NNUE.Idx4 > (768 * 256))
                        {
                            Call //("Idx4 => W2");
                            NNUE.Idx4 += (0 - (768 * 256));
                            Idx = 0;
                            Repeat (256)
                            {
                                List.ReplaceItem(NNUE_Accumulator, (NNUE.TargetIdx + Idx), ((NNUE_Accumulator[(NNUE.Idx1 + Idx)] - NNUE_InputWeights_2[(NNUE.Idx2 + Idx)]) + (NNUE_InputWeights_2[(NNUE.Idx3 + Idx)] - NNUE_InputWeights_2[(NNUE.Idx4 + Idx)])));
                                Idx += 1;
                            }
                        }
                        Else
                        {
                            Call //("Idx4 => W1");
                            Idx = 0;
                            Repeat (256)
                            {
                                List.ReplaceItem(NNUE_Accumulator, (NNUE.TargetIdx + Idx), ((NNUE_Accumulator[(NNUE.Idx1 + Idx)] - NNUE_InputWeights_2[(NNUE.Idx2 + Idx)]) + (NNUE_InputWeights_2[(NNUE.Idx3 + Idx)] - NNUE_InputWeights_1[(NNUE.Idx4 + Idx)])));
                                Idx += 1;
                            }
                        }
                    }
                }
                Else
                {
                    Call //("Idx3 => W1");
                    If (NNUE.Idx4 == 0)
                    {
                        Idx = 0;
                        Repeat (256)
                        {
                            List.ReplaceItem(NNUE_Accumulator, (NNUE.TargetIdx + Idx), ((NNUE_Accumulator[(NNUE.Idx1 + Idx)] - NNUE_InputWeights_2[(NNUE.Idx2 + Idx)]) + (NNUE_InputWeights_1[(NNUE.Idx3 + Idx)] - 0)));
                            Idx += 1;
                        }
                    }
                    Else
                    {
                        If (NNUE.Idx4 > (768 * 256))
                        {
                            Call //("Idx4 => W2");
                            NNUE.Idx4 += (0 - (768 * 256));
                            Idx = 0;
                            Repeat (256)
                            {
                                List.ReplaceItem(NNUE_Accumulator, (NNUE.TargetIdx + Idx), ((NNUE_Accumulator[(NNUE.Idx1 + Idx)] - NNUE_InputWeights_2[(NNUE.Idx2 + Idx)]) + (NNUE_InputWeights_1[(NNUE.Idx3 + Idx)] - NNUE_InputWeights_2[(NNUE.Idx4 + Idx)])));
                                Idx += 1;
                            }
                        }
                        Else
                        {
                            Call //("Idx4 => W1");
                            Idx = 0;
                            Repeat (256)
                            {
                                List.ReplaceItem(NNUE_Accumulator, (NNUE.TargetIdx + Idx), ((NNUE_Accumulator[(NNUE.Idx1 + Idx)] - NNUE_InputWeights_2[(NNUE.Idx2 + Idx)]) + (NNUE_InputWeights_1[(NNUE.Idx3 + Idx)] - NNUE_InputWeights_1[(NNUE.Idx4 + Idx)])));
                                Idx += 1;
                            }
                        }
                    }
                }
            }
            Else
            {
                Call //("Idx2 => W1");
                If (NNUE.Idx3 > (768 * 256))
                {
                    Call //("Idx3 => W2");
                    NNUE.Idx3 += (0 - (768 * 256));
                    If (NNUE.Idx4 == 0)
                    {
                        Idx = 0;
                        Repeat (256)
                        {
                            List.ReplaceItem(NNUE_Accumulator, (NNUE.TargetIdx + Idx), ((NNUE_Accumulator[(NNUE.Idx1 + Idx)] - NNUE_InputWeights_1[(NNUE.Idx2 + Idx)]) + (NNUE_InputWeights_2[(NNUE.Idx3 + Idx)] - 0)));
                            Idx += 1;
                        }
                    }
                    Else
                    {
                        If (NNUE.Idx4 > (768 * 256))
                        {
                            Call //("Idx4 => W2");
                            NNUE.Idx4 += (0 - (768 * 256));
                            Idx = 0;
                            Repeat (256)
                            {
                                List.ReplaceItem(NNUE_Accumulator, (NNUE.TargetIdx + Idx), ((NNUE_Accumulator[(NNUE.Idx1 + Idx)] - NNUE_InputWeights_1[(NNUE.Idx2 + Idx)]) + (NNUE_InputWeights_2[(NNUE.Idx3 + Idx)] - NNUE_InputWeights_2[(NNUE.Idx4 + Idx)])));
                                Idx += 1;
                            }
                        }
                        Else
                        {
                            Call //("Idx4 => W1");
                            Idx = 0;
                            Repeat (256)
                            {
                                List.ReplaceItem(NNUE_Accumulator, (NNUE.TargetIdx + Idx), ((NNUE_Accumulator[(NNUE.Idx1 + Idx)] - NNUE_InputWeights_1[(NNUE.Idx2 + Idx)]) + (NNUE_InputWeights_2[(NNUE.Idx3 + Idx)] - NNUE_InputWeights_1[(NNUE.Idx4 + Idx)])));
                                Idx += 1;
                            }
                        }
                    }
                }
                Else
                {
                    Call //("Idx3 => W1");
                    If (NNUE.Idx4 == 0)
                    {
                        Idx = 0;
                        Repeat (256)
                        {
                            List.ReplaceItem(NNUE_Accumulator, (NNUE.TargetIdx + Idx), ((NNUE_Accumulator[(NNUE.Idx1 + Idx)] - NNUE_InputWeights_1[(NNUE.Idx2 + Idx)]) + (NNUE_InputWeights_1[(NNUE.Idx3 + Idx)] - 0)));
                            Idx += 1;
                        }
                    }
                    Else
                    {
                        If (NNUE.Idx4 > (768 * 256))
                        {
                            Call //("Idx4 => W2");
                            NNUE.Idx4 += (0 - (768 * 256));
                            Idx = 0;
                            Repeat (256)
                            {
                                List.ReplaceItem(NNUE_Accumulator, (NNUE.TargetIdx + Idx), ((NNUE_Accumulator[(NNUE.Idx1 + Idx)] - NNUE_InputWeights_1[(NNUE.Idx2 + Idx)]) + (NNUE_InputWeights_1[(NNUE.Idx3 + Idx)] - NNUE_InputWeights_2[(NNUE.Idx4 + Idx)])));
                                Idx += 1;
                            }
                        }
                        Else
                        {
                            Call //("Idx4 => W1");
                            Idx = 0;
                            Repeat (256)
                            {
                                List.ReplaceItem(NNUE_Accumulator, (NNUE.TargetIdx + Idx), ((NNUE_Accumulator[(NNUE.Idx1 + Idx)] - NNUE_InputWeights_1[(NNUE.Idx2 + Idx)]) + (NNUE_InputWeights_1[(NNUE.Idx3 + Idx)] - NNUE_InputWeights_1[(NNUE.Idx4 + Idx)])));
                                Idx += 1;
                            }
                        }
                    }
                }
            }
            NNUE_Chunk += 1;
        }
        NNUE_Side += 1;
    }
    List.ReplaceItem(NNUE_Accumulator_MetaState, Depth, 2);
}

Define NNUE_ActDeactImpl(string Square)(string Piece)(bool Activate)(string Depth) (warp=true)
{
    NNUE_Side = 0;
    Repeat (2)
    {
        NNUE_Chunk = 0;
        Repeat ((NNUE_HiddenSize / 256))
        {
            NNUE_Offset = (NNUE_Chunk * 256);
            NNUE.Idx1 = (((NNUE_Side * NNUE_HiddenSize) + NNUE_Offset) + 1);
            NNUE.Idx2 = (((NNUE_InputIdxMap[(((1000 * NNUE_Side) + ((64 * Piece) + Square)) + 1)] * NNUE_HiddenSize) + NNUE_Offset) + 1);
            If (Depth == 0)
            {
                NNUE.TargetIdx = NNUE.Idx1;
            }
            Else
            {
                NNUE.TargetIdx = (NNUE.Idx1 + ((NNUE_HiddenSize * 2) * Depth));
                If (NNUE_Accumulator_MetaState[Depth] == 1)
                {
                    NNUE.Idx1 = (NNUE.Idx1 + ((NNUE_HiddenSize * 2) * (Depth - 1)));
                }
                Else
                {
                    If (NNUE_Accumulator_MetaState[Depth] == 2)
                    {
                        NNUE.Idx1 = (NNUE.Idx1 + ((NNUE_HiddenSize * 2) * Depth));
                    }
                    Else
                    {
                        Call Log("Invalid NNUE bulk update state")("")("")("")("")("")("")("");
                        Stop(this script);
                    }
                }
            }
            If Activate
            {
                If (NNUE.Idx2 > (768 * 256))
                {
                    NNUE.Idx2 += (0 - (768 * 256));
                    Idx = 0;
                    Repeat (256)
                    {
                        List.ReplaceItem(NNUE_Accumulator, (NNUE.TargetIdx + Idx), (NNUE_Accumulator[(NNUE.Idx1 + Idx)] + NNUE_InputWeights_2[(NNUE.Idx2 + Idx)]));
                        Idx += 1;
                    }
                }
                Else
                {
                    Idx = 0;
                    Repeat (256)
                    {
                        List.ReplaceItem(NNUE_Accumulator, (NNUE.TargetIdx + Idx), (NNUE_Accumulator[(NNUE.Idx1 + Idx)] + NNUE_InputWeights_1[(NNUE.Idx2 + Idx)]));
                        Idx += 1;
                    }
                }
            }
            Else
            {
                If (NNUE.Idx2 > (768 * 256))
                {
                    NNUE.Idx2 += (0 - (768 * 256));
                    Idx = 0;
                    Repeat (256)
                    {
                        List.ReplaceItem(NNUE_Accumulator, (NNUE.TargetIdx + Idx), (NNUE_Accumulator[(NNUE.Idx1 + Idx)] - NNUE_InputWeights_2[(NNUE.Idx2 + Idx)]));
                        Idx += 1;
                    }
                }
                Else
                {
                    Idx = 0;
                    Repeat (256)
                    {
                        List.ReplaceItem(NNUE_Accumulator, (NNUE.TargetIdx + Idx), (NNUE_Accumulator[(NNUE.Idx1 + Idx)] - NNUE_InputWeights_1[(NNUE.Idx2 + Idx)]));
                        Idx += 1;
                    }
                }
            }
            NNUE_Chunk += 1;
        }
        NNUE_Side += 1;
    }
    List.ReplaceItem(NNUE_Accumulator_MetaState, Depth, 2);
}

Define NNUE_Activate(string GoKIdx)(string GoKPiece)(string Depth) (warp=true)
{
    Call NNUE_ActDeactImpl(NNUE_GoKIdxToSquare[VirtualBoard[GoKIdx]])((((6 * (GoKPiece > 0)) + PieceIdxLookup[abs(GoKPiece)]) - 1))((1 == 1))(Depth);
}

Define NNUE_Deactivate(string GoKIdx)(string GoKPiece)(string Depth) (warp=true)
{
    Call NNUE_ActDeactImpl(NNUE_GoKIdxToSquare[VirtualBoard[GoKIdx]])((((6 * (GoKPiece > 0)) + PieceIdxLookup[abs(GoKPiece)]) - 1))((1 == 0))(Depth);
}

Define NNUE_DecodeNetwork (warp=true)
{
    If (NNUE_Decoded == 1)
    {
        Stop(this script);
    }
    Call NNUE_HexToDec(NNUE_InputWeights_HEX);
    List.DeleteAll(NNUE_InputWeights_1);
    List.DeleteAll(NNUE_InputWeights_2);
    IdxString = 1;
    Repeat (List.Length(NNUE_ListRes_1))
    {
        List.Add(NNUE_InputWeights_1, (NNUE_ListRes_1[IdxString] + 0));
        IdxString += 1;
    }
    IdxString = 1;
    Repeat (List.Length(NNUE_ListRes_2))
    {
        List.Add(NNUE_InputWeights_2, (NNUE_ListRes_2[IdxString] + 0));
        IdxString += 1;
    }
    Call NNUE_LoadList(NNUE_HiddenBias_CSV);
    List.DeleteAll(NNUE_HiddenBias);
    IdxString = 1;
    Repeat (List.Length(NNUE_ListRes_1))
    {
        List.Add(NNUE_HiddenBias, (NNUE_ListRes_1[IdxString] + 0));
        IdxString += 1;
    }
    Call NNUE_LoadList(NNUE_HIddenWeights_CSV);
    List.DeleteAll(NNUE_HiddenWeights);
    IdxString = 1;
    Repeat (List.Length(NNUE_ListRes_1))
    {
        List.Add(NNUE_HiddenWeights, (NNUE_ListRes_1[IdxString] + 0));
        IdxString += 1;
    }
    Call NNUE_LoadList(NNUE_OutputBias_CSV);
    List.DeleteAll(NNUE_OutputBias);
    IdxString = 1;
    Repeat (List.Length(NNUE_ListRes_1))
    {
        List.Add(NNUE_OutputBias, (NNUE_ListRes_1[IdxString] + 0));
        IdxString += 1;
    }
    NNUE_Decoded = 1;
}

Define NNUE_DecToHex(string CSV) (warp=true)
{
    List.DeleteAll(TmpList1);
    List.Add(TmpList1, 0);
    List.Add(TmpList1, 1);
    List.Add(TmpList1, 2);
    List.Add(TmpList1, 3);
    List.Add(TmpList1, 4);
    List.Add(TmpList1, 5);
    List.Add(TmpList1, 6);
    List.Add(TmpList1, 7);
    List.Add(TmpList1, 8);
    List.Add(TmpList1, 9);
    List.Add(TmpList1, "a");
    List.Add(TmpList1, "b");
    List.Add(TmpList1, "c");
    List.Add(TmpList1, "d");
    List.Add(TmpList1, "e");
    List.Add(TmpList1, "f");
    Call NNUE_LoadList(CSV);
    Res = "";
    Idx = 1;
    Repeat (List.Length(NNUE_ListRes_1))
    {
        CurrentValue = NNUE_ListRes_1[Idx];
        If (CurrentValue < 0)
        {
            CurrentValue = (2048 - CurrentValue);
        }
        Res = Operator.Join(Res, TmpList1[((floor((CurrentValue / 256)) % 16) + 1)]);
        Res = Operator.Join(Res, TmpList1[((floor((CurrentValue / 16)) % 16) + 1)]);
        Res = Operator.Join(Res, TmpList1[((CurrentValue % 16) + 1)]);
        Idx += 1;
    }
    Idx = 1;
    Repeat (List.Length(NNUE_ListRes_2))
    {
        CurrentValue = NNUE_ListRes_2[Idx];
        If (CurrentValue < 0)
        {
            CurrentValue = (2048 - CurrentValue);
        }
        Res = Operator.Join(Res, TmpList1[((floor((CurrentValue / 256)) % 16) + 1)]);
        Res = Operator.Join(Res, TmpList1[((floor((CurrentValue / 16)) % 16) + 1)]);
        Res = Operator.Join(Res, TmpList1[((CurrentValue % 16) + 1)]);
        Idx += 1;
    }
}

Define NNUE_Evaluate(string Side)(string Depth) (warp=true)
{
    NNUE_EvalRes = NNUE_OutputBias[1];
    NNUE_Chunk = 0;
    Repeat ((NNUE_HiddenSize / 256))
    {
        NNUE_Offset = (NNUE_Chunk * 256);
        Idx = (NNUE_Offset + 1);
        NNUE.Idx1 = ((Side * NNUE_HiddenSize) + (Depth * (NNUE_HiddenSize * 2)));
        NNUE.Idx2 = (((1 - Side) * NNUE_HiddenSize) + (Depth * (NNUE_HiddenSize * 2)));
        Repeat (32)
        {
            Call NNUE_Eval_Chunk_8((NNUE.Idx1 + Idx))(Idx)((NNUE.Idx2 + Idx))((NNUE_HiddenSize + Idx));
            Idx += 8;
        }
        NNUE_Chunk += 1;
    }
    NNUE_EvalRes = (NNUE_EvalRes / (16 * 512));
}

Define NNUE_Eval_Chunk_8(string AccIdx1)(string WgtIdx1)(string AccIdx2)(string WgtIdx2) (warp=true)
{
    Idx2 = 0;
    Repeat (8)
    {
        If (NNUE_Accumulator[(AccIdx1 + Idx2)] > 0)
        {
            NNUE_EvalRes += (NNUE_Accumulator[(AccIdx1 + Idx2)] * NNUE_HiddenWeights[(WgtIdx1 + Idx2)]);
        }
        If (NNUE_Accumulator[(AccIdx2 + Idx2)] > 0)
        {
            NNUE_EvalRes += (NNUE_Accumulator[(AccIdx2 + Idx2)] * NNUE_HiddenWeights[(WgtIdx2 + Idx2)]);
        }
        Idx2 += 1;
    }
}

Define NNUE_HexToDec(string Hex) (warp=true)
{
    List.DeleteAll(TmpList1);
    List.Add(TmpList1, 0);
    List.Add(TmpList1, 1);
    List.Add(TmpList1, 2);
    List.Add(TmpList1, 3);
    List.Add(TmpList1, 4);
    List.Add(TmpList1, 5);
    List.Add(TmpList1, 6);
    List.Add(TmpList1, 7);
    List.Add(TmpList1, 8);
    List.Add(TmpList1, 9);
    List.Add(TmpList1, "a");
    List.Add(TmpList1, "b");
    List.Add(TmpList1, "c");
    List.Add(TmpList1, "d");
    List.Add(TmpList1, "e");
    List.Add(TmpList1, "f");
    List.DeleteAll(NNUE_ListRes_1);
    List.DeleteAll(NNUE_ListRes_2);
    Idx = 1;
    Repeat ((Variable.Length(Hex) / 3))
    {
        CurrentValue = ((((List.IndexOf(TmpList1, Operator.LetterOf(Hex, Idx)) - 1) * 256) + ((List.IndexOf(TmpList1, Operator.LetterOf(Hex, (Idx + 1))) - 1) * 16)) + (List.IndexOf(TmpList1, Operator.LetterOf(Hex, (Idx + 2))) - 1));
        If (CurrentValue > 2048)
        {
            CurrentValue = (2048 - CurrentValue);
        }
        If (List.Length(NNUE_ListRes_1) < (768 * 256))
        {
            List.Add(NNUE_ListRes_1, (CurrentValue + 0));
        }
        Else
        {
            List.Add(NNUE_ListRes_2, (CurrentValue + 0));
        }
        Idx += 3;
    }
}

Define NNUE_ImportNetwork(string InputWeights)(string HiddenBias)(string HiddenWeights)(string OutputBias) (warp=true)
{
    List.DeleteAll(NNUE_InputWeights_1);
    List.DeleteAll(NNUE_InputWeights_2);
    List.DeleteAll(NNUE_HiddenBias);
    List.DeleteAll(NNUE_HiddenWeights);
    List.DeleteAll(NNUE_OutputBias);
    Call NNUE_DecToHex(InputWeights);
    NNUE_InputWeights_HEX = Res;
    NNUE_HiddenBias_CSV = HiddenBias;
    NNUE_HIddenWeights_CSV = HiddenWeights;
    NNUE_OutputBias_CSV = OutputBias;
    List.DeleteAll(NNUE_ListRes_1);
    List.DeleteAll(NNUE_ListRes_2);
    Res = "";
}

Define NNUE_Init (warp=true)
{
    Call NNUE_DecodeNetwork;
    NNUE_FeatureSize = 768;
    NNUE_HiddenSize = 512;
    List.DeleteAll(NNUE_Accumulator);
    Repeat (((NNUE_HiddenSize * 2) * 50))
    {
        List.Add(NNUE_Accumulator, 0);
    }
    List.DeleteAll(NNUE_Accumulator_MetaState);
    Repeat (MaxSearchDepthStackFrames)
    {
        List.Add(NNUE_Accumulator_MetaState, 0);
    }
    Idx = 1;
    Repeat (NNUE_HiddenSize)
    {
        List.ReplaceItem(NNUE_Accumulator, Idx, NNUE_HiddenBias[Idx]);
        List.ReplaceItem(NNUE_Accumulator, (NNUE_HiddenSize + Idx), NNUE_HiddenBias[Idx]);
        Idx += 1;
    }
    List.DeleteAll(NNUE_GoKIdxToSquare);
    Idx = 1;
    Repeat (64)
    {
        List.Add(NNUE_GoKIdxToSquare, ((((8 - IdxToRank[Idx]) * 8) + IdxToFile[Idx]) - 1));
        Idx += 1;
    }
    List.DeleteAll(NNUE_PrevRefreshBoard);
    Repeat (64)
    {
        List.Add(NNUE_PrevRefreshBoard, 0);
    }
    List.DeleteAll(NNUE_InputIdxMap);
    Repeat (2000)
    {
        List.Add(NNUE_InputIdxMap, "");
    }
    Idx = 0;
    Repeat (12)
    {
        Idx2 = 0;
        Repeat (64)
        {
            List.ReplaceItem(NNUE_InputIdxMap, (((Idx * 64) + Idx2) + 1), ((Idx * 64) + Idx2));
            CurrentValue = 0;
            Exp = 1;
            Repeat (8)
            {
                If (Not ((((Idx2 % (Exp * 2)) > (Exp - 1)) == ((56 % (Exp * 2)) > (Exp - 1)))))
                {
                    CurrentValue += Exp;
                }
                Exp = (Exp * 2);
            }
            If (Idx > 5)
            {
                CurrentValue += ((Idx - 6) * 64);
            }
            Else
            {
                CurrentValue += ((Idx + 6) * 64);
            }
            List.ReplaceItem(NNUE_InputIdxMap, ((1000 + ((Idx * 64) + Idx2)) + 1), CurrentValue);
            Idx2 += 1;
        }
        Idx += 1;
    }
    List.DeleteAll(NNUE_VirtualBoard);
    Idx = 1;
    Repeat (64)
    {
        List.Add(NNUE_VirtualBoard, (((IdxToRank[Idx] - 1) * 8) + (9 - IdxToFile[Idx])));
        Idx += 1;
    }
    Call NNUE_Public_Evaluate(1);
}

Define NNUE_LoadList(string Data) (warp=true)
{
    List.DeleteAll(NNUE_ListRes_1);
    List.DeleteAll(NNUE_ListRes_2);
    IdxString = 1;
    CurrentValue = "";
    Repeat Until (IdxString > Variable.Length(Data))
    {
        If ((Not ((Operator.LetterOf(Data, IdxString) == " "))) And (Not ((Operator.LetterOf(Data, IdxString) == ","))))
        {
            CurrentValue = Operator.Join(CurrentValue, Operator.LetterOf(Data, IdxString));
        }
        If ((Operator.LetterOf(Data, IdxString) == ",") Or (IdxString == Variable.Length(Data)))
        {
            If (List.Length(NNUE_ListRes_1) < (floor((200000 / 256)) * 256))
            {
                List.Add(NNUE_ListRes_1, CurrentValue);
            }
            Else
            {
                List.Add(NNUE_ListRes_2, CurrentValue);
            }
            CurrentValue = "";
        }
        IdxString += 1;
    }
}

Define NNUE_Public_Evaluate(string Depth) (warp=true)
{
    Call NNUE_Evaluate((Depth % 2))((Depth - 1));
    If (NNUE_EvalRes > AbsMinCheckmateEval)
    {
        NNUE_EvalRes = AbsMinCheckmateEval;
        Stop(this script);
    }
    Else
    {
        If (NNUE_EvalRes < (0 - AbsMinCheckmateEval))
        {
            NNUE_EvalRes = (0 - AbsMinCheckmateEval);
            Stop(this script);
        }
    }
    If ((Depth % 2) == 0)
    {
        NNUE_EvalRes = (0 - NNUE_EvalRes);
    }
    If (abs(NNUE_EvalRes) < AbsMinCheckmateEval)
    {
        NNUE_EvalRes = (Operator.Round((NNUE_EvalRes * 100)) / 100);
    }
}

Define NNUE_Public_OnMakeMoveStart(string Depth) (warp=true)
{
    NNUE_Idx = 1;
    Repeat (64)
    {
        List.ReplaceItem(NNUE_PrevRefreshBoard, NNUE_Idx, Board[NNUE_Idx]);
        NNUE_Idx += 1;
    }
}

Define NNUE_Public_OnMakeMoveStop(string Depth)(string Move)(string SourcePiece)(string TargetPiece) (warp=true)
{
    If (IsBlockProfilerEnabled == 1)
    {
        Call ProfilerMethodEnter((((6 + Quiescence[Depth]) * MaxSearchDepthStackFrames) + Depth));
    }
    Call NNUE_StartBulkActivation(Depth);
    If (Move == "")
    {
        NNUE_Found = 0;
        NNUE_Idx = 1;
        Repeat (64)
        {
            NNUE_Piece = Board[(NNUE_Idx + 0)];
            NNUE_PrevPiece = NNUE_PrevRefreshBoard[(NNUE_Idx + 0)];
            If (Not ((NNUE_Piece == NNUE_PrevPiece)))
            {
                If (Not ((NNUE_PrevPiece == 0)))
                {
                    Call NNUE_Deactivate(NNUE_Idx)(NNUE_PrevPiece)(Depth);
                    NNUE_Found = 1;
                }
                If (Not ((NNUE_Piece == 0)))
                {
                    Call NNUE_Activate(NNUE_Idx)(NNUE_Piece)(Depth);
                    NNUE_Found = 1;
                }
                List.ReplaceItem(NNUE_PrevRefreshBoard, NNUE_Idx, NNUE_Piece);
            }
            NNUE_Idx += 1;
        }
        If (NNUE_Found == 0)
        {
            NNUE.Idx1 = ((NNUE_HiddenSize * 2) * (Depth - 1));
            NNUE.TargetIdx = ((NNUE_HiddenSize * 2) * Depth);
            NNUE_Idx = 1;
            Repeat ((NNUE_HiddenSize * 2))
            {
                List.ReplaceItem(NNUE_Accumulator, (NNUE.TargetIdx + NNUE_Idx), NNUE_Accumulator[(NNUE.Idx1 + NNUE_Idx)]);
                NNUE_Idx += 1;
            }
        }
    }
    Else
    {
        If (TargetPiece == 0)
        {
            Call NNUE_ActDeactBulkImpl(NNUE_GoKIdxToSquare[VirtualBoard[floor((Move / 100))]])(NNUE_GoKIdxToSquare[VirtualBoard[floor((Move % 100))]])((((6 * (SourcePiece > 0)) + PieceIdxLookup[abs(SourcePiece)]) - 1))("")(Depth);
        }
        Else
        {
            Call NNUE_ActDeactBulkImpl(NNUE_GoKIdxToSquare[VirtualBoard[floor((Move / 100))]])(NNUE_GoKIdxToSquare[VirtualBoard[floor((Move % 100))]])((((6 * (SourcePiece > 0)) + PieceIdxLookup[abs(SourcePiece)]) - 1))((((6 * (TargetPiece > 0)) + PieceIdxLookup[abs(TargetPiece)]) - 1))(Depth);
        }
    }
    Call NNUE_StopBulkActivation(Depth);
    If (IsBlockProfilerEnabled == 1)
    {
        Call ProfilerMethodExit((((6 + Quiescence[Depth]) * MaxSearchDepthStackFrames) + Depth));
    }
}

Define NNUE_Public_Refresh (warp=true)
{
    Idx = 1;
    Repeat (NNUE_HiddenSize)
    {
        List.ReplaceItem(NNUE_Accumulator, Idx, NNUE_HiddenBias[Idx]);
        List.ReplaceItem(NNUE_Accumulator, (NNUE_HiddenSize + Idx), NNUE_HiddenBias[Idx]);
        Idx += 1;
    }
    Call NNUE_StartBulkActivation(0);
    NNUE_Idx = 1;
    Repeat (64)
    {
        If (Not ((Board[NNUE_Idx] == 0)))
        {
            Call NNUE_Activate(NNUE_Idx)(Board[NNUE_Idx])(0);
        }
        NNUE_Idx += 1;
    }
    Call NNUE_StopBulkActivation(0);
}

Define NNUE_StartBulkActivation(string Depth) (warp=true)
{
    List.ReplaceItem(NNUE_Accumulator_MetaState, Depth, 1);
}

Define NNUE_StopBulkActivation(string Depth) (warp=true)
{
    List.ReplaceItem(NNUE_Accumulator_MetaState, Depth, 3);
}

Define OnEvaluationChanged(string Eval) (warp=false)
{
    If (Level > 2)
    {
        CurrentValue = Eval;
        If (CurrentValue > 1000)
        {
            CurrentValue = 100;
        }
        Else
        {
            If (CurrentValue < -1000)
            {
                CurrentValue = -100;
            }
            Else
            {
                CurrentValue = (CurrentValue / 10);
            }
        }
    }
    Else
    {
        CurrentValue = 0;
    }
    If (Not ((GoK_EvaluationValue == CurrentValue)))
    {
        GoK_EvaluationValue = CurrentValue;
        Event.Broadcast("GoK_EvaluationValueChanged");
        Control.Wait(0);
    }
}

Define OnProgressChanged(string Progress) (warp=false)
{
    CurrentValue2 = Operator.Round(Progress);
    If (CurrentValue2 > 100)
    {
        CurrentValue2 = 100;
    }
    If (CurrentValue2 < 0)
    {
        CurrentValue2 = 0;
    }
    If (Not ((CurrentValue2 == GoK_ProgressValue)))
    {
        GoK_ProgressValue = CurrentValue2;
        Event.Broadcast("GoK_ProgressValueChanged");
        Control.Wait(0);
    }
}

Define OnRestart (warp=true)
{
    Looks.Say("");
    List.DeleteAll(Logfile);
    List.Hide(BoardHistory);
    List.Hide(GameMovesAN);
    List.Hide(ExportData);
    List.Hide(CreditsData);
    List.Hide(ExportMoves);
    List.Hide(Logfile);
    List.Hide(ProfilingData);
    Variable.Hide(IdxDeepening);
    Variable.Hide(BestSearchEvalRes);
    Variable.Hide(BestMove);
    Variable.Hide(NPS);
    Variable.Hide(MPS);
    Variable.Hide(PV);
    Variable.Hide(CustomThinkTime);
    ProfilerMode = -1;
    DebugMode = -1;
    TimeControl = -1;
    IdxDeepening = "";
    BestSearchEvalRes = "";
    BestMove = "";
    NPS = "";
    MPS = "";
    PV = "";
    CustomThinkTime = 0;
}

Define PickMove(string Depth)(bool Quiescence) (warp=true)
{
    Call //("Staged move-generator implementation");
    If (PickPhase[Depth] == 1)
    {
        Call //("Phase 1: Look up hash-move from transposition table");
        List.ReplaceItem(HashMove, Depth, "");
        List.ReplaceItem(HashMoveMetaData, Depth, "");
        List.ReplaceItem(PickedMoves, Depth, ":");
        List.ReplaceItem(PickedMoveCount, Depth, 0);
        List.ReplaceItem(MovesCount, Depth, 0);
        List.ReplaceItem(MovesIdx, Depth, 0);
        List.ReplaceItem(BestMoveListIdx, Depth, 0);
        List.ReplaceItem(QuiescentCheckMoveCount, Depth, 0);
        List.ReplaceItem(BoardAttackedCalculated, Depth, 0);
        List.DeleteAll(CalcMovesMoveList);
        List.DeleteAll(CalcMovesScoreList);
        List.DeleteAll(TmpList1);
        List.DeleteAll(TmpList2);
        Call ClearMoveList(Depth);
        If (Depth > 1)
        {
            Call TTProbeNode(CurrentBoardHash)(Depth);
            If (TTProbeRes == 1)
            {
                If (Not ((TTProbeNode.CheckedRes == "")))
                {
                    List.ReplaceItem(CheckedState, Depth, TTProbeNode.CheckedRes);
                    If ((Not ((TTProbeNode.BoardAttackedByOpp == ""))) And (Not ((TTProbeNode.BoardAttackedByOppPiece == ""))))
                    {
                        If (1 == 0)
                        {
                            List.ReplaceItem(CheckedStateAttackLines, Depth, TTProbeNode.CheckedAttackLinesRes);
                            Call //("Attack tables (number of attacks, square of LVA) retrieved from TT, convert flattened TT string structure to int lists");
                            Idx = 1;
                            Idx2 = (((Depth - 1) * 100) + 1);
                            Repeat (64)
                            {
                                List.ReplaceItem(BoardAttackedByOpponentSnapshot, Idx2, Operator.LetterOf(TTProbeNode.BoardAttackedByOpp, Idx));
                                List.ReplaceItem(BoardAttackedByOpponentPieceSnapshot, Idx2, ((Operator.LetterOf(TTProbeNode.BoardAttackedByOppPiece, ((Idx * 2) - 1)) * 10) + Operator.LetterOf(TTProbeNode.BoardAttackedByOppPiece, (Idx * 2))));
                                Idx += 1;
                                Idx2 += 1;
                            }
                            List.ReplaceItem(BoardAttackedCalculated, Depth, 1);
                        }
                    }
                }
                If (Not ((TTProbeNode.BestMoveRes == "")))
                {
                    MP.SourceIdx = floor((TTProbeNode.BestMoveRes / 100));
                    TargetIdx = floor((TTProbeNode.BestMoveRes % 100));
                    If (((Not (Quiescence)) And (Not ((TTProbeNode.HorizonRes == -1)))) Or (Quiescence And (TTProbeNode.HorizonRes == -1)))
                    {
                        If (Not ((MP.SourceIdx == 0)))
                        {
                            If (1 == 0)
                            {
                                If (abs(Board[MP.SourceIdx]) == GoK_BlackKing)
                                {
                                    Call CalcBoardAttackedOnDemand(Depth)((1 == 0))((1 == 1))(99);
                                }
                                Else
                                {
                                    Call CalcBoardAttackedOnDemand(Depth)(Quiescence)((1 == 1))(0);
                                }
                                Call GenerateMovesForSourceEx(Depth)(MP.SourceIdx)((1 == 0))(Quiescence);
                                If List.ContainsItem(CalcMovesMoveList, TTProbeNode.BestMoveRes)
                                {
                                }
                            }
                            Call ClearMoveList(Depth);
                            Call AddMoveToList(TTProbeNode.BestMoveRes)(Depth);
                            List.ReplaceItem(MovesIdx, Depth, 1);
                            List.ReplaceItem(PickPhase, Depth, 2);
                            List.ReplaceItem(PickMoveRes, Depth, 1);
                            List.ReplaceItem(HashMove, Depth, TTProbeNode.BestMoveRes);
                            Stop(this script);
                        }
                    }
                }
            }
        }
        List.ReplaceItem(PickPhase, Depth, 2);
    }
    If (PickPhase[Depth] == 2)
    {
        Call //("Phase 2: Search for MVV-LVA captures via attack tables (and from recently moved pieces when attack tables not up-to-date)");
        If ((Depth < 4) Or ((CheckedState[Depth] == 1) Or (IsEndgame2 == 1)))
        {
            List.ReplaceItem(PickPhase, Depth, 6);
        }
        Else
        {
            List.DeleteAll(TmpList1);
            List.DeleteAll(TmpList2);
            List.DeleteAll(TmpList3);
            List.DeleteAll(TmpList4);
            Call //("Look for net positive attacks via attack tables");
            Call CalcBoardAttackedByMove((Depth + 2));
            MoveGen.TargetIdx = 1;
            Repeat (64)
            {
                If ((Board[MoveGen.TargetIdx] * DepthEvalFactor[Depth]) < 0)
                {
                    If ((((Depth % 2) == 1) And (BoardAttackedByBlack[MoveGen.TargetIdx] > 0)) Or (((Depth % 2) == 0) And (BoardAttackedByWhite[MoveGen.TargetIdx] > 0)))
                    {
                        If ((Depth % 2) == 1)
                        {
                            MoveGen.SourceIdx = BoardAttackedByBlackPiece[MoveGen.TargetIdx];
                        }
                        Else
                        {
                            MoveGen.SourceIdx = BoardAttackedByWhitePiece[MoveGen.TargetIdx];
                        }
                        MoveGen.SourcePiece = Board[MoveGen.SourceIdx];
                        If ((MoveGen.SourcePiece * DepthEvalFactor[Depth]) > 0)
                        {
                            If (Not ((MoveToHash[((((DepthEvalFactor[Depth] + 1) * 30000) + (PieceIdxLookup[abs(MoveGen.SourcePiece)] * 10000)) + ((MoveGen.SourceIdx * 100) + MoveGen.TargetIdx))] == 0)))
                            {
                                Call StagedMoveGenMVVLVA(Depth)(MoveGen.SourceIdx)(MoveGen.TargetIdx)(abs(MoveGen.SourcePiece))(abs(Board[MoveGen.TargetIdx]))(floor((AppliedMove[(Depth - 1)] % 100)));
                            }
                        }
                    }
                }
                MoveGen.TargetIdx += 1;
            }
            Call //("Sort found captures and prepare for move loop ");
            If (List.Length(TmpList1) > 0)
            {
                If (List.Length(TmpList1) == 1)
                {
                    Call AddMoveToList(TmpList1[1])(Depth);
                }
                Else
                {
                    List.DeleteAll(CalcMovesMoveList);
                    List.DeleteAll(CalcMovesScoreList);
                    Idx = 1;
                    Repeat (List.Length(TmpList1))
                    {
                        List.Add(CalcMovesMoveList, TmpList1[Idx]);
                        List.Add(CalcMovesScoreList, TmpList2[Idx]);
                        Idx += 1;
                    }
                    Call SortMoveList((Depth + 2));
                    List.ReplaceItem(MovesIdx, (Depth + 2), 1);
                    Repeat (MovesCount[(Depth + 2)])
                    {
                        Call GetCurrentMove((Depth + 2));
                        Call AddMoveToList(CurrentMove)(Depth);
                        List.ReplaceItem(MovesIdx, (Depth + 2), (MovesIdx[(Depth + 2)] + 1));
                    }
                }
            }
            List.ReplaceItem(PickPhase, Depth, 3);
        }
    }
    If (PickPhase[Depth] == 3)
    {
        Call //("Phase 3: Return moves found in phase 2 on subsequent PickMove() invocations");
        If (MovesIdx[Depth] < MovesCount[Depth])
        {
            List.ReplaceItem(MovesIdx, Depth, (MovesIdx[Depth] + 1));
            List.ReplaceItem(PickMoveRes, Depth, 1);
            Stop(this script);
        }
        List.ReplaceItem(PickPhase, Depth, 4);
    }
    If (PickPhase[Depth] == 4)
    {
        Call //("Phase 4: Search for killer moves applicable on current board");
        If ((Quiescence Or (CheckedState[Depth] == 1)) Or (Depth == 1))
        {
            Call //("During quiescence search or when in check, quiet killer moves are of no interest => skip");
            List.ReplaceItem(PickPhase, Depth, 6);
        }
        Else
        {
            Call CalcBoardAttackedOnDemand(Depth)(Quiescence)((1 == 1))(99);
            List.DeleteAll(TmpList1);
            List.DeleteAll(TmpList2);
            Call PrepareCurrentKillerMoves(Depth);
            CurrentValue = HistoryCounterMoves[AppliedMove[(Depth - 1)]];
            If (Not ((CurrentValue == "")))
            {
                List.InsertItem(CurrentKillerMoves, 1, CurrentValue);
            }
            MoveGen.Idx = List.Length(CurrentKillerMoves);
            Repeat Until (MoveGen.Idx == 0)
            {
                Caller.CurrentMove = CurrentKillerMoves[MoveGen.Idx];
                MoveGen.SourceIdx = floor((Caller.CurrentMove / 100));
                MoveGen.TargetIdx = floor((Caller.CurrentMove % 100));
                MoveGen.SourcePiece = Board[MoveGen.SourceIdx];
                If ((MoveGen.SourceIdx > 0) And (Board[MoveGen.TargetIdx] == 0))
                {
                    If ((MoveGen.SourcePiece * DepthEvalFactor[Depth]) > 0)
                    {
                        If (Not ((MoveToHash[((((DepthEvalFactor[Depth] + 1) * 30000) + (PieceIdxLookup[abs(MoveGen.SourcePiece)] * 10000)) + ((MoveGen.SourceIdx * 100) + MoveGen.TargetIdx))] == 0)))
                        {
                            Call //("When killer move is applicable, add to temp list");
                            Call StagedMoveGenKillerMoves(Depth)(Caller.CurrentMove)(MoveGen.SourceIdx)(MoveGen.TargetIdx)(abs(MoveGen.SourcePiece));
                        }
                    }
                }
                MoveGen.Idx += -1;
            }
            If (List.Length(TmpList1) > 0)
            {
                Call //("Convert temp list to move list and sort moves");
                If (List.Length(TmpList1) == 1)
                {
                    Call AddMoveToList(TmpList1[1])(Depth);
                }
                Else
                {
                    List.DeleteAll(CalcMovesMoveList);
                    List.DeleteAll(CalcMovesScoreList);
                    Idx = 1;
                    Repeat (List.Length(TmpList1))
                    {
                        List.Add(CalcMovesMoveList, TmpList1[Idx]);
                        List.Add(CalcMovesScoreList, TmpList2[Idx]);
                        Idx += 1;
                    }
                    Call SortMoveList((Depth + 2));
                    List.ReplaceItem(MovesIdx, (Depth + 2), 1);
                    Repeat (MovesCount[(Depth + 2)])
                    {
                        Call GetCurrentMove((Depth + 2));
                        Call AddMoveToList(CurrentMove)(Depth);
                        List.ReplaceItem(MovesIdx, (Depth + 2), (MovesIdx[(Depth + 2)] + 1));
                    }
                }
            }
            List.ReplaceItem(PickPhase, Depth, 5);
        }
    }
    If (PickPhase[Depth] == 5)
    {
        Call //("Phase 5: Return moves found in phase 4 on subsequent PickMove() invocations");
        If (MovesIdx[Depth] < MovesCount[Depth])
        {
            List.ReplaceItem(MovesIdx, Depth, (MovesIdx[Depth] + 1));
            List.ReplaceItem(PickMoveRes, Depth, 1);
            Stop(this script);
        }
        List.ReplaceItem(PickPhase, Depth, 6);
    }
    If (PickPhase[Depth] == 6)
    {
        Call //("Phase 6: Full move generator for all moves not found yet");
        Call //("Create attack tables in case not found in TT");
        Call CalcBoardAttackedOnDemand(Depth)(Quiescence)((1 == 1))(99);
        Call //("Invoke full move generator. When in check, only create evasions");
        Call GenerateMovesImplWrapper(Depth)((1 == 0))((Quiescence And (CheckedState[Depth] == 0)));
        If (GenerateMovesRequiresAttackRecalc == 1)
        {
            Call //("Move generator will raise this error when creating king moves without having provided current attack tables (can only happen during quiescence search) => create them and invoke again");
            Call CalcBoardAttackedByMove((Depth + 1));
            Call StoreAttackInfo(Depth);
            List.ReplaceItem(BoardAttackedCalculated, Depth, 1);
            Call GenerateMovesImplWrapper(Depth)((1 == 0))((Quiescence And (CheckedState[Depth] == 0)));
        }
        List.ReplaceItem(MovesIdx, Depth, 0);
        List.ReplaceItem(PickPhase, Depth, 7);
    }
    If (PickPhase[Depth] == 7)
    {
        Call //("Phase 7: Return moves detected in phase 6 on each invocation, skip those applied in earlier stages");
        If (MovesIdx[Depth] < MovesCount[Depth])
        {
            List.ReplaceItem(MovesIdx, Depth, (MovesIdx[Depth] + 1));
            If (Variable.Length(PickedMoves[Depth]) > 0)
            {
                Call GetCurrentMove(Depth);
                Call GetNormalizedMove(CurrentMove);
                Repeat Until (Not (Operator.Contains(PickedMoves[Depth], NormalzedMoveRes)))
                {
                    List.ReplaceItem(MovesIdx, Depth, (MovesIdx[Depth] + 1));
                    If (MovesIdx[Depth] > MovesCount[Depth])
                    {
                        List.ReplaceItem(PickPhase, Depth, "*");
                        List.ReplaceItem(PickMoveRes, Depth, 0);
                        Stop(this script);
                    }
                    Call GetCurrentMove(Depth);
                    Call GetNormalizedMove(CurrentMove);
                }
            }
            List.ReplaceItem(PickMoveRes, Depth, 1);
            Stop(this script);
        }
        Call //("* as PickPhase indicates we are done");
        List.ReplaceItem(PickPhase, Depth, "*");
        List.ReplaceItem(PickMoveRes, Depth, 0);
    }
    List.ReplaceItem(PickMoveRes, Depth, 0);
}

Define PrepareCurrentKillerMoves(string Depth) (warp=true)
{
    If (Not ((List.Length(CurrentKillerMoves) == 2)))
    {
        List.DeleteAll(CurrentKillerMoves);
        List.Add(CurrentKillerMoves, "");
        List.Add(CurrentKillerMoves, "");
    }
    Idx = (((Depth - 1) * 2) + 1);
    List.ReplaceItem(CurrentKillerMoves, 1, KillerMoves[(Idx + 0)]);
    List.ReplaceItem(CurrentKillerMoves, 2, KillerMoves[(Idx + 1)]);
}

Define ProfilerMethodEnter(string Id) (warp=true)
{
    If ((ProfilerMode % 10) == 2)
    {
        Repeat Until (Not ((List.Length(ProfilingData) < Id)))
        {
            List.Add(ProfilingData, 0);
        }
        List.ReplaceItem(ProfilingData, Id, (ProfilingData[Id] - ((Sensing.DaysSince2000() * 24) * 3600)));
    }
}

Define ProfilerMethodExit(string Id) (warp=false)
{
    If ((ProfilerMode % 10) == 2)
    {
        List.ReplaceItem(ProfilingData, Id, (ProfilingData[Id] + ((Sensing.DaysSince2000() * 24) * 3600)));
    }
}

Define ProfilerReset (warp=true)
{
    List.DeleteItem(ProfilingData, all);
}

Define QuickSort (warp=true)
{
    List.DeleteAll(QSPartStack);
    Call QuickSortImpl(1)(List.Length(CalcMovesScoreList));
}

Define QuickSortImpl(string Lo)(string Hi) (warp=true)
{
    QSPivot = CalcMovesScoreList[floor(((Lo + Hi) / 2))];
    QSLower = Lo;
    QSUpper = Hi;
    Repeat Until (QSLower > QSUpper)
    {
        Repeat Until (Not ((CalcMovesScoreList[QSLower] < QSPivot)))
        {
            QSLower += 1;
        }
        Repeat Until (Not ((CalcMovesScoreList[QSUpper] > QSPivot)))
        {
            QSUpper += -1;
        }
        If (Not ((QSLower > QSUpper)))
        {
            QSSwap = CalcMovesScoreList[QSLower];
            List.ReplaceItem(CalcMovesScoreList, QSLower, CalcMovesScoreList[QSUpper]);
            List.ReplaceItem(CalcMovesScoreList, QSUpper, QSSwap);
            QSSwap = CalcMovesMoveList[QSLower];
            List.ReplaceItem(CalcMovesMoveList, QSLower, CalcMovesMoveList[QSUpper]);
            List.ReplaceItem(CalcMovesMoveList, QSUpper, QSSwap);
            QSLower += 1;
            QSUpper += -1;
        }
    }
    If (Lo < QSUpper)
    {
        List.Add(QSPartStack, QSLower);
        Call QuickSortImpl(Lo)(QSUpper);
        QSLower = QSPartStack[List.Length(QSPartStack)];
        List.DeleteItem(QSPartStack, List.Length(QSPartStack));
    }
    If (QSLower < Hi)
    {
        Call QuickSortImpl(QSLower)(Hi);
    }
}

Define RevertMove(num Depth) (warp=true)
{
    CurrentMove = AppliedMove[Depth];
    SourceIdx = floor((CurrentMove / 100));
    If (SourceIdx > 0)
    {
        TargetIdx = floor((CurrentMove % 100));
        SourcePiece = Board[TargetIdx];
        If (abs(Board[TargetIdx]) == GoK_BlackPawn)
        {
            List.ReplaceItem(EnPassantTarget, (Depth + 1), "");
        }
        List.ReplaceItem(Board, SourceIdx, Board[TargetIdx]);
        List.ReplaceItem(Board, TargetIdx, 0);
        List.ReplaceItem(Board, TargetPiecesIdx[Depth], TargetPieces[Depth]);
        If (PromotionPieces[Depth] > 0)
        {
            PromotionVal = Operator.LetterOf(CurrentMove, Variable.Length(CurrentMove));
            If (PromotionVal == 1)
            {
                BlackQueenCountLocal += -1;
            }
            If (PromotionVal == 2)
            {
                BlackRookCountLocal += -1;
                BlackMinorCountLocal += -1;
            }
            If (PromotionVal == 3)
            {
                BlackBishopCountLocal += -1;
                BlackMinorCountLocal += -1;
            }
            If (PromotionVal == 4)
            {
                BlackMinorCountLocal += -1;
            }
            List.ReplaceItem(Board, SourceIdx, GoK_BlackPawn);
            BlackPawnCountLocal += 1;
            SourcePiece = GoK_BlackPawn;
        }
        Else
        {
            If (PromotionPieces[Depth] < 0)
            {
                PromotionVal = Operator.LetterOf(CurrentMove, Variable.Length(CurrentMove));
                If (PromotionVal == 1)
                {
                    WhiteQueenCountLocal += -1;
                }
                If (PromotionVal == 2)
                {
                    WhiteRookCountLocal += -1;
                    WhiteMinorCountLocal += -1;
                }
                If (PromotionVal == 3)
                {
                    WhiteBishopCountLocal += -1;
                    WhiteMinorCountLocal += -1;
                }
                If (PromotionVal == 4)
                {
                    WhiteMinorCountLocal += -1;
                }
                List.ReplaceItem(Board, SourceIdx, GoK_WhitePawn);
                WhitePawnCountLocal += 1;
                SourcePiece = GoK_WhitePawn;
            }
        }
        If (Board[SourceIdx] == GoK_BlackKing)
        {
            BlackKingIdx = SourceIdx;
        }
        If (Board[SourceIdx] == GoK_WhiteKing)
        {
            WhiteKingIdx = SourceIdx;
        }
        TargetPiece = TargetPieces[Depth];
        If (TargetPiece > 0)
        {
            If (TargetPiece == GoK_BlackPawn)
            {
                BlackPawnCountLocal += 1;
            }
            Else
            {
                If (TargetPiece < GoK_BlackQueen)
                {
                    BlackMinorCountLocal += 1;
                    If (TargetPiece == GoK_BlackRook)
                    {
                        BlackRookCountLocal += 1;
                    }
                    If (TargetPiece == GoK_BlackBishop)
                    {
                        BlackBishopCountLocal += 1;
                    }
                }
                Else
                {
                    If (TargetPiece == GoK_BlackQueen)
                    {
                        BlackQueenCountLocal += 1;
                    }
                }
            }
        }
        If (TargetPiece < 0)
        {
            If (TargetPiece == GoK_WhitePawn)
            {
                WhitePawnCountLocal += 1;
            }
            Else
            {
                If (TargetPiece > GoK_WhiteQueen)
                {
                    WhiteMinorCountLocal += 1;
                    If (TargetPiece == GoK_WhiteRook)
                    {
                        WhiteRookCountLocal += 1;
                    }
                    If (TargetPiece == GoK_WhiteBishop)
                    {
                        WhiteBishopCountLocal += 1;
                    }
                }
                Else
                {
                    If (TargetPiece == GoK_WhiteQueen)
                    {
                        WhiteQueenCountLocal += 1;
                    }
                }
            }
        }
    }
    Else
    {
        If (CurrentMove == GoK_WhiteKingsideCastling)
        {
            List.ReplaceItem(Board, VirtualBoard[61], GoK_WhiteKing);
            List.ReplaceItem(Board, VirtualBoard[62], 0);
            List.ReplaceItem(Board, VirtualBoard[63], 0);
            List.ReplaceItem(Board, VirtualBoard[64], GoK_WhiteRook);
            WhiteKingIdx = VirtualBoard[61];
        }
        Else
        {
            If (CurrentMove == GoK_WhiteQueensideCastling)
            {
                List.ReplaceItem(Board, VirtualBoard[57], GoK_WhiteRook);
                List.ReplaceItem(Board, VirtualBoard[59], 0);
                List.ReplaceItem(Board, VirtualBoard[60], 0);
                List.ReplaceItem(Board, VirtualBoard[61], GoK_WhiteKing);
                WhiteKingIdx = VirtualBoard[61];
            }
            Else
            {
                If (CurrentMove == GoK_BlackKingsideCastling)
                {
                    List.ReplaceItem(Board, VirtualBoard[5], GoK_BlackKing);
                    List.ReplaceItem(Board, VirtualBoard[6], 0);
                    List.ReplaceItem(Board, VirtualBoard[7], 0);
                    List.ReplaceItem(Board, VirtualBoard[8], GoK_BlackRook);
                    BlackKingIdx = VirtualBoard[5];
                }
                Else
                {
                    If (CurrentMove == GoK_BlackQueensideCastling)
                    {
                        List.ReplaceItem(Board, VirtualBoard[1], GoK_BlackRook);
                        List.ReplaceItem(Board, VirtualBoard[4], 0);
                        List.ReplaceItem(Board, VirtualBoard[3], 0);
                        List.ReplaceItem(Board, VirtualBoard[5], GoK_BlackKing);
                        BlackKingIdx = VirtualBoard[5];
                    }
                }
            }
        }
    }
    CurrentBoardHash = PreviousBoardHash[Depth];
    CurrentBoardHashKP = PreviousBoardHashKP[Depth];
    List.ReplaceItem(AppliedMove, Depth, "");
    List.ReplaceItem(PosEvalDelta, Depth, 0);
    List.ReplaceItem(SourcePieces, Depth, 0);
    List.ReplaceItem(TargetPiecesIdx, Depth, "");
    List.ReplaceItem(TargetPieces, Depth, 0);
    List.ReplaceItem(PromotionPieces, Depth, 0);
    If (Depth == 1)
    {
        List.ReplaceItem(CastlingState, Depth, Operator.Join(Operator.Join(Operator.Join(HasBlackCastled, HasBlackKingMoved), Operator.Join(HasBlackRookKSMoved, HasBlackRookQSMoved)), Operator.Join(Operator.Join(HasWhiteCastled, HasWhiteKingMoved), Operator.Join(HasWhiteRookKSMoved, HasWhiteRookQSMoved))));
    }
    Else
    {
        List.ReplaceItem(CastlingState, Depth, CastlingState[(Depth - 1)]);
    }
}

Define RevertMoveLight(string Depth) (warp=true)
{
    CurrentMove = AppliedMove[Depth];
    SourceIdx = floor((CurrentMove / 100));
    If (SourceIdx > 0)
    {
        TargetIdx = floor((CurrentMove % 100));
        List.ReplaceItem(Board, SourceIdx, Board[TargetIdx]);
        List.ReplaceItem(Board, TargetIdx, 0);
        List.ReplaceItem(Board, TargetPiecesIdx[Depth], TargetPieces[Depth]);
    }
    Else
    {
        If (CurrentMove == GoK_WhiteKingsideCastling)
        {
            List.ReplaceItem(Board, VirtualBoard[61], GoK_WhiteKing);
            List.ReplaceItem(Board, VirtualBoard[62], 0);
            List.ReplaceItem(Board, VirtualBoard[63], 0);
            List.ReplaceItem(Board, VirtualBoard[64], GoK_WhiteRook);
        }
        Else
        {
            If (CurrentMove == GoK_WhiteQueensideCastling)
            {
                List.ReplaceItem(Board, VirtualBoard[57], GoK_WhiteRook);
                List.ReplaceItem(Board, VirtualBoard[59], 0);
                List.ReplaceItem(Board, VirtualBoard[60], 0);
                List.ReplaceItem(Board, VirtualBoard[61], GoK_WhiteKing);
            }
            Else
            {
                If (CurrentMove == GoK_BlackKingsideCastling)
                {
                    List.ReplaceItem(Board, VirtualBoard[5], GoK_BlackKing);
                    List.ReplaceItem(Board, VirtualBoard[6], 0);
                    List.ReplaceItem(Board, VirtualBoard[7], 0);
                    List.ReplaceItem(Board, VirtualBoard[8], GoK_BlackRook);
                }
                Else
                {
                    If (CurrentMove == GoK_BlackQueensideCastling)
                    {
                        List.ReplaceItem(Board, VirtualBoard[1], GoK_BlackRook);
                        List.ReplaceItem(Board, VirtualBoard[4], 0);
                        List.ReplaceItem(Board, VirtualBoard[3], 0);
                        List.ReplaceItem(Board, VirtualBoard[5], GoK_BlackKing);
                    }
                }
            }
        }
    }
    CurrentBoardHash = PreviousBoardHash[Depth];
}

Define SayAsync(string Text)(num Duration) (warp=false)
{
    SayAsyncText = Text;
    SayAsyncDuration = Duration;
    Event.Broadcast("sayasyncmsg");
}

Define Search(string Alpha)(string Beta)(string MinDepth)(string MaxDepth)(bool InitialDeepening)(string QuiescenceDepth)(bool ShowProgress) (warp=true)
{
    SearchAlpha = Alpha;
    SearchBeta = Beta;
    SearchEvalRes = "";
    SearchMoveRes = "";
    Call InitSearch((MaxDepth - 1))(InitialDeepening);
    Call Evaluate(0)((1 == 1));
    List.ReplaceItem(Alphas, MinDepth, Alpha);
    List.ReplaceItem(Betas, MinDepth, Beta);
    MoveCount = 0;
    MoveCountQ = 0;
    NodeCount = 0;
    NodeCountQ = 0;
    ProfBestMoveCount = 0;
    ProfBestMoveIdxSum = 0;
    ProfBestMoveCountQ = 0;
    ProfBestMoveIdxSumQ = 0;
    SearchTimer = (Sensing.DaysSince2000() * 86400);
    Call SearchImpl(MinDepth)(InitialDeepening)(QuiescenceDepth)((1 == 0))(ShowProgress)((MaxDepth - 1))((1 == 0))("");
    SearchTimer = ((Sensing.DaysSince2000() * 86400) - SearchTimer);
    Call ExportBoardFEN((IsPlayerBlack == 1))((1 == 0));
    Call Log("PV: ")("[FEN "")(ExportDataFEN)(""] ")(PV)("")("")("");
    If ((ProfilerMode % 10) > 0)
    {
        Call Log("========================================")("")("")("")("")("")("")("");
        Call Log("SEARCH STATS")("")("")("")("")("")("")("");
        Call Log("========================================")("")("")("")("")("")("")("");
        Call Log("Depth = ")((MaxDepth - 1))(", Time = ")((Operator.Round((SearchTimer * 100)) / 100))("")("")("")("");
        Call Log(MoveCount)(" moves (full), ")((Operator.Round(((MoveCount / SearchTimer) / 100)) / 10))("k MPS")("")("")("")("");
        Call Log(NodeCount)(" nodes (full), ")((Operator.Round(((NodeCount / SearchTimer) / 100)) / 10))("k NPS")("")("")("")("");
        Call Log(MoveCountQ)(" moves (q), ")((Operator.Round(((MoveCountQ / SearchTimer) / 100)) / 10))("k MPS")("")("")("")("");
        Call Log(NodeCountQ)(" nodes (q), ")((Operator.Round(((NodeCountQ / SearchTimer) / 100)) / 10))("k NPS")("")("")("")("");
        Call Log((MoveCount + MoveCountQ))(" moves (all), ")((Operator.Round((((MoveCount + MoveCountQ) / SearchTimer) / 100)) / 10))("k MPS")("")("")("")("");
        Call Log((NodeCount + NodeCountQ))(" nodes (all), ")((Operator.Round((((NodeCount + NodeCountQ) / SearchTimer) / 100)) / 10))("k NPS")("")("")("")("");
        Call Log("Avg. best move idx (full) = ")((Operator.Round(((ProfBestMoveIdxSum / ProfBestMoveCount) * 100)) / 100))("")("")("")("")("")("");
        Call Log("Avg. best move idx (q) = ")((Operator.Round(((ProfBestMoveIdxSumQ / ProfBestMoveCountQ) * 100)) / 100))("")("")("")("")("")("");
        Call Log("========================================")("")("")("")("")("")("")("");
    }
    MPS = Operator.Round(((MoveCount + MoveCountQ) / SearchTimer));
    NPS = Operator.Round(((NodeCount + NodeCountQ) / SearchTimer));
}

Define SearchImpl(string Depth)(bool InitialDeepening)(string QuiescenceDepth)(bool Quiescence)(bool ShowProgress)(string Horizon)(bool Cutnode)(string ExcludedMove) (warp=true)
{
    Call //("Search function (minimax / alpha-beta pruning)");
    List.ReplaceItem(SearchEvalResults, (Depth + 0), "");
    List.ReplaceItem(SearchEvalResultsIsDynamic, (Depth + 0), 0);
    List.ReplaceItem(NodeTypes, (Depth + 0), "E");
    List.ReplaceItem(BestMoves, (Depth + 0), "");
    List.ReplaceItem(AppliedMove, (Depth + 0), "");
    List.ReplaceItem(BoardEval, (Depth + 0), "");
    List.ReplaceItem(PV, (((Depth - 1) * MaxSearchDepthStackFrames) + 1), 0);
    If (IsSearchTimeout == 1)
    {
        Stop(this script);
    }
    If (Depth > 1)
    {
        List.ReplaceItem(CheckedState, (Depth + 0), PutsInCheck[(Depth - 1)]);
    }
    Else
    {
        List.ReplaceItem(CheckedState, (Depth + 0), "");
    }
    If Quiescence
    {
        List.ReplaceItem(Quiescence, (Depth + 0), 1);
    }
    Else
    {
        List.ReplaceItem(Quiescence, (Depth + 0), 0);
    }
    Call //("Fast checkmate/draw detection + TT evaluation probing");
    Call Search_DetectCheckmate(Depth);
    If (Not ((SearchEvalResults[(Depth + 0)] == "")))
    {
        Stop(this script);
    }
    Call Search_DetectDrawByRepetition(Depth)(Quiescence);
    If (Not ((SearchEvalResults[(Depth + 0)] == "")))
    {
        Stop(this script);
    }
    Call Search_DetectDraw(Depth)(Horizon);
    If (Not ((SearchEvalResults[(Depth + 0)] == "")))
    {
        Stop(this script);
    }
    Call Search_TTProbeEval(Depth)(InitialDeepening)(Quiescence)(Horizon)(ExcludedMove);
    If (Not ((SearchEvalResults[(Depth + 0)] == "")))
    {
        Stop(this script);
    }
    Call //("We could not return prematurely => initialize stack data for additional functionality");
    Call Search_InitStack(Depth)(InitialDeepening);
    Call Evaluate((Depth - 1))((1 == 0));
    If (Horizon == 0)
    {
        Call //("Search tree leaf reached => evaluate board and return result");
        Call //("This will seldomly be invoked, as the usual search termination is quiescence search having reached a quite position");
        Call Evaluate((Depth - 1))((1 == 1));
        List.ReplaceItem(SearchEvalResults, Depth, EvaluationRes);
        List.ReplaceItem(SearchEvalResultsIsDynamic, Depth, EvaluationIsDynamicRes);
        Stop(this script);
    }
    If (Not (Quiescence))
    {
        If (((Depth > 1) And (IsInNullMove == 0)) And ((ExcludedMove == "") And (CheckedState[Depth] == 0)))
        {
            Call //("IIR");
            HorizonLoc = Horizon;
            Call TTProbeNode(CurrentBoardHash)(Depth);
            If (TTProbeRes == 0)
            {
                If (Horizon > 2)
                {
                    HorizonLoc += -1;
                }
                If (Not (((Betas[Depth] - Alphas[Depth]) == 1)))
                {
                    HorizonLoc += -1;
                }
            }
            If (HorizonLoc < 1)
            {
                List.ReplaceItem(Alphas, (Depth + 1), Alphas[Depth]);
                List.ReplaceItem(Betas, (Depth + 1), Betas[Depth]);
                Call SearchImpl((Depth + 1))(InitialDeepening)((QuiescenceDepth - 1))((1 == 1))(ShowProgress)(1)((1 == 1))("");
                List.ReplaceItem(SearchEvalResults, Depth, SearchEvalResults[(Depth + 1)]);
                List.ReplaceItem(SearchEvalResultsIsDynamic, Depth, SearchEvalResultsIsDynamic[(Depth + 1)]);
                Stop(this script);
            }
            Call Search_ReverseFutilityPruning(Depth)(Horizon);
            If (Not ((SearchEvalResults[Depth] == "")))
            {
                Stop(this script);
            }
            Call Search_NullMovePruning(Depth)(InitialDeepening)(QuiescenceDepth)(Quiescence)(ShowProgress)(Horizon)(Cutnode);
            If (Not ((SearchEvalResults[Depth] == "")))
            {
                Stop(this script);
            }
        }
    }
    Else
    {
        Call //("Quiescence search => standing pat handling (unless in check and must evade)");
        Call //("Important to consider in subsequent code that node eval might be set from here on");
        If (CheckedState[Depth] == 1)
        {
            Call //("Put a checkmate baseline into node eval, which must be improved later by at east one move that gets us out of check");
            If ((Depth % 2) == 1)
            {
                List.ReplaceItem(SearchEvalResults, Depth, (-100000 + (Depth * 1000)));
            }
            Else
            {
                List.ReplaceItem(SearchEvalResults, Depth, (100000 - (Depth * 1000)));
            }
        }
        Else
        {
            Call //("Invoke full eval to establish standing pat value");
            Call Evaluate((Depth - 1))((1 == 1));
            List.ReplaceItem(BoardEval, Depth, EvaluationRes);
            List.ReplaceItem(SearchEvalResults, Depth, EvaluationRes);
            List.ReplaceItem(SearchEvalResultsIsDynamic, Depth, EvaluationIsDynamicRes);
            If ((Depth % 2) == 1)
            {
                If (Not ((EvaluationRes < Betas[Depth])))
                {
                    Call //("Failing high => cutoff");
                    Stop(this script);
                }
                If (EvaluationRes > Alphas[Depth])
                {
                    List.ReplaceItem(Alphas, Depth, EvaluationRes);
                }
            }
            Else
            {
                If (Not ((EvaluationRes > Alphas[Depth])))
                {
                    Call //("Failing high => cutoff");
                    Stop(this script);
                }
                If (EvaluationRes < Betas[Depth])
                {
                    List.ReplaceItem(Betas, Depth, EvaluationRes);
                }
            }
        }
    }
    If (BoardEval[Depth] == "")
    {
        If (CheckedState[Depth] == 0)
        {
            If (((Not (Quiescence)) And (((Depth > 1) And (Horizon < 6)) And ((Betas[Depth] - Alphas[Depth]) == 1))) Or Quiescence)
            {
                Call Evaluate((Depth - 1))((1 == 1));
                List.ReplaceItem(BoardEval, Depth, EvaluationRes);
            }
        }
    }
    List.ReplaceItem(PickPhase, Depth, 1);
    List.ReplaceItem(PickMoveRes, Depth, 1);
    Call //("Move generation and move loop");
    Repeat Until (PickMoveRes[Depth] == 0)
    {
        If ((Not (Quiescence)) And ((Depth == 1) Or (Horizon > (4 - (3 * IsScratch3)))))
        {
            If ((IsSearchTimeout == 0) And ((Not (InitialDeepening)) Or (Not ((SearchMoveRes == "")))))
            {
                If (((Sensing.DaysSince2000() * 86400) - ThinkTimeStart) > ThinkTimeLimitSearch)
                {
                    IsSearchTimeout = 1;
                }
            }
        }
        If (IsSearchTimeout == 1)
        {
            If (Quiescence[Depth] == 0)
            {
                MoveCount += MovesCount[Depth];
            }
            Else
            {
                MoveCountQ += MovesCount[Depth];
            }
            Stop(this script);
        }
        If (((Not (Quiescence)) And (Horizon > 5)) And ((CheckedState[Depth] == 0) And (Not (((Betas[Depth] - Alphas[Depth]) == 1)))))
        {
            Call TTProbeNode(CurrentBoardHash)(Depth);
            If ((TTProbeRes == 0) Or (TTProbeNode.BestMoveRes == ""))
            {
                Call SearchNextPly(Depth)(InitialDeepening)(QuiescenceDepth)(Quiescence)(ShowProgress)(Horizon)(3)((1 == 0))("");
            }
        }
        If (IsBlockProfilerEnabled == 1)
        {
            Call ProfilerMethodEnter(((5 * MaxSearchDepthStackFrames) + Depth));
        }
        Call //("Invoke staged move generator and apply next move from list");
        Call PickMove(Depth)(Quiescence);
        If (IsBlockProfilerEnabled == 1)
        {
            Call ProfilerMethodExit(((5 * MaxSearchDepthStackFrames) + Depth));
        }
        If (PickMoveRes[Depth] == 1)
        {
            Call ApplyMoveLight(Depth);
            Call //("Show progress and collect statistics");
            If (ShowProgress And ((Depth == 1) Or (Horizon > (4 - (3 * IsScratch3)))))
            {
                CurrentValue = (Sensing.DaysSince2000() * 86400);
                If (CurrentValue > (PrevProgressUpdate + 1))
                {
                    Call OnProgressChanged((((CurrentValue - ThinkTimeStart) / ThinkTimeLimitSearch) * 100));
                    PrevProgressUpdate = CurrentValue;
                }
            }
            List.ReplaceItem(PutsInCheck, Depth, 0);
            List.ReplaceItem(SearchExtensionTagged, Depth, 0);
            List.ReplaceItem(SearchExtension, Depth, 0);
            If (Depth == 1)
            {
                List.ReplaceItem(Ply1Scores, floor((AppliedMove[Depth] * 10)), "");
            }
            Caller.SourceIdx = floor((AppliedMove[Depth] / 100));
            Caller.TargetIdx = floor((AppliedMove[Depth] % 100));
            Call //("Fast check detection for current move");
            Call IsCheckingPiece(Caller.TargetIdx);
            If (IsCheckingPieceRes == 1)
            {
                List.ReplaceItem(PutsInCheck, Depth, 1);
                Call TTStoreNode(CurrentBoardHash)((Depth + 1))("")("")("")(1)("")("")("")("")("")("")("")("");
            }
            Call //("Fast discovered check detection for current move");
            Call IsCheckingPieceDiscovery(Caller.SourceIdx)(Caller.TargetIdx)(Depth);
            If (IsCheckingPieceRes == 1)
            {
                List.ReplaceItem(PutsInCheck, Depth, 1);
                Call TTStoreNode(CurrentBoardHash)((Depth + 1))("")("")("")(1)("")("")("")("")("")("")("")("");
            }
            Eval = "";
            Call Search_FutilityPruning(Depth)(Quiescence)(Horizon)(ExcludedMove);
            If (IsFutile == 1)
            {
                If ((Depth == 1) And (IsSearchTimeout == 0))
                {
                    List.Add(SearchRootMovesDone, AppliedMove[Depth]);
                }
            }
            Call RevertMoveLight(Depth);
            If (IsFutile == 0)
            {
                If ((Not (Quiescence)) And (MovesIdx[Depth] == 1))
                {
                    If (1 == 0)
                    {
                        Call Search_SingularExtensions(Depth)(InitialDeepening)(QuiescenceDepth)(Quiescence)(ShowProgress)(Horizon)(Cutnode)(ExcludedMove);
                        If (SE.IsSingularExtension == 1)
                        {
                            List.ReplaceItem(SearchExtension, Depth, 1);
                        }
                    }
                }
                Call ApplyMoveFull(Depth);
                If (SearchExtension[Depth] == 0)
                {
                    If (IsScratch3 == 1)
                    {
                        If (((Not (Quiescence)) And (Depth > 1)) And (CheckedState[Depth] == 1))
                        {
                            Call SEE(Depth);
                            If ((((Depth % 2) == 1) And (Not ((SEE.Result < 0)))) Or (((Depth % 2) == 0) And (Not ((SEE.Result > 0)))))
                            {
                                List.ReplaceItem(SearchExtension, Depth, 1);
                            }
                        }
                    }
                }
                Eval = "";
                Call //("Late move reduction and PV search (null window), will prune all moves that are not worth covering with full depth + current window search");
                Call Search_LMRNonPV(Depth)(InitialDeepening)(QuiescenceDepth)(Quiescence)(ShowProgress)(Horizon)(Cutnode);
                If ((Search.LmrNonPV.IsReSearchRequired == 1) And (IsSearchTimeout == 0))
                {
                    Call //("Move was not pruned upfront, enter full depth + current window search");
                    List.ReplaceItem(Alphas, (Depth + 1), Alphas[Depth]);
                    List.ReplaceItem(Betas, (Depth + 1), Betas[Depth]);
                    Call SearchNextPly(Depth)(InitialDeepening)(QuiescenceDepth)(Quiescence)(ShowProgress)(Horizon)(0)((1 == 0))("");
                    Eval = SearchEvalResults[(Depth + 1)];
                    EvalIsDynamic = SearchEvalResultsIsDynamic[(Depth + 1)];
                }
                If ((Depth == 1) And (IsSearchTimeout == 0))
                {
                    List.Add(SearchRootMovesDone, AppliedMove[Depth]);
                    If ((Eval > Alphas[Depth]) And (Eval < Betas[Depth]))
                    {
                        List.ReplaceItem(Ply1Scores, floor((AppliedMove[Depth] * 10)), Eval);
                    }
                }
                Call //("Revert applied move, restore board to previous state");
                Call RevertMove(Depth);
                If (IsSearchTimeout == 1)
                {
                    If (Quiescence[Depth] == 0)
                    {
                        MoveCount += MovesCount[Depth];
                    }
                    Else
                    {
                        MoveCountQ += MovesCount[Depth];
                    }
                    Stop(this script);
                }
            }
            If (Not ((Eval == "")))
            {
                Call //("Compare node evaluation with search window, adapt node evaluation result and alpha/beta funnel accordingly");
                If ((Depth % 2) == 1)
                {
                    If ((Eval > SearchEvalResults[Depth]) Or (SearchEvalResults[Depth] == ""))
                    {
                        List.ReplaceItem(SearchEvalResults, Depth, Eval);
                        List.ReplaceItem(SearchEvalResultsIsDynamic, Depth, EvalIsDynamic);
                        If (Eval > Alphas[Depth])
                        {
                            Call GetCurrentMove(Depth);
                            List.ReplaceItem(BestMoves, Depth, CurrentMove);
                            List.ReplaceItem(BestMoveListIdx, Depth, MovesIdx[Depth]);
                            Call UpdatePV(Depth)(CurrentMove);
                            If Quiescence
                            {
                                If ((Not (((Betas[Depth] - Alphas[Depth]) == 1))) And (Eval < Betas[Depth]))
                                {
                                    List.ReplaceItem(Alphas, Depth, Eval);
                                }
                                Else
                                {
                                    Call //("Quiescence cutoff");
                                    List.ReplaceItem(MovesIdx, Depth, (MovesCount[Depth] + 1));
                                    List.ReplaceItem(PickPhase, Depth, "*");
                                }
                            }
                            Else
                            {
                                List.ReplaceItem(Alphas, Depth, Eval);
                                If (Not ((Eval < Betas[Depth])))
                                {
                                    If (Depth > 1)
                                    {
                                        If ((floor((BestMoves[Depth] / 100)) == 0) Or (Board[floor((BestMoves[Depth] % 100))] == 0))
                                        {
                                            Call StoreKillerMove(Depth)(BestMoves[Depth]);
                                        }
                                    }
                                    Call //("Full search cutoff");
                                    List.ReplaceItem(MovesIdx, Depth, (MovesCount[Depth] + 1));
                                    List.ReplaceItem(PickPhase, Depth, "*");
                                }
                                Else
                                {
                                    If ((Depth == 1) And (IsSearchTimeout == 0))
                                    {
                                        If (Not ((Eval < (0 - AbsMaxCheckmateEval))))
                                        {
                                            Call //("Best move found for depth = 1, special handling (re-use history for iterative deepening order, logging, move preview visualization)");
                                            If ((Eval > SearchAlpha) And (Eval < SearchBeta))
                                            {
                                                SearchMoveRes = BestMoves[Depth];
                                                SearchEvalRes = Eval;
                                            }
                                            Call Search_OnBestRootMoveFound(SearchMoveRes)(SearchEvalRes);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                Else
                {
                    If ((Eval < SearchEvalResults[Depth]) Or (SearchEvalResults[Depth] == ""))
                    {
                        List.ReplaceItem(SearchEvalResults, Depth, Eval);
                        List.ReplaceItem(SearchEvalResultsIsDynamic, Depth, EvalIsDynamic);
                        If (Eval < Betas[Depth])
                        {
                            Call GetCurrentMove(Depth);
                            List.ReplaceItem(BestMoves, Depth, CurrentMove);
                            List.ReplaceItem(BestMoveListIdx, Depth, MovesIdx[Depth]);
                            Call UpdatePV(Depth)(CurrentMove);
                            If Quiescence
                            {
                                If ((Not (((Betas[Depth] - Alphas[Depth]) == 1))) And (Eval > Alphas[Depth]))
                                {
                                    List.ReplaceItem(Betas, Depth, Eval);
                                }
                                Else
                                {
                                    List.ReplaceItem(MovesIdx, Depth, (MovesCount[Depth] + 1));
                                    List.ReplaceItem(PickPhase, Depth, "*");
                                    Call //("Quiescence cutoff");
                                }
                            }
                            Else
                            {
                                List.ReplaceItem(Betas, Depth, Eval);
                                If (Not ((Eval > Alphas[Depth])))
                                {
                                    If ((floor((BestMoves[Depth] / 100)) == 0) Or (Board[floor((BestMoves[Depth] % 100))] == 0))
                                    {
                                        Call StoreKillerMove(Depth)(BestMoves[Depth]);
                                    }
                                    List.ReplaceItem(MovesIdx, Depth, (MovesCount[Depth] + 1));
                                    List.ReplaceItem(PickPhase, Depth, "*");
                                    Call //("Full search cutoff");
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    If (Quiescence[Depth] == 0)
    {
        MoveCount += MovesCount[Depth];
    }
    Else
    {
        MoveCountQ += MovesCount[Depth];
    }
    Call //("Evaluation alpha-bound, beta-bound or exact?");
    If ((Depth % 2) == 1)
    {
        If (Not ((SearchEvalResults[Depth] < Betas[Depth])))
        {
            List.ReplaceItem(NodeTypes, Depth, "B");
        }
        Else
        {
            If ((Not (((Betas[Depth] - Alphas[Depth]) == 1))) And ((Not (Quiescence)) And (Not ((BestMoves[Depth] == "")))))
            {
                List.ReplaceItem(NodeTypes, Depth, "E");
            }
            Else
            {
                List.ReplaceItem(NodeTypes, Depth, "A");
            }
        }
    }
    Else
    {
        If (Not ((SearchEvalResults[Depth] > Alphas[Depth])))
        {
            List.ReplaceItem(NodeTypes, Depth, "A");
        }
        Else
        {
            If ((Not (((Betas[Depth] - Alphas[Depth]) == 1))) And ((Not (Quiescence)) And (Not ((BestMoves[Depth] == "")))))
            {
                List.ReplaceItem(NodeTypes, Depth, "E");
            }
            Else
            {
                List.ReplaceItem(NodeTypes, Depth, "B");
            }
        }
    }
    Call //("Fast quiescence search checkmate detection (no check evasion found)");
    If (Quiescence And ((MovesCount[Depth] == 0) And (CheckedState[Depth] == 1)))
    {
        List.ReplaceItem(NodeTypes, Depth, "E");
        If ((Depth % 2) == 1)
        {
            List.ReplaceItem(SearchEvalResults, Depth, (-100000 + ((Depth + 1) * 1000)));
        }
        Else
        {
            List.ReplaceItem(SearchEvalResults, Depth, (100000 - ((Depth + 1) * 1000)));
        }
        List.ReplaceItem(SearchEvalResultsIsDynamic, Depth, 0);
    }
    Call //("Fast full search checkmate and stalemate detection");
    If ((Not (Quiescence)) And ((MovesCount[Depth] == 0) And (ExcludedMove == "")))
    {
        List.ReplaceItem(NodeTypes, Depth, "E");
        If ((Depth % 2) == 1)
        {
            If (CheckedState[Depth] == 1)
            {
                List.ReplaceItem(SearchEvalResults, Depth, (-100000 + ((Depth + 1) * 1000)));
            }
            Else
            {
                Call CalcBoardAttackedByMoveChecked((Depth + 1));
                If (IsBlackChecked == 1)
                {
                    List.ReplaceItem(SearchEvalResults, Depth, (-100000 + ((Depth + 1) * 1000)));
                }
                Else
                {
                    List.ReplaceItem(SearchEvalResults, Depth, 0);
                }
            }
        }
        Else
        {
            If (CheckedState[Depth] == 1)
            {
                List.ReplaceItem(SearchEvalResults, Depth, (100000 - ((Depth + 1) * 1000)));
            }
            Else
            {
                Call CalcBoardAttackedByMoveChecked((Depth + 1));
                If (IsWhiteChecked == 1)
                {
                    List.ReplaceItem(SearchEvalResults, Depth, (100000 - ((Depth + 1) * 1000)));
                }
                Else
                {
                    List.ReplaceItem(SearchEvalResults, Depth, 0);
                }
            }
        }
        List.ReplaceItem(SearchEvalResultsIsDynamic, Depth, 0);
        Call TTStoreNode(CurrentBoardHash)(Depth)(SearchEvalResults[Depth])("")(NodeTypes[Depth])("")(99)("")("")("")("")("")(0)("");
    }
    If (BestMoves[Depth] == "")
    {
        If (MovesCount[Depth] > 0)
        {
            List.ReplaceItem(MovesIdx, Depth, 1);
            Call GetCurrentMove(Depth);
            List.ReplaceItem(BestMoves, Depth, CurrentMove);
        }
    }
    If (((IsSearchTimeout == 0) And (Depth > 1)) And (ExcludedMove == ""))
    {
        Call //("Store evaluations, hash moves, attack tables, check state, mobility, ... to transposition table");
        If Quiescence
        {
            Call TTStoreNode(CurrentBoardHash)(Depth)(SearchEvalResults[Depth])(BestMoves[Depth])(NodeTypes[Depth])("")(-1)("")("")("")("")("")(SearchEvalResultsIsDynamic[Depth])(0);
        }
        Else
        {
            Call TTStoreNode(CurrentBoardHash)(Depth)(SearchEvalResults[Depth])(BestMoves[Depth])(NodeTypes[Depth])("")(Horizon)("")("")("")("")("")(SearchEvalResultsIsDynamic[Depth])("");
        }
    }
    Call //("Collect statistics");
    If (BestMoveListIdx[Depth] > 0)
    {
        If Quiescence
        {
            ProfBestMoveCountQ += 1;
            ProfBestMoveIdxSumQ += BestMoveListIdx[Depth];
        }
        Else
        {
            ProfBestMoveCount += 1;
            ProfBestMoveIdxSum += BestMoveListIdx[Depth];
        }
        If (1 == 0)
        {
            If (IsBlockProfilerEnabled == 1)
            {
                If (BestMoveListIdx[Depth] > (3 - (Quiescence[Depth] * 2)))
                {
                    Call ExportBoardFEN((IsPlayerBlack == 1))(((Depth % 2) == 0));
                    Call Log("Move ordering indication")(Operator.Join(Operator.Join(":", Depth), Operator.Join(":", BestMoveListIdx[Depth])))(Operator.Join(Operator.Join(":", Board[floor((BestMoves[Depth] / 100))]), Operator.Join(":", BestMoves[Depth])))(Operator.Join(Operator.Join(":", Board[floor((BestMoves[Depth] % 100))]), Operator.Join(":", Quiescence[Depth])))(":")(ExportDataFEN)("")("");
                }
            }
        }
    }
}

Define SearchNextPly(string CurrentDepth)(bool InitialDeepening)(string QuiescenceDepth)(bool Quiescence)(bool ShowProgress)(string Horizon)(string Reduction)(bool Cutnode)(string ExcludeMove) (warp=true)
{
    If ((QuiescenceDepth > 0) And ((Horizon - Reduction) == 1))
    {
        Call //("If still on full search: max depth reached, extend or continue with quiescence. If on quiescence search, simply continue");
        Call SearchImpl((CurrentDepth + 1))(InitialDeepening)((QuiescenceDepth - 1))((Quiescence Or (SearchExtension[CurrentDepth] == 0)))(ShowProgress)(1)((1 == 1))(ExcludeMove);
    }
    Else
    {
        Call SearchImpl((CurrentDepth + 1))(InitialDeepening)(QuiescenceDepth)(Quiescence)(ShowProgress)((((Horizon + SearchExtension[CurrentDepth]) - Reduction) - 1))(Cutnode)(ExcludeMove);
    }
}

Define Search_DetectCheckmate(string Depth) (warp=true)
{
    If (Depth > 1)
    {
        Call //("Virtual king captures on previous ply => depth-corrected checkmate evaluation");
        If (abs(TargetPieces[(Depth - 1)]) == GoK_BlackKing)
        {
            List.ReplaceItem(SearchEvalResults, Depth, ((100000 - ((Depth - 1) * 1000)) * DepthEvalFactor[(Depth - 1)]));
            List.ReplaceItem(SearchEvalResultsIsDynamic, Depth, 0);
            Stop(this script);
        }
        If (1 == 0)
        {
            If ((Depth == 2) Or (CheckedState[(Depth - 1)] == 1))
            {
                Call //("Early checkmate evaluation on previous checks when not evaded. As we now have special check evasion search, this is mainly for safety");
                Call CalcBoardAttackedByMoveChecked(Depth);
                If (((((Depth % 2) == 1) And (IsWhiteChecked == 1)) Or (((Depth % 2) == 0) And (IsBlackChecked == 1))) Or ((abs((IdxToRank[BlackKingIdx] - IdxToRank[WhiteKingIdx])) < 2) And (abs((IdxToFile[BlackKingIdx] - IdxToFile[WhiteKingIdx])) < 2)))
                {
                    List.ReplaceItem(SearchEvalResults, Depth, ((100000 - (Depth * 1000)) * DepthEvalFactor[Depth]));
                    List.ReplaceItem(SearchEvalResultsIsDynamic, Depth, 0);
                    Stop(this script);
                }
            }
        }
    }
}

Define Search_DetectDraw(string Depth)(string Horizon) (warp=true)
{
    Search.IsDraw = 0;
    If ((Depth > 1) And (IsInNullMove == 0))
    {
        Call //("Draw-by-stalemate detection. This is expensive, and is only applied at low search depth or during late endgame stage (no minor pieces left)");
        If (Depth < 9)
        {
            If (Not ((CheckedState[Depth] == 1)))
            {
                If ((((Depth % 2) == 1) And ((BlackQueenCountLocal == 0) And (BlackMinorCountLocal < 2))) Or (((Depth % 2) == 0) And ((WhiteQueenCountLocal == 0) And (WhiteMinorCountLocal < 2))))
                {
                    If ((Depth < 4) Or (Horizon > 2))
                    {
                        Call IsDrawByStalemate((Depth + 2));
                        If (IsDrawRes == 1)
                        {
                            Search.IsDraw = 1;
                        }
                    }
                }
            }
        }
        Call //("Fast draw-by-material verification");
        If (IsEndgame == 1)
        {
            If (((BlackQueenCountLocal == 0) And (WhiteQueenCountLocal == 0)) And ((BlackPawnCountLocal == 0) And (WhitePawnCountLocal == 0)))
            {
                If (((BlackRookCountLocal == 0) And (BlackMinorCountLocal < 2)) And ((WhiteRookCountLocal == 0) And (WhiteMinorCountLocal < 2)))
                {
                    Search.IsDraw = 1;
                }
            }
        }
        If (Search.IsDraw == 0)
        {
            Call //("Special K-KP endgame draw detection, according to pawn and king position. Finds draws otherwise not visible within search horizon");
            If (IsClassicEndgameEval == 1)
            {
                If ((Depth > 1) And (Quiescence[(Depth - 1)] == 0))
                {
                    If (((WhiteQueenCountLocal + WhiteMinorCountLocal) == 0) And ((BlackQueenCountLocal + BlackMinorCountLocal) == 0))
                    {
                        If ((BlackPawnCountLocal + WhitePawnCountLocal) == 1)
                        {
                            Idx = 1;
                            Repeat (64)
                            {
                                If ((Board[Idx] == GoK_WhitePawn) And ((Depth % 2) == 0))
                                {
                                    If ((IdxToFile[Idx] == 1) Or (IdxToFile[Idx] == 8))
                                    {
                                        If ((IdxToFile[Idx] == IdxToFile[BlackKingIdx]) And (IdxToRank[BlackKingIdx] < IdxToRank[Idx]))
                                        {
                                            Search.IsDraw = 1;
                                        }
                                    }
                                    Else
                                    {
                                        If (((Idx - 8) == BlackKingIdx) Or ((Idx - 16) == BlackKingIdx))
                                        {
                                            If (Not ((((Idx - 1) == WhiteKingIdx) Or ((Idx + 1) == WhiteKingIdx))))
                                            {
                                                Search.IsDraw = 1;
                                            }
                                        }
                                        If ((Idx - 24) == BlackKingIdx)
                                        {
                                            If ((IdxToRank[Idx] > 4) And ((Idx - 8) == WhiteKingIdx))
                                            {
                                                Search.IsDraw = 1;
                                            }
                                        }
                                    }
                                }
                                Else
                                {
                                    If ((Board[Idx] == GoK_BlackPawn) And ((Depth % 2) == 1))
                                    {
                                        If ((IdxToFile[Idx] == 1) Or (IdxToFile[Idx] == 8))
                                        {
                                            If ((IdxToFile[Idx] == IdxToFile[WhiteKingIdx]) And (IdxToRank[WhiteKingIdx] > IdxToRank[Idx]))
                                            {
                                                Search.IsDraw = 1;
                                            }
                                        }
                                        Else
                                        {
                                            If (((Idx + 8) == WhiteKingIdx) Or ((Idx + 16) == WhiteKingIdx))
                                            {
                                                If (Not ((((Idx - 1) == BlackKingIdx) Or ((Idx + 1) == BlackKingIdx))))
                                                {
                                                    Search.IsDraw = 1;
                                                }
                                            }
                                            If ((Idx + 24) == WhiteKingIdx)
                                            {
                                                If ((IdxToRank[Idx] < 5) And ((Idx + 8) == BlackKingIdx))
                                                {
                                                    Search.IsDraw = 1;
                                                }
                                            }
                                        }
                                    }
                                }
                                Idx += 1;
                            }
                        }
                    }
                }
            }
        }
    }
    If (Search.IsDraw == 1)
    {
        List.ReplaceItem(SearchEvalResults, Depth, 0);
        List.ReplaceItem(SearchEvalResultsIsDynamic, Depth, 0);
        Call TTStoreNode(CurrentBoardHash)(Depth)(SearchEvalResults[Depth])("")("E")("")(99)("")("")("")("")("")(SearchEvalResultsIsDynamic[Depth])("");
    }
}

Define Search_DetectDrawByRepetition(string Depth)(bool Quiescence) (warp=true)
{
    If ((Depth > 1) And (IsInNullMove == 0))
    {
        Call //("Draw-by-repetition detection. This happens on every ply and could be costly, so we check previous plies for pawn moves and captures. When repetition is possible, history tables are searched for same board hash, when found we verify if the occurred for the same side.");
        Search.Count = 1;
        If List.ContainsItem(PreviousBoardHash, (CurrentBoardHash + 0))
        {
            Idx = (Depth - 2);
            Repeat Until ((Idx < 2) Or (Search.Count > 2))
            {
                If ((CurrentBoardHash + 0) == PreviousBoardHash[(Idx + 0)])
                {
                    Search.Count += 1;
                }
                Idx += -2;
            }
        }
        If List.ContainsItem(BoardHistoryHash, (CurrentBoardHash + 0))
        {
            Idx = ((List.Length(BoardHistoryHash) - 1) + (Depth % 2));
            Repeat Until ((Idx < 1) Or (Search.Count > 2))
            {
                If ((CurrentBoardHash + 0) == BoardHistoryHash[(Idx + 0)])
                {
                    Search.Count += 1;
                }
                Idx += -2;
            }
        }
        If (Search.Count > 1)
        {
            List.ReplaceItem(SearchEvalResults, (Depth + 0), DrawByRepetitionEval);
            List.ReplaceItem(SearchEvalResultsIsDynamic, (Depth + 0), 1);
            Stop(this script);
        }
    }
}

Define Search_FutilityPruning(string Depth)(bool Quiescence)(string Horizon)(string ExcludedMove) (warp=true)
{
    IsFutile = 0;
    Eval = "";
    If (((CheckedState[Depth] == 0) And (PutsInCheck[Depth] == 0)) And ((PromotionPieces[Depth] == 0) And (Not ((AppliedMove[Depth] == ExcludedMove)))))
    {
        FP.SEE = "";
        If (Not ((BoardEval[Depth] == "")))
        {
            FutilityMargin = "";
            If Quiescence
            {
                If ((Not ((TargetPieces[Depth] == 0))) And ((((Depth % 2) == 1) And ((BlackQueenCountLocal + BlackRookCountLocal) > 0)) Or (((Depth % 2) == 0) And ((WhiteQueenCountLocal + WhiteRookCountLocal) > 0))))
                {
                    FutilityMargin = 400;
                }
            }
            Else
            {
                If ((Depth > 1) And (Horizon < 6))
                {
                    If ((TargetPieces[Depth] == 0) And ((PickedMoveCount[Depth] > 1) And ((Betas[Depth] - Alphas[Depth]) == 1)))
                    {
                        Rank = IdxToRank[floor((AppliedMove[Depth] % 100))];
                        If (((Not ((SourcePieces[Depth] == GoK_BlackPawn))) Or (Rank < 6)) And ((Not ((SourcePieces[Depth] == GoK_WhitePawn))) Or (Rank > 3)))
                        {
                            FutilityMargin = (Horizon * 125);
                        }
                    }
                }
            }
            If (Not ((FutilityMargin == "")))
            {
                If ((Depth % 2) == 1)
                {
                    FP.Eval = ((BoardEval[Depth] - TargetPieces[Depth]) + FutilityMargin);
                }
                Else
                {
                    FP.Eval = ((BoardEval[Depth] - TargetPieces[Depth]) - FutilityMargin);
                }
                If ((((Depth % 2) == 1) And (Not ((FP.Eval > Alphas[Depth])))) Or (((Depth % 2) == 0) And (Not ((FP.Eval < Betas[Depth])))))
                {
                    IsFutile = 1;
                }
                Else
                {
                    If Quiescence
                    {
                        If ((Depth % 2) == 1)
                        {
                            FP.Eval = (BoardEval[Depth] + FutilityMargin);
                        }
                        Else
                        {
                            FP.Eval = (BoardEval[Depth] - FutilityMargin);
                        }
                        If ((((Depth % 2) == 1) And (Not ((FP.Eval > Alphas[Depth])))) Or (((Depth % 2) == 0) And (Not ((FP.Eval < Betas[Depth])))))
                        {
                            Call SEE(Depth);
                            FP.SEE = SEE.Result;
                            If ((((Depth % 2) == 1) And (Not ((FP.SEE > 0)))) Or (((Depth % 2) == 0) And (Not ((FP.SEE < 0)))))
                            {
                                IsFutile = 1;
                            }
                        }
                    }
                }
                If (IsFutile == 1)
                {
                    If Quiescence
                    {
                        If ((((Depth % 2) == 1) And (FP.Eval > SearchEvalResults[Depth])) Or (((Depth % 2) == 0) And (FP.Eval < SearchEvalResults[Depth])))
                        {
                            Eval = FP.Eval;
                        }
                    }
                }
            }
        }
        If (1 == 1)
        {
            If (IsFutile == 0)
            {
                If Quiescence
                {
                    If ((CheckedState[Depth] == 0) And (PutsInCheck[Depth] == 0))
                    {
                        If (FP.SEE == "")
                        {
                            Call SEE(Depth);
                            FP.SEE = SEE.Result;
                        }
                        If ((((Depth % 2) == 1) And (FP.SEE < 0)) Or (((Depth % 2) == 0) And (FP.SEE > 0)))
                        {
                            IsFutile = 1;
                        }
                    }
                }
            }
        }
    }
}

Define Search_InitStack(string Depth)(bool InitialDeepening) (warp=true)
{
    Call //("Initialize local variables or forward state from previous ply");
    If (Depth == 1)
    {
        Call CalcBoardAttackedByMove(2);
        Call StoreAttackInfo(1);
        List.ReplaceItem(BoardAttackedCalculated, 1, 1);
        List.ReplaceItem(CastlingState, 1, Operator.Join(Operator.Join(Operator.Join(HasBlackCastled, HasBlackKingMoved), Operator.Join(HasBlackRookKSMoved, HasBlackRookQSMoved)), Operator.Join(Operator.Join(HasWhiteCastled, HasWhiteKingMoved), Operator.Join(HasWhiteRookKSMoved, HasWhiteRookQSMoved))));
    }
    Else
    {
        List.ReplaceItem(BoardAttackedCalculated, Depth, 0);
        List.ReplaceItem(CheckedState, Depth, PutsInCheck[(Depth - 1)]);
        List.ReplaceItem(CheckedStateAttackLines, Depth, "");
        List.ReplaceItem(CastlingState, Depth, CastlingState[(Depth - 1)]);
    }
    List.ReplaceItem(AlphasOld, Depth, Alphas[Depth]);
    List.ReplaceItem(BetasOld, Depth, Betas[Depth]);
    List.ReplaceItem(PutsInCheck, Depth, 0);
}

Define Search_LMRNonPV(string Depth)(bool InitialDeepening)(string QuiescenceDepth)(bool Quiescence)(bool ShowProgress)(string Horizon)(bool Cutnode) (warp=true)
{
    Call //("Late move reduction preparation");
    Search.LmrNonPV.IsReSearchRequired = 1;
    If ((Not (Quiescence)) And (IsSearchTimeout == 0))
    {
        CurrentValue = (BlackQueenCountLocal + BlackRookCountLocal);
        CurrentValue2 = (WhiteQueenCountLocal + WhiteRookCountLocal);
        If ((Horizon > 2) And (((CheckedState[Depth] == 0) And (PromotionPieces[Depth] == 0)) And (((BlackQueenCountLocal + BlackRookCountLocal) + (WhiteQueenCountLocal + WhiteRookCountLocal)) > 2)))
        {
            Call //("LMR search");
            Reduction = 0;
            If (PickedMoveCount[Depth] > ((1 + (1 * (Not (((Betas[Depth] - Alphas[Depth]) == 1))))) + ((Depth == 1) + (Not ((TargetPieces[Depth] == 0))))))
            {
                CurrentValue = 1;
                Reduction = floor(((0.38 + ((TargetPieces[Depth] == 0) * 1.63)) + ((ln(Horizon) * ln(PickedMoveCount[Depth])) / (2.32 + ((Not ((TargetPieces[Depth] == 0))) * 1.44)))));
                If (Not (((Betas[Depth] - Alphas[Depth]) == 1)))
                {
                    Reduction += -1;
                }
                If (PutsInCheck[Depth] == 1)
                {
                    Reduction += -1;
                }
                If (1 == 0)
                {
                    If (((BlackQueenCountLocal + BlackRookCountLocal) + (WhiteQueenCountLocal + WhiteRookCountLocal)) < 5)
                    {
                        Reduction += -1;
                    }
                }
                If (1 == 1)
                {
                    If ((((Depth % 2) == 1) And ((WhiteQueenCountLocal + WhiteMinorCountLocal) < 2)) Or (((Depth % 2) == 0) And ((BlackQueenCountLocal + BlackMinorCountLocal) < 2)))
                    {
                        Reduction += 1;
                    }
                }
                If (1 == 1)
                {
                    If Cutnode
                    {
                        Reduction += 1;
                    }
                }
                If (1 == 0)
                {
                    If (Reduction > 2)
                    {
                        Reduction = 2;
                    }
                }
                If (Reduction > (Horizon - 1))
                {
                    Reduction = (Horizon - 1);
                }
            }
            If (Reduction > 0)
            {
                If ((Depth % 2) == 1)
                {
                    List.ReplaceItem(Alphas, (Depth + 1), Alphas[Depth]);
                    List.ReplaceItem(Betas, (Depth + 1), (Alphas[Depth] + 1));
                }
                Else
                {
                    List.ReplaceItem(Alphas, (Depth + 1), (Betas[Depth] - 1));
                    List.ReplaceItem(Betas, (Depth + 1), Betas[Depth]);
                }
                Call SearchNextPly(Depth)(InitialDeepening)(QuiescenceDepth)(Quiescence)(ShowProgress)(Horizon)(Reduction)((1 == 1))("");
                Eval = SearchEvalResults[(Depth + 1)];
                EvalIsDynamic = SearchEvalResultsIsDynamic[(Depth + 1)];
                Search.LmrNonPV.IsReSearchRequired = 0;
            }
            If (Not (((TargetPieces[Depth] == 0) And (PromotionPieces[Depth] == 0))))
            {
                Idx += 1;
            }
        }
        Call //("Non-PV search");
        If ((((Search.LmrNonPV.IsReSearchRequired == 0) And ((((Depth % 2) == 1) And (Eval > Alphas[Depth])) Or (((Depth % 2) == 0) And (Eval < Betas[Depth])))) Or ((Search.LmrNonPV.IsReSearchRequired == 1) And ((PickedMoveCount[Depth] > 1) Or ((Betas[Depth] - Alphas[Depth]) == 1)))) And (IsSearchTimeout == 0))
        {
            If ((Depth % 2) == 1)
            {
                List.ReplaceItem(Alphas, (Depth + 1), Alphas[Depth]);
                List.ReplaceItem(Betas, (Depth + 1), (Alphas[Depth] + 1));
            }
            Else
            {
                List.ReplaceItem(Alphas, (Depth + 1), (Betas[Depth] - 1));
                List.ReplaceItem(Betas, (Depth + 1), Betas[Depth]);
            }
            Call SearchNextPly(Depth)(InitialDeepening)(QuiescenceDepth)(Quiescence)(ShowProgress)(Horizon)(0)((Not (Cutnode)))("");
            Eval = SearchEvalResults[(Depth + 1)];
            EvalIsDynamic = SearchEvalResultsIsDynamic[(Depth + 1)];
            If ((Eval > Alphas[Depth]) And (Eval < Betas[Depth]))
            {
                Search.LmrNonPV.IsReSearchRequired = 1;
            }
            Else
            {
                Search.LmrNonPV.IsReSearchRequired = 0;
            }
        }
    }
}

Define Search_NullMovePruning(string Depth)(bool InitialDeepening)(string QuiescenceDepth)(bool Quiescence)(bool ShowProgress)(string Horizon)(bool Cutnode) (warp=true)
{
    Call //("Null move pruning");
    If (IsInNullMove == 0)
    {
        IsInNullMove += 1;
        If (Not (Quiescence))
        {
            If ((Horizon > 2) And (((Betas[Depth] - Alphas[Depth]) == 1) And (CheckedState[Depth] == 0)))
            {
                If ((((Depth % 2) == 1) And ((BlackQueenCountLocal + BlackMinorCountLocal) > 1)) Or (((Depth % 2) == 0) And ((WhiteQueenCountLocal + WhiteMinorCountLocal) > 1)))
                {
                    Call Evaluate((Depth - 1))((1 == 1));
                    List.ReplaceItem(BoardEval, Depth, EvaluationRes);
                    If ((((Depth % 2) == 1) And (Not ((EvaluationRes < Betas[Depth])))) Or (((Depth % 2) == 0) And (Not ((EvaluationRes > Alphas[Depth])))))
                    {
                        Reduction = (2 + floor((Horizon / 4)));
                        If (Reduction > (Horizon - 1))
                        {
                            Reduction = (Horizon - 1);
                        }
                        If (Reduction < 0)
                        {
                            Reduction = 0;
                        }
                        Call ClearMoveList((Depth + 0));
                        Call AddMoveToList(0)((Depth + 0));
                        List.ReplaceItem(MovesIdx, (Depth + 0), 1);
                        Call ApplyMove((Depth + 0));
                        If ((Depth % 2) == 1)
                        {
                            List.ReplaceItem(Alphas, (Depth + 1), (Betas[Depth] - 1));
                            List.ReplaceItem(Betas, (Depth + 1), Betas[Depth]);
                        }
                        Else
                        {
                            List.ReplaceItem(Alphas, (Depth + 1), Alphas[Depth]);
                            List.ReplaceItem(Betas, (Depth + 1), (Alphas[Depth] + 1));
                        }
                        Call SearchNextPly(Depth)(InitialDeepening)(QuiescenceDepth)(Quiescence)(ShowProgress)(Horizon)(Reduction)((Not (Cutnode)))("");
                        Eval = SearchEvalResults[(Depth + 1)];
                        EvalIsDynamic = SearchEvalResultsIsDynamic[(Depth + 1)];
                        Call RevertMove((Depth + 0));
                        If (((((Depth % 2) == 1) And (Not ((Eval < Betas[Depth])))) Or (((Depth % 2) == 0) And (Not ((Eval > Alphas[Depth]))))) And (Not ((abs(Eval) > AbsMinCheckmateEval))))
                        {
                            List.ReplaceItem(SearchEvalResults, Depth, Eval);
                            List.ReplaceItem(SearchEvalResultsIsDynamic, Depth, EvalIsDynamic);
                        }
                    }
                }
            }
        }
        IsInNullMove += -1;
    }
}

Define Search_OnBestRootMoveFound(string Move)(string Eval) (warp=true)
{
    If ((Eval > SearchAlpha) And (Eval < SearchBeta))
    {
        Call OnEvaluationChanged(Eval);
        If (1 == 1)
        {
            Call Log(IdxDeepening)(" : ")(Move)(" : ")(Eval)("")("")("");
        }
    }
    If (Move == GoK_BlackKingsideCastling)
    {
        Stg_BestMoveFromIdx = VirtualBoard[5];
        Stg_BestMoveToIdx = VirtualBoard[7];
    }
    Else
    {
        If (Move == GoK_BlackQueensideCastling)
        {
            Stg_BestMoveFromIdx = VirtualBoard[5];
            Stg_BestMoveToIdx = VirtualBoard[3];
        }
        Else
        {
            Stg_BestMoveFromIdx = floor((Move / 100));
            Stg_BestMoveToIdx = floor((Move % 100));
        }
    }
    Event.Broadcast("UI_ShowBestMove");
}

Define Search_ReverseFutilityPruning(string Depth)(string Horizon) (warp=true)
{
    If ((1 == 0) And ((((Depth > 1) And (Horizon < 7)) And ((IsInNullMove == 0) And (IsEndgame == 0))) And ((CheckedState[Depth] == 0) And ((Betas[Depth] - Alphas[Depth]) == 1))))
    {
        If ((Depth % 2) == 1)
        {
            If (abs(Betas[Depth]) > AbsMinCheckmateEval)
            {
                Stop(this script);
            }
        }
        Else
        {
            If (abs(Alphas[Depth]) > AbsMinCheckmateEval)
            {
                Stop(this script);
            }
        }
        Call TTProbeNode(CurrentBoardHash)(Depth);
        If (((TTProbeRes == 0) Or (TTProbeNode.BestMoveRes == 0)) Or (Not ((Board[floor((TTProbeNode.BestMoveRes % 100))] == 0))))
        {
            Call Evaluate((Depth - 1))((1 == 1));
            List.ReplaceItem(BoardEval, Depth, EvaluationRes);
            If ((Depth % 2) == 1)
            {
                If (Not (((EvaluationRes - (80 + (80 * Horizon))) < Betas[Depth])))
                {
                    List.ReplaceItem(SearchEvalResults, Depth, Betas[Depth]);
                    List.ReplaceItem(SearchEvalResultsIsDynamic, Depth, 0);
                }
            }
            Else
            {
                If (Not (((EvaluationRes + (80 + (80 * Horizon))) > Alphas[Depth])))
                {
                    List.ReplaceItem(SearchEvalResults, Depth, Alphas[Depth]);
                    List.ReplaceItem(SearchEvalResultsIsDynamic, Depth, 0);
                }
            }
        }
    }
}

Define Search_SingularExtensions(string Depth)(bool InitialDeepening)(string QuiescenceDepth)(bool Quiescence)(bool ShowProgress)(string Horizon)(bool Cutnode)(string ExcludedMove) (warp=true)
{
    SE.IsSingularExtension = 0;
    If ((1 == 0) And (((Not (Quiescence)) And ((Depth > 1) And (Horizon > 5))) And (ExcludedMove == "")))
    {
        Call GetCurrentMove(Depth);
        If (CurrentMove == HashMove[Depth])
        {
            Call TTProbeNode(CurrentBoardHash)(Depth);
            If ((TTProbeRes == 1) And ((Not ((TTProbeNode.BestMoveRes == ""))) And ((Not ((TTProbeNode.EvalRes == ""))) And (Not ((TTProbeNode.HorizonRes == ""))))))
            {
                If (Not ((TTProbeNode.HorizonRes < (Horizon - 3))))
                {
                    If ((((Depth % 2) == 1) And (TTProbeNode.NodeTypeRes == "B")) Or (((Depth % 2) == 0) And (TTProbeNode.NodeTypeRes == "A")))
                    {
                        SE.BoundEval = TTProbeNode.EvalRes;
                        Call ClearMoveList((Depth + 1));
                        Call AddMoveToList(0)((Depth + 1));
                        List.ReplaceItem(MovesIdx, (Depth + 1), 1);
                        Call ApplyMove((Depth + 1));
                        If ((Depth % 2) == 1)
                        {
                            SE.BoundEval += (0 - (Horizon * 3));
                            List.ReplaceItem(Alphas, (Depth + 2), (SE.BoundEval - 1));
                            List.ReplaceItem(Betas, (Depth + 2), SE.BoundEval);
                        }
                        Else
                        {
                            SE.BoundEval += (Horizon * 3);
                            List.ReplaceItem(Alphas, (Depth + 2), SE.BoundEval);
                            List.ReplaceItem(Betas, (Depth + 2), (SE.BoundEval + 1));
                        }
                        Reduction = ceiling((Horizon / 2));
                        Call SearchNextPly((Depth + 2))(InitialDeepening)(QuiescenceDepth)(Quiescence)(ShowProgress)(Horizon)(Reduction)(Cutnode)(HashMove[Depth]);
                        Eval = SearchEvalResults[(Depth + 2)];
                        Call RevertMove((Depth + 1));
                        SE.IsSingularExtension = 0;
                        If ((((Depth % 2) == 1) And (Eval < Betas[(Depth + 2)])) Or (((Depth % 2) == 0) And (Eval > Alphas[(Depth + 2)])))
                        {
                            SE.IsSingularExtension = 1;
                        }
                    }
                }
            }
        }
    }
}

Define Search_TagSearchExtension(string Depth) (warp=true)
{
    If (1 == 0)
    {
        If ((Not (Quiescence)) And ((Level > 4) Or (IsScratch3 == 0)))
        {
            Call //("Fork detection for Scratch 3 runtime. Forks at low search depth will trigger search extension");
            Caller.SourceIdx = floor((AppliedMove[Depth] % 100));
            Caller.SourcePiece = Board[Caller.SourceIdx];
            If ((((Depth < 5) And (IsScratch3 == 1)) And (IsEndgame == 0)) And (abs(Caller.SourcePiece) < GoK_BlackRook))
            {
                Search.Count = 0;
                Caller.TargetIdx = 1;
                Repeat (64)
                {
                    If (Not ((Board[Caller.TargetIdx] == 0)))
                    {
                        If ((((Depth % 2) == 1) And (Board[Caller.TargetIdx] < 0)) Or (((Depth % 2) == 0) And (Board[Caller.TargetIdx] > 0)))
                        {
                            If (abs(Caller.SourcePiece) < abs(Board[Caller.TargetIdx]))
                            {
                                If (Not ((MoveToHash[((((DepthEvalFactor[Depth] + 1) * 30000) + (PieceIdxLookup[abs(Caller.SourcePiece)] * 10000)) + ((Caller.SourceIdx * 100) + Caller.TargetIdx))] == 0)))
                                {
                                    Search.Count += 1;
                                }
                            }
                        }
                    }
                    Caller.TargetIdx += 1;
                }
                If (Search.Count > 1)
                {
                    Search.Count = 0;
                    Call ClearMoveList((Depth + 2));
                    Call GenerateMovesForSourceEx((Depth + 2))(floor((AppliedMove[Depth] % 100)))((1 == 0))((1 == 1));
                    List.ReplaceItem(MovesIdx, (Depth + 2), 1);
                    Repeat Until ((MovesIdx[(Depth + 2)] > MovesCount[(Depth + 2)]) Or (Search.Count > 1))
                    {
                        Call GetCurrentMove((Depth + 2));
                        Caller.SourceIdx = floor((CurrentMove / 100));
                        Caller.TargetIdx = floor((CurrentMove % 100));
                        If (abs(Board[Caller.SourceIdx]) < abs(Board[Caller.TargetIdx]))
                        {
                            Search.Count += 1;
                        }
                        List.ReplaceItem(MovesIdx, (Depth + 2), (MovesIdx[(Depth + 2)] + 1));
                    }
                    If (Search.Count > 1)
                    {
                        List.ReplaceItem(SearchExtensionTagged, Depth, 1);
                    }
                }
            }
        }
    }
}

Define Search_TTProbeEval(string Depth)(bool InitialDeepening)(bool Quiescence)(string Horizon)(string ExcludedMove) (warp=true)
{
    If ((Depth > 1) And (ExcludedMove == ""))
    {
        If (((Betas[(Depth + 0)] - Alphas[(Depth + 0)]) == 1) Or (1 == 0))
        {
            Call //("Probe transposition table for cached node evaluations");
            Call TTProbeNode(CurrentBoardHash)(Depth);
            If ((TTProbeRes == 1) And ((Not ((TTProbeNode.EvalRes == ""))) And (Not ((TTProbeNode.HorizonRes == "")))))
            {
                If (((Not (Quiescence)) And (Not ((TTProbeNode.HorizonRes < Horizon)))) Or (Quiescence And (TTProbeNode.HorizonRes == -1)))
                {
                    If ((TTProbeNode.NodeTypeRes == "E") Or (((TTProbeNode.NodeTypeRes == "A") And (Not ((TTProbeNode.EvalRes > Alphas[(Depth + 0)])))) Or ((TTProbeNode.NodeTypeRes == "B") And (Not ((TTProbeNode.EvalRes < Betas[(Depth + 0)]))))))
                    {
                        If ((TTProbeNode.EvalIsDynamicRes == 0) Or (floor((TTProbeNode.AgeRes % 100)) == floor((TT.CurrentAge % 100))))
                        {
                            If (Not ((abs(TTProbeNode.EvalRes) > AbsMinCheckmateEval)))
                            {
                                List.ReplaceItem(SearchEvalResults, Depth, TTProbeNode.EvalRes);
                                List.ReplaceItem(SearchEvalResultsIsDynamic, Depth, TTProbeNode.EvalIsDynamicRes);
                                Stop(this script);
                            }
                        }
                    }
                }
            }
        }
    }
}

Define SEE(string MoveDepth) (warp=true)
{
    Depth = MoveDepth;
    List.DeleteAll(SEE.TmpList1);
    List.DeleteAll(SEE.TmpList2);
    List.DeleteAll(SEE.TmpList3);
    List.DeleteAll(SEE.TmpList4);
    List.DeleteAll(SEE.TmpList5);
    SEE.Idx = 1;
    Repeat (List.Length(CalcMovesMoveList))
    {
        List.Add(SEE.TmpList4, CalcMovesMoveList[(SEE.Idx + 0)]);
        SEE.Idx += 1;
    }
    SEE.Idx = 1;
    Repeat (List.Length(CalcMovesScoreList))
    {
        List.Add(SEE.TmpList5, CalcMovesScoreList[(SEE.Idx + 0)]);
        SEE.Idx += 1;
    }
    SEE.Result = (0 - TargetPieces[Depth]);
    SEE.TargetIdx = floor((AppliedMove[Depth] % 100));
    Side = 1;
    Repeat (2)
    {
        List.DeleteAll(CalcMovesMoveList);
        List.DeleteAll(CalcMovesScoreList);
        SEE.SourceIdx = 1;
        Repeat (64)
        {
            SEE.SourcePiece = Board[(SEE.SourceIdx + 0)];
            If (((Side == 1) And (SEE.SourcePiece > 0)) Or ((Side == 2) And (SEE.SourcePiece < 0)))
            {
                If ((Not ((abs(SEE.SourcePiece) == GoK_BlackPawn))) Or (Not ((IdxToFile[(SEE.SourceIdx + 0)] == IdxToFile[(SEE.TargetIdx + 0)]))))
                {
                    SEE.Idx = ((PieceIdxLookup[abs(SEE.SourcePiece)] * 10000) + ((SEE.SourceIdx * 100) + SEE.TargetIdx));
                    If (Side == 1)
                    {
                        If (Not ((MoveToHash[(60000 + SEE.Idx)] == 0)))
                        {
                            List.Add(CalcMovesMoveList, SEE.SourceIdx);
                            List.Add(CalcMovesScoreList, SEE.SourcePiece);
                        }
                    }
                    Else
                    {
                        If (Not ((MoveToHash[SEE.Idx] == 0)))
                        {
                            List.Add(CalcMovesMoveList, SEE.SourceIdx);
                            List.Add(CalcMovesScoreList, (0 - SEE.SourcePiece));
                        }
                    }
                }
            }
            SEE.SourceIdx += 1;
        }
        Call SortMoveList((MoveDepth + ((MoveDepth % 2) + Side)));
        SEE.Idx = 1;
        Repeat (List.Length(CalcMovesMoveList))
        {
            If (Side == 1)
            {
                List.Add(SEE.TmpList1, CalcMovesMoveList[(SEE.Idx + 0)]);
            }
            Else
            {
                List.Add(SEE.TmpList2, CalcMovesMoveList[(SEE.Idx + 0)]);
            }
            SEE.Idx += 1;
        }
        Side += 1;
    }
    If (Board[(SEE.TargetIdx + 0)] > 0)
    {
        Side = 2;
    }
    Else
    {
        Side = 1;
    }
    IsDone = (((Side == 1) And (List.Length(SEE.TmpList1) == 0)) Or ((Side == 2) And (List.Length(SEE.TmpList2) == 0)));
    Repeat Until (IsDone == 1)
    {
        FoundIdx = 0;
        SEE.Idx = 1;
        Repeat Until ((FoundIdx > 0) Or (((Side == 1) And (SEE.Idx > List.Length(SEE.TmpList1))) Or ((Side == 2) And (SEE.Idx > List.Length(SEE.TmpList2)))))
        {
            If (Side == 1)
            {
                SEE.SourceIdx = SEE.TmpList1[(SEE.Idx + 0)];
            }
            Else
            {
                SEE.SourceIdx = SEE.TmpList2[(SEE.Idx + 0)];
            }
            Call SEE.IsCounterCaptureReachable(abs(Board[(SEE.SourceIdx + 0)]))(SEE.SourceIdx)(SEE.TargetIdx);
            If (IsReachableRes == 1)
            {
                If (Side == 1)
                {
                    List.DeleteItem(SEE.TmpList1, SEE.Idx);
                }
                Else
                {
                    List.DeleteItem(SEE.TmpList2, SEE.Idx);
                }
                FoundIdx = SEE.SourceIdx;
            }
            Else
            {
                SEE.Idx += 1;
            }
        }
        If (FoundIdx > 0)
        {
            SEE.Move = ((FoundIdx * 100) + SEE.TargetIdx);
            Depth += 1;
            Call ClearMoveList(Depth);
            Call AddMoveToList(SEE.Move)(Depth);
            List.ReplaceItem(MovesIdx, Depth, 1);
            Call ApplyMoveLight(Depth);
            SEE.Result += (0 - TargetPieces[(Depth + 0)]);
            If (Not ((abs(SourcePieces[(Depth + 0)]) == GoK_BlackKing)))
            {
                If (Side == 1)
                {
                    If (SEE.Result < 0)
                    {
                        IsDone = 1;
                    }
                }
                Else
                {
                    If (SEE.Result > 0)
                    {
                        IsDone = 1;
                    }
                }
            }
            If (abs(TargetPieces[(Depth + 0)]) == GoK_BlackKing)
            {
                IsDone = 1;
            }
            MoveCountQ += 1;
            NodeCountQ += 1;
        }
        Else
        {
            IsDone = 1;
        }
        If (Side == 1)
        {
            Side = 2;
        }
        Else
        {
            Side = 1;
        }
    }
    Repeat Until (Depth == MoveDepth)
    {
        Call RevertMoveLight(Depth);
        Depth += -1;
    }
    List.DeleteAll(CalcMovesMoveList);
    List.DeleteAll(CalcMovesScoreList);
    SEE.Idx = 1;
    Repeat (List.Length(SEE.TmpList4))
    {
        List.Add(CalcMovesMoveList, SEE.TmpList4[(SEE.Idx + 0)]);
        SEE.Idx += 1;
    }
    SEE.Idx = 1;
    Repeat (List.Length(SEE.TmpList5))
    {
        List.Add(CalcMovesScoreList, SEE.TmpList5[(SEE.Idx + 0)]);
        SEE.Idx += 1;
    }
}

Define SEE.IsCounterCaptureReachable(string SourcePieceAbs)(string SourceIdx)(string TargetIdx) (warp=true)
{
    IsReachableRes = 0;
    If ((SourcePieceAbs == GoK_BlackKing) Or (SourcePieceAbs == GoK_BlackKnight))
    {
        IsReachableRes = 1;
        Stop(this script);
    }
    If (SourcePieceAbs == GoK_BlackPawn)
    {
        If (Not ((IdxToFile[SourceIdx] == IdxToFile[TargetIdx])))
        {
            IsReachableRes = 1;
            Stop(this script);
        }
    }
    If ((SourcePieceAbs > GoK_BlackKnight) And (SourcePieceAbs < GoK_BlackKing))
    {
        SEECC.idx = ((SourceIdx * 100) + TargetIdx);
        SEECC.SoueceIdx = SourceIdx;
        Repeat ((MoveToPathDelta[SEECC.idx] - 1))
        {
            SEE.SourceIdx += MoveToPathStepInc[SEECC.idx];
            If (Not ((Board[SEECC.SoueceIdx] == 0)))
            {
                Stop(this script);
            }
        }
        IsReachableRes = 1;
    }
}

Define SetCastlingStateFlag(string Depth)(string Offset)(string Val) (warp=true)
{
    CurrentValue = CastlingState[Depth];
    If (Not ((Operator.LetterOf(CurrentValue, Offset) == Val)))
    {
        Idx = (((((Operator.LetterOf(CurrentValue, 1) * 128) + (Operator.LetterOf(CurrentValue, 2) * 64)) + ((Operator.LetterOf(CurrentValue, 3) * 32) + (Operator.LetterOf(CurrentValue, 4) * 16))) + (((Operator.LetterOf(CurrentValue, 5) * 8) + (Operator.LetterOf(CurrentValue, 6) * 4)) + ((Operator.LetterOf(CurrentValue, 7) * 2) + Operator.LetterOf(CurrentValue, 8)))) + 1);
        If (Val == 1)
        {
            List.ReplaceItem(CastlingState, Depth, CastlingStateLookup[(Idx + CastlingStatePow2[Offset])]);
        }
        Else
        {
            List.ReplaceItem(CastlingState, Depth, CastlingStateLookup[(Idx - CastlingStatePow2[Offset])]);
        }
    }
}

Define SetInitialEnPassantTarget(string Depth) (warp=true)
{
    List.ReplaceItem(EnPassantTarget, Depth, "");
    Call GetSubstringRight(GameMoves)(4);
    SourceIdx = floor((SubstringRes / 100));
    TargetIdx = floor((SubstringRes % 100));
    If ((abs(Board[TargetIdx]) == GoK_BlackPawn) And (abs((TargetIdx - SourceIdx)) == 16))
    {
        List.ReplaceItem(EnPassantTarget, Depth, TargetIdx);
    }
}

Define SortList (warp=true)
{
    If (List.Length(CalcMovesScoreList) > 1)
    {
        Call QuickSort;
    }
}

Define SortMoveList(string Depth) (warp=true)
{
    If (Depth == 1)
    {
        List.DeleteAll(Moves1);
        Idx = 1;
        Repeat (List.Length(CalcMovesMoveList))
        {
            List.Add(Moves1, CalcMovesMoveList[Idx]);
            Idx += 1;
        }
        Call SortList;
        Idx = 1;
        Idx2 = List.Length(CalcMovesMoveList);
        Repeat (List.Length(CalcMovesMoveList))
        {
            List.ReplaceItem(Moves, Idx, CalcMovesMoveList[Idx2]);
            List.ReplaceItem(Moves1, Idx, CalcMovesMoveList[Idx2]);
            Idx += 1;
            Idx2 += -1;
        }
        List.ReplaceItem(MovesCount, Depth, List.Length(CalcMovesMoveList));
        Idx = 1;
        Repeat (List.Length(CalcMovesMoveList))
        {
            List.ReplaceItem(CalcMovesMoveList, Idx, Moves[Idx]);
            Idx += 1;
        }
        Stop(this script);
    }
    If (Depth == 2)
    {
        Call SortList;
        Idx2 = ((Depth - 1) * MaxMovesPerGeneration);
        Idx = 1;
        Repeat (List.Length(CalcMovesMoveList))
        {
            List.ReplaceItem(Moves, (Idx2 + Idx), CalcMovesMoveList[Idx]);
            List.Add(Moves2, CalcMovesMoveList[Idx]);
            Idx += 1;
        }
        List.ReplaceItem(MovesCount, Depth, List.Length(CalcMovesMoveList));
        Stop(this script);
    }
    If ((Depth % 2) == 1)
    {
        Call SortList;
        Idx2 = ((Depth - 1) * MaxMovesPerGeneration);
        Idx = 1;
        Repeat (List.Length(CalcMovesMoveList))
        {
            List.ReplaceItem(Moves, (Idx2 + Idx), CalcMovesMoveList[((List.Length(CalcMovesMoveList) - Idx) + 1)]);
            Idx += 1;
        }
        List.ReplaceItem(MovesCount, Depth, List.Length(CalcMovesMoveList));
        Idx2 = ((Depth - 1) * MaxMovesPerGeneration);
        Idx = 1;
        Repeat (List.Length(CalcMovesMoveList))
        {
            List.ReplaceItem(CalcMovesMoveList, Idx, Moves[(Idx2 + Idx)]);
            Idx += 1;
        }
        List.ReplaceItem(MovesCount, Depth, List.Length(CalcMovesMoveList));
    }
    Else
    {
        Call SortList;
        Idx2 = ((Depth - 1) * MaxMovesPerGeneration);
        Idx = 1;
        Repeat (List.Length(CalcMovesMoveList))
        {
            List.ReplaceItem(Moves, (Idx2 + Idx), CalcMovesMoveList[Idx]);
            Idx += 1;
        }
        List.ReplaceItem(MovesCount, Depth, List.Length(CalcMovesMoveList));
    }
}

Define StagedMoveGenKillerMoves(string Depth)(string Move)(string SourceIdx)(string TargetIdx)(string SourcePieceAbs) (warp=true)
{
    If (SourcePieceAbs == GoK_BlackPawn)
    {
        If ((TargetIdx > 56) Or (TargetIdx < 9))
        {
            Stop(this script);
        }
        If (abs((TargetIdx - SourceIdx)) == 16)
        {
            If (Not ((Board[((TargetIdx + SourceIdx) / 2)] == 0)))
            {
                Stop(this script);
            }
        }
        If (Not ((IdxToFile[SourceIdx] == IdxToFile[TargetIdx])))
        {
            Stop(this script);
        }
    }
    If (SourcePieceAbs == GoK_BlackKing)
    {
        If (BoardAttackedCalculated[Depth] == 0)
        {
            Stop(this script);
        }
        If (BoardAttackedByOpponentSnapshot[(((Depth - 1) * 100) + TargetIdx)] > 0)
        {
            Stop(this script);
        }
    }
    If (SourcePieceAbs > GoK_BlackKnight)
    {
        SourceIdx = SourceIdx;
        IdxInc = MoveToPathStepInc[Move];
        Repeat ((MoveToPathDelta[Move] - 1))
        {
            SourceIdx += IdxInc;
            If (Not ((Board[SourceIdx] == 0)))
            {
                Stop(this script);
            }
        }
    }
    Call GetNormalizedMove(Move);
    If Operator.Contains(PickedMoves[Depth], NormalzedMoveRes)
    {
        Stop(this script);
    }
    If List.ContainsItem(TmpList1, Move)
    {
        Stop(this script);
    }
    Call GetMoveScore(Board[SourceIdx])(Board[TargetIdx])(SourceIdx)(TargetIdx)(Move)(Depth);
    List.Add(TmpList1, Move);
    List.Add(TmpList2, MoveScoreRes);
}

Define StagedMoveGenMVVLVA(string Depth)(string SourceIdx)(string TargetIdx)(string SourcePieceAbs)(string TargetPieceAbs)(string PrevTargetIdx) (warp=true)
{
    If (CheckedState[Depth] == 1)
    {
        If (Not ((TargetIdx == PrevTargetIdx)))
        {
            Stop(this script);
        }
    }
    Else
    {
        If (1 == 0)
        {
            If (TargetPieceAbs < SourcePieceAbs)
            {
                Stop(this script);
            }
        }
    }
    If (SourcePieceAbs == GoK_BlackPawn)
    {
        If (IdxToFile[SourceIdx] == IdxToFile[TargetIdx])
        {
            Stop(this script);
        }
        If ((TargetIdx > 56) Or (TargetIdx < 9))
        {
            Stop(this script);
        }
    }
    If (SourcePieceAbs == GoK_BlackKing)
    {
        If (BoardAttackedCalculated[Depth] == 0)
        {
            Stop(this script);
        }
        If (BoardAttackedByOpponentSnapshot[(((Depth - 1) * 100) + TargetIdx)] > 0)
        {
            Stop(this script);
        }
    }
    If (SourcePieceAbs > GoK_BlackKnight)
    {
        Idx = ((SourceIdx * 100) + TargetIdx);
        SourceIdx = SourceIdx;
        Repeat ((MoveToPathDelta[Idx] - 1))
        {
            SourceIdx += MoveToPathStepInc[Idx];
            If (Not ((Board[SourceIdx] == 0)))
            {
                Stop(this script);
            }
        }
    }
    Caller.CurrentMove = ((SourceIdx * 100) + TargetIdx);
    Call GetNormalizedMove(Caller.CurrentMove);
    If Operator.Contains(PickedMoves[Depth], NormalzedMoveRes)
    {
        Stop(this script);
    }
    If List.ContainsItem(TmpList1, Caller.CurrentMove)
    {
        Stop(this script);
    }
    Call GetMoveScore(Board[SourceIdx])(Board[TargetIdx])(SourceIdx)(TargetIdx)(Caller.CurrentMove)(Depth);
    If (Not ((abs(MoveScoreRes) < 7000000)))
    {
        List.Add(TmpList1, Caller.CurrentMove);
        List.Add(TmpList2, MoveScoreRes);
    }
}

Define StoreAttackInfo(string Depth) (warp=true)
{
    If ((Depth % 2) == 0)
    {
        If (1 == 0)
        {
            CurrentValue = "";
            CurrentValue2 = "";
            Idx = 1;
            Repeat (16)
            {
                CurrentValue = Operator.Join(CurrentValue, MoveToZeroPaddedStr[((((BoardAttackedByBlack[Idx] * 1000) + (BoardAttackedByBlack[(Idx + 1)] * 100)) + ((BoardAttackedByBlack[(Idx + 2)] * 10) + BoardAttackedByBlack[(Idx + 3)])) + 1)]);
                CurrentValue2 = Operator.Join(CurrentValue2, MoveToZeroPaddedStr[(((BoardAttackedByBlackPiece[Idx] * 100) + BoardAttackedByBlackPiece[(Idx + 1)]) + 1)]);
                CurrentValue2 = Operator.Join(CurrentValue2, MoveToZeroPaddedStr[(((BoardAttackedByBlackPiece[(Idx + 2)] * 100) + BoardAttackedByBlackPiece[(Idx + 3)]) + 1)]);
                Idx += 4;
            }
        }
        Idx = 1;
        Idx2 = (((Depth - 1) * 100) + 1);
        Repeat (64)
        {
            List.ReplaceItem(BoardAttackedByOpponentSnapshot, Idx2, BoardAttackedByBlack[Idx]);
            List.ReplaceItem(BoardAttackedByOpponentPieceSnapshot, Idx2, BoardAttackedByBlackPiece[Idx]);
            Idx += 1;
            Idx2 += 1;
        }
        IsChecked = IsWhiteChecked;
    }
    Else
    {
        If (1 == 0)
        {
            CurrentValue = "";
            CurrentValue2 = "";
            Idx = 1;
            Repeat (16)
            {
                CurrentValue = Operator.Join(CurrentValue, MoveToZeroPaddedStr[((((BoardAttackedByWhite[Idx] * 1000) + (BoardAttackedByWhite[(Idx + 1)] * 100)) + ((BoardAttackedByWhite[(Idx + 2)] * 10) + BoardAttackedByWhite[(Idx + 3)])) + 1)]);
                CurrentValue2 = Operator.Join(CurrentValue2, MoveToZeroPaddedStr[(((BoardAttackedByWhitePiece[Idx] * 100) + BoardAttackedByWhitePiece[(Idx + 1)]) + 1)]);
                CurrentValue2 = Operator.Join(CurrentValue2, MoveToZeroPaddedStr[(((BoardAttackedByWhitePiece[(Idx + 2)] * 100) + BoardAttackedByWhitePiece[(Idx + 3)]) + 1)]);
                Idx += 4;
            }
        }
        Idx = 1;
        Idx2 = (((Depth - 1) * 100) + 1);
        Repeat (64)
        {
            List.ReplaceItem(BoardAttackedByOpponentSnapshot, Idx2, BoardAttackedByWhite[Idx]);
            List.ReplaceItem(BoardAttackedByOpponentPieceSnapshot, Idx2, BoardAttackedByWhitePiece[Idx]);
            Idx += 1;
            Idx2 += 1;
        }
        IsChecked = IsBlackChecked;
    }
    List.ReplaceItem(CheckedState, Depth, IsChecked);
    If (IsChecked == 0)
    {
        List.ReplaceItem(CheckedStateAttackLines, Depth, "");
    }
    Else
    {
        CurrentValue3 = "";
        Idx = 1;
        Repeat (64)
        {
            If List.ContainsItem(KingAttackLines, Idx)
            {
                CurrentValue3 = Operator.Join(CurrentValue3, 1);
            }
            Else
            {
                CurrentValue3 = Operator.Join(CurrentValue3, 0);
            }
            Idx += 1;
        }
        List.ReplaceItem(CheckedStateAttackLines, Depth, CurrentValue3);
    }
    Call TTStoreNode(CurrentBoardHash)(Depth)("")("")("")(CheckedState[Depth])("")("")("")("")("")("")("")("");
}

Define StoreKillerMove(string Depth)(string Move) (warp=true)
{
    Idx2 = (((Depth - 1) * 2) + 1);
    If (Not ((KillerMoves[(Idx2 + 1)] == Move)))
    {
        List.ReplaceItem(KillerMoves, Idx2, KillerMoves[(Idx2 + 1)]);
        List.ReplaceItem(KillerMoves, (Idx2 + 1), Move);
    }
    Idx = (((Depth % 2) * 1000) + ((PieceIdxLookup[abs(Board[floor((Move / 100))])] * 100) + floor((Move % 100))));
    CurrentValue = (HistoryMoveScores[Idx] + ((IdxDeepening + 5) - Depth));
    List.ReplaceItem(HistoryMoveScores, Idx, CurrentValue);
    If (CurrentValue > MaxHistoryMoveScore[((Depth % 2) + 1)])
    {
        List.ReplaceItem(MaxHistoryMoveScore, ((Depth % 2) + 1), CurrentValue);
    }
    List.ReplaceItem(HistoryCounterMoves, AppliedMove[(Depth - 1)], Move);
}

Define TTProbeBoard(string BoardHash)(string Depth) (warp=true)
{
    Call GetTTNodeHash(BoardHash)(Depth);
    Call TTProbeBoardImpl(TTNodeHashResult);
}

Define TTProbeBoardImpl(string BoardHash) (warp=true)
{
    HashBucket = ((BoardHash % (List.Length(TTBoardHash) - 5)) + 1);
    If (Not ((TTBoardHash[(HashBucket + 0)] == BoardHash)))
    {
        HashBucket += 1;
        If (Not ((TTBoardHash[(HashBucket + 0)] == BoardHash)))
        {
            HashBucket += 1;
            If (Not ((TTBoardHash[(HashBucket + 0)] == BoardHash)))
            {
                HashBucket += 1;
                If (Not ((TTBoardHash[(HashBucket + 0)] == BoardHash)))
                {
                    HashBucket += 1;
                    If (Not ((TTBoardHash[(HashBucket + 0)] == BoardHash)))
                    {
                        TTProbeRes = 0;
                        Stop(this script);
                    }
                }
            }
        }
    }
    TTProbeRes = 1;
    TTProbeBoard.AgeRes = TTBoardAge[(HashBucket + 0)];
    TTProbeBoard.EvalSumRes = TTBoardEvalSum[(HashBucket + 0)];
    TTProbeBoard.EvalSumIsDynamic = 0;
    TTProbeBoard.Eval1Res = "";
    TTProbeBoard.Eval2Res = "";
    TTProbeBoard.Eval3Res = "";
}

Define TTProbeNode(string BoardHash)(string Depth) (warp=true)
{
    Call GetTTNodeHash(BoardHash)(Depth);
    Call TTProbeNodeImpl(TTNodeHashResult)(Depth)(BoardHash);
}

Define TTProbeNodeImpl(string NodeHash)(string Depth)(string BoardHash) (warp=true)
{
    HashBucket = ((NodeHash % (List.Length(TTNodeHash) - 5)) + 1);
    If (Not ((TTNodeHash[(HashBucket + 0)] == NodeHash)))
    {
        HashBucket += 1;
        If (Not ((TTNodeHash[(HashBucket + 0)] == NodeHash)))
        {
            HashBucket += 1;
            If (Not ((TTNodeHash[(HashBucket + 0)] == NodeHash)))
            {
                HashBucket += 1;
                If (Not ((TTNodeHash[(HashBucket + 0)] == NodeHash)))
                {
                    HashBucket += 1;
                    If (Not ((TTNodeHash[(HashBucket + 0)] == NodeHash)))
                    {
                        TTProbeRes = 0;
                        Stop(this script);
                    }
                }
            }
        }
    }
    If ((Not ((TTNodeBoardHash[(HashBucket + 0)] == BoardHash))) Or (Not (((TTNodeDepth[(HashBucket + 0)] % 2) == (Depth % 2)))))
    {
        If (1 == 1)
        {
            Call Log("Warning: hash collision in ttprobe() ")(BoardHash)(" : ")(Depth)(" : ")(CastlingState[Depth])(" : ")(EnPassantTarget[Depth]);
        }
        TTProbeRes = 0;
        Stop(this script);
    }
    TTProbeRes = 1;
    TTProbeNode.BestMoveRes = TTNodeBestMove[(HashBucket + 0)];
    TTProbeNode.EvalRes = TTNodeEval[(HashBucket + 0)];
    TTProbeNode.EvalIsDynamicRes = TTNodeEvalIsDynamic[(HashBucket + 0)];
    TTProbeNode.NodeTypeRes = TTNodeType[(HashBucket + 0)];
    TTProbeNode.CheckedRes = TTNodeChecked[(HashBucket + 0)];
    TTProbeNode.CheckedAttackLinesRes = 0;
    TTProbeNode.HorizonRes = TTNodeHorizon[(HashBucket + 0)];
    TTProbeNode.BoardAttackedByOpp = 0;
    TTProbeNode.BoardAttackedByOppPiece = 0;
    TTProbeNode.AgeRes = TTNodeAge[(HashBucket + 0)];
    TTProbeNode.BlackMobRes = 0;
    TTProbeNode.WhiteMobRes = 0;
    TTProbeNode.QSMeta = 0;
}

Define TTStoreBoard(string BoardHash)(string Depth)(string Eval) (warp=true)
{
    If (IsSearchTimeout == 1)
    {
        Stop(this script);
    }
    Call GetTTNodeHash(BoardHash)(Depth);
    Call TTStoreBoardImpl(TTNodeHashResult)(Eval);
}

Define TTStoreBoardImpl(string BoardHash)(string BoardScoreSum) (warp=true)
{
    HashBucket = ((BoardHash % (List.Length(TTBoardHash) - 5)) + 1);
    Hash = TTBoardHash[(HashBucket + 0)];
    Idx = 1;
    Repeat Until (((Hash == BoardHash) Or (Hash == 0)) Or (Idx > 4))
    {
        Idx += 1;
        HashBucket += 1;
        Hash = TTBoardHash[(HashBucket + 0)];
    }
    If ((Not ((Hash == NodeHash))) And (Not ((Hash == 0))))
    {
        Idx = 1;
        Repeat Until (TTNodeAge[(HashBucket + 0)] < (TT.CurrentAge - 1))
        {
            If (Idx > 4)
            {
                Stop(this script);
            }
            Idx += 1;
            HashBucket += 1;
        }
    }
    List.ReplaceItem(TTBoardAge, (HashBucket + 0), TT.CurrentAge);
    List.ReplaceItem(TTBoardHash, (HashBucket + 0), BoardHash);
    List.ReplaceItem(TTBoardEvalSum, (HashBucket + 0), BoardScoreSum);
}

Define TTStoreNode(string BoardHash)(string Depth)(string Score)(string BestMove)(string Type)(string Checked)(string Horizon)(string BlackMob)(string WhiteMob)(string BoardAttackedByOpp)(string BoardAttackedByOppPiece)(string CheckedAttackLines)(string IsDynamic)(string QSMeta) (warp=true)
{
    If (IsSearchTimeout == 1)
    {
        Stop(this script);
    }
    If (Score == DrawByRepetitionEval)
    {
        Stop(this script);
    }
    If (abs(Score) > AbsMinCheckmateEval)
    {
        Stop(this script);
    }
    If (ChebyshevDistance[((BlackKingIdx * 100) + WhiteKingIdx)] == 1)
    {
        Stop(this script);
    }
    Call GetTTNodeHash(BoardHash)(Depth);
    Call TTStoreNodeImpl(TTNodeHashResult)(Depth)(Score)(BestMove)(Type)(Checked)(Horizon)(BlackMob)(WhiteMob)(BoardAttackedByOpp)(BoardAttackedByOppPiece)(CheckedAttackLines)(IsDynamic)(QSMeta)(BoardHash);
}

Define TTStoreNodeImpl(string NodeHash)(string Depth)(string Score)(string BestMove)(string Type)(string Checked)(string Horizon)(string BlackMob)(string WhiteMob)(string BoardAttackedByOpp)(string BoardAttackedByOppPiece)(string CheckedAttackLines)(string IsDynamic)(string QSMeta)(string BoardHash) (warp=true)
{
    HashBucket = ((NodeHash % (List.Length(TTNodeHash) - 5)) + 1);
    Hash = TTNodeHash[(HashBucket + 0)];
    Idx = 1;
    Repeat Until (((Hash == NodeHash) Or (Hash == 0)) Or (Idx > 4))
    {
        Idx += 1;
        HashBucket += 1;
        Hash = TTNodeHash[(HashBucket + 0)];
    }
    If ((Not ((Hash == NodeHash))) And (Not ((Hash == 0))))
    {
        Idx = 1;
        Repeat Until (TTNodeAge[(HashBucket + 0)] < (TT.CurrentAge - 1))
        {
            If (Idx > 4)
            {
                Stop(this script);
            }
            Idx += 1;
            HashBucket += 1;
        }
    }
    If (TTNodeHash[(HashBucket + 0)] == NodeHash)
    {
        If ((TTNodeBoardHash[(HashBucket + 0)] == BoardHash) And ((TTNodeDepth[(HashBucket + 0)] % 2) == (Depth % 2)))
        {
            If ((Not ((BoardAttackedByOpp == ""))) And (TTNodeBoardAttackedByOpp[HashBucket] == ""))
            {
                List.ReplaceItem(TTNodeBoardAttackedByOpp, (HashBucket + 0), BoardAttackedByOpp);
                List.ReplaceItem(TTNodeBoardAttackedByOppPiece, (HashBucket + 0), BoardAttackedByOppPiece);
                List.ReplaceItem(TTNodeCheckedAttackLines, (HashBucket + 0), CheckedAttackLines);
            }
            If (Not ((Checked == "")))
            {
                List.ReplaceItem(TTNodeChecked, (HashBucket + 0), Checked);
            }
            HorizonLoc = TTNodeHorizon[(HashBucket + 0)];
            If (((Not ((Score == ""))) And (Not ((Horizon == "")))) And (((Not ((Horizon < HorizonLoc))) Or (HorizonLoc == "")) Or (TTNodeEval[(HashBucket + 0)] == "")))
            {
                List.ReplaceItem(TTNodeType, (HashBucket + 0), Type);
                List.ReplaceItem(TTNodeEval, (HashBucket + 0), Score);
                List.ReplaceItem(TTNodeEvalIsDynamic, (HashBucket + 0), IsDynamic);
                List.ReplaceItem(TTNodeHorizon, (HashBucket + 0), Horizon);
                List.ReplaceItem(TTNodeAge, (HashBucket + 0), TT.CurrentAge);
                List.ReplaceItem(TTNodeBestMove, (HashBucket + 0), BestMove);
            }
        }
        Else
        {
            If (1 == 1)
            {
                Call Log("Warning: hash collision in ttstore() ")(BoardHash)(" : ")(Depth)(" : ")(TTNodeBoardHash[(HashBucket + 0)])(" : ")(TTNodeDepth[(HashBucket + 0)]);
            }
        }
    }
    Else
    {
        List.ReplaceItem(TTNodeBestMove, (HashBucket + 0), BestMove);
        List.ReplaceItem(TTNodeBoardAttackedByOpp, (HashBucket + 0), BoardAttackedByOpp);
        List.ReplaceItem(TTNodeBoardAttackedByOppPiece, (HashBucket + 0), BoardAttackedByOppPiece);
        List.ReplaceItem(TTNodeChecked, (HashBucket + 0), Checked);
        List.ReplaceItem(TTNodeCheckedAttackLines, (HashBucket + 0), CheckedAttackLines);
        List.ReplaceItem(TTNodeHash, (HashBucket + 0), NodeHash);
        List.ReplaceItem(TTNodeBoardHash, (HashBucket + 0), BoardHash);
        List.ReplaceItem(TTNodeDepth, (HashBucket + 0), Depth);
        List.ReplaceItem(TTNodeType, (HashBucket + 0), Type);
        List.ReplaceItem(TTNodeEval, (HashBucket + 0), Score);
        List.ReplaceItem(TTNodeEvalIsDynamic, (HashBucket + 0), IsDynamic);
        List.ReplaceItem(TTNodeHorizon, (HashBucket + 0), Horizon);
        List.ReplaceItem(TTNodeAge, (HashBucket + 0), TT.CurrentAge);
    }
}

Define UndoMove (warp=false)
{
    Call EnterExecution;
    If ((IsInUndo == 0) And (List.Length(GameMovesAN) > 1))
    {
        IsInUndo = 1;
        Stg_FromSquareIdx = -1;
        Stg_ToSquareIdx = -1;
        Event.BroadcastAndWait("Stg_FromSquareSelected");
        Event.BroadcastAndWait("Stg_ToSquareSelected");
        Call UndoPrevMove;
        If (BoardHistoryWasEngineMove[List.Length(BoardHistoryWasEngineMove)] == 0)
        {
            Call UndoPrevMove;
        }
        Call DrawBoardAndWait;
        GoK_IsGameSuspended = 0;
        IsInUndo = 0;
    }
    Call ExitExecution;
}

Define UndoPrevMove (warp=false)
{
    If (List.Length(GameMovesAN) > 0)
    {
        List.DeleteItem(BoardHistory, List.Length(BoardHistory));
        List.DeleteItem(BoardHistoryHash, List.Length(BoardHistoryHash));
        List.DeleteItem(BoardHistoryMetaState, List.Length(BoardHistoryMetaState));
        List.DeleteItem(BoardHistoryWasEngineMove, List.Length(BoardHistoryWasEngineMove));
        List.DeleteItem(GameMovesAN, List.Length(GameMovesAN));
        Call ImportBoardImpl(BoardHistory[List.Length(BoardHistory)]);
        Call GetSubstringLeft(GameMoves)((Variable.Length(GameMoves) - 4));
        GameMoves = SubstringRes;
        HasBlackCastled = Operator.LetterOf(BoardHistoryMetaState[List.Length(BoardHistoryMetaState)], 1);
        HasBlackKingMoved = Operator.LetterOf(BoardHistoryMetaState[List.Length(BoardHistoryMetaState)], 2);
        HasBlackRookKSMoved = Operator.LetterOf(BoardHistoryMetaState[List.Length(BoardHistoryMetaState)], 3);
        HasBlackRookQSMoved = Operator.LetterOf(BoardHistoryMetaState[List.Length(BoardHistoryMetaState)], 4);
        HasWhiteCastled = Operator.LetterOf(BoardHistoryMetaState[List.Length(BoardHistoryMetaState)], 5);
        HasWhiteKingMoved = Operator.LetterOf(BoardHistoryMetaState[List.Length(BoardHistoryMetaState)], 6);
        HasWhiteRookKSMoved = Operator.LetterOf(BoardHistoryMetaState[List.Length(BoardHistoryMetaState)], 7);
        HasWhiteRookQSMoved = Operator.LetterOf(BoardHistoryMetaState[List.Length(BoardHistoryMetaState)], 8);
        Call CalcBoardStats;
    }
}

Define UpdateMoveHashPosEval(string Piece)(string SourceIdx)(string TargetIdx)(bool PosScoreUpdate)(string Depth) (warp=true)
{
    Call GetPiecePosHash(Piece)(SourceIdx);
    CurrentBoardHash = (CurrentBoardHash - PiecePosHash);
    If ((abs(Piece) == GoK_BlackPawn) Or (abs(Piece) == GoK_BlackKing))
    {
        CurrentBoardHashKP = (CurrentBoardHashKP - PiecePosHash);
    }
    Call GetPiecePosHash(Piece)(TargetIdx);
    CurrentBoardHash = (CurrentBoardHash + PiecePosHash);
    If ((abs(Piece) == GoK_BlackPawn) Or (abs(Piece) == GoK_BlackKing))
    {
        CurrentBoardHashKP = (CurrentBoardHashKP + PiecePosHash);
    }
    Call GetPiecePosEval(Piece)(SourceIdx);
    If PosScoreUpdate
    {
        List.ReplaceItem(PosEvalDelta, Depth, (PosEvalDelta[Depth] - PosEvalRes));
    }
    Else
    {
        List.ReplaceItem(PosEvalDelta, Depth, (0 - PosEvalRes));
    }
    Call GetPiecePosEval(Piece)(TargetIdx);
    List.ReplaceItem(PosEvalDelta, Depth, (PosEvalDelta[Depth] + PosEvalRes));
}

Define UpdateMoveNotationPV (warp=true)
{
    PV = "";
    Idx = 2;
    Repeat (PV[1])
    {
        PV = Operator.Join(Operator.Join(PV, PV[Idx]), " ");
        Idx += 1;
    }
}

Define UpdatePV(string Depth)(string BestMove) (warp=true)
{
    Idx = (((Depth - 1) * MaxSearchDepthStackFrames) + 1);
    Idx2 = ((Depth * MaxSearchDepthStackFrames) + 1);
    Length = PV[Idx2];
    List.ReplaceItem(PV, Idx, (Length + 1));
    Call GetMoveNotation(BestMove);
    List.ReplaceItem(PV, (Idx + 1), MoveNotationRes);
    Idx += 2;
    Idx2 += 1;
    Repeat (Length)
    {
        List.ReplaceItem(PV, Idx, PV[Idx2]);
        Idx += 1;
        Idx2 += 1;
    }
    If (Depth == 1)
    {
        If (PV[1] > 1)
        {
            Call UpdateMoveNotationPV;
        }
    }
}

Define _ClearLists (warp=true)
{
    List.DeleteAll(TTNodeHorizon);
    List.DeleteAll(TTNodeBoardHash);
    List.DeleteAll(OpeningMoves);
    List.DeleteAll(PosPieceHashLookup);
    List.DeleteAll(MoveSlidingStraightListIdxToTargetIdx);
    List.DeleteAll(MoveCrossOffsetIdxToDelta);
    List.DeleteAll(MoveListOffsetToTargetIdxKing);
    List.DeleteAll(MoveListOffsetToTargetIdxKnight);
    List.DeleteAll(Logfile);
    List.DeleteAll(MoveToEvalDelta);
    List.DeleteAll(TmpList3);
    List.DeleteAll(MoveToPathDelta);
    List.DeleteAll(MoveToPathStepInc);
    List.DeleteAll(OpeningMoves);
    List.DeleteAll(OpeningMovesMapHash);
    List.DeleteAll(OpeningMovesMapStack);
    List.DeleteAll(OpeningMovesMapMove);
    List.DeleteAll(PieceIdxLookup);
    List.DeleteAll(Moves);
    List.DeleteAll(HistoryMoveScores);
    List.DeleteAll(BoardHistoryHash);
    List.DeleteAll(ChebyshevDistance);
    List.DeleteAll(NNUE_ListRes_1);
    List.DeleteAll(NNUE_Accumulator);
    List.DeleteAll(CastlingStateLookup);
    List.DeleteAll(MoveCrossListIdxToTargetIdx);
    List.DeleteAll(MoveSourceIdxToListOffsetNonSliding);
    List.DeleteAll(MoveListOffsetToTargetIdxKing);
    List.DeleteAll(MoveListOffsetToTargetIdxKnight);
    List.DeleteAll(MoveSourceIdxToListOffsetSliding);
    List.DeleteAll(MoveCrossOffsetIdxToDelta);
    List.DeleteAll(MoveSlidingStraighOffsetIdxToDelta);
    List.DeleteAll(MoveSlidingStraightListIdxToTargetIdx);
    List.DeleteAll(MoveToZeroPaddedStr);
    List.DeleteAll(MoveToPathDelta);
    List.DeleteAll(MoveToPathStepInc);
    List.DeleteAll(Moves);
    List.DeleteAll(TTBoardAge);
    List.DeleteAll(TTBoardHash);
    List.DeleteAll(TTBoardEval1);
    List.DeleteAll(TTBoardEval2);
    List.DeleteAll(TTBoardEval3);
    List.DeleteAll(TTBoardEvalIsDynamic);
    List.DeleteAll(TTBoardEvalSum);
    List.DeleteAll(TTNodeAge);
    List.DeleteAll(TTNodeBestMove);
    List.DeleteAll(TTNodeBlackMobility);
    List.DeleteAll(TTNodeBoardAttackedByOpp);
    List.DeleteAll(TTNodeBoardAttackedByOppPiece);
    List.DeleteAll(TTNodeChecked);
    List.DeleteAll(TTNodeCheckedAttackLines);
    List.DeleteAll(TTNodeDepth);
    List.DeleteAll(TTNodeHash);
    List.DeleteAll(TTNodeHorizon);
    List.DeleteAll(TTNodeEval);
    List.DeleteAll(TTNodeEvalIsDynamic);
    List.DeleteAll(TTNodeType);
    List.DeleteAll(TTNodeWhiteMobility);
    List.DeleteAll(NNUE_Accumulator);
    List.DeleteAll(NNUE_GoKIdxToSquare);
    List.DeleteAll(NNUE_HiddenBias);
    List.DeleteAll(NNUE_HiddenWeights);
    List.DeleteAll(NNUE_Accumulator);
    List.DeleteAll(NNUE_InputIdxMap);
    List.DeleteAll(NNUE_InputWeights_1);
    List.DeleteAll(NNUE_InputWeights_2);
    List.DeleteAll(NNUE_ListRes_1);
    List.DeleteAll(NNUE_ListRes_2);
    List.DeleteAll(NNUE_OutputBias);
    List.DeleteAll(NNUE_PrevRefreshBoard);
    List.DeleteAll(HistoryCounterMoves);
    List.DeleteAll(HashMoveMetaData);
    List.DeleteAll(MoveToEvalDelta);
    List.DeleteAll(MoveToHash);
    List.DeleteItem(BoardHistory, all);
    List.DeleteItem(BoardHistoryHash, all);
    List.DeleteItem(BoardHistoryMetaState, all);
    List.DeleteItem(BoardHistoryWasEngineMove, all);
    List.DeleteItem(GameMovesAN, all);
    List.DeleteItem(BoardAttackedByWhite, all);
    List.DeleteItem(BoardAttackedByBlack, all);
    List.DeleteItem(PieceMobility, all);
    List.DeleteItem(BoardAttackedByWhitePiece, all);
    List.DeleteItem(BoardAttackedByBlackPiece, all);
    List.DeleteItem(Alphas, all);
    List.DeleteItem(Betas, all);
    List.DeleteItem(AlphasOld, all);
    List.DeleteItem(BetasOld, all);
    List.DeleteItem(SearchEvalResults, all);
    List.DeleteItem(SearchEvalResultsIsDynamic, all);
    List.DeleteItem(MovesCount, all);
    List.DeleteItem(MovesIdx, all);
    List.DeleteItem(BestMoveListIdx, all);
    List.DeleteItem(TargetPieces, all);
    List.DeleteItem(PreviousBoardHash, all);
    List.DeleteItem(PreviousBoardHashKP, all);
    List.DeleteItem(NodeTypes, all);
    List.DeleteItem(PickMoveRes, all);
    List.DeleteItem(PickPhase, all);
    List.DeleteItem(PickedMoves, all);
    List.DeleteItem(PickedMoveCount, all);
    List.DeleteItem(BestMoves, all);
    List.DeleteItem(CheckedState, all);
    List.DeleteItem(CheckedStateAttackLines, all);
    List.DeleteItem(PromotionPieces, all);
    List.DeleteItem(TargetPiecesIdx, all);
    List.DeleteItem(PosEvalDelta, all);
    List.DeleteItem(BoardAttackedCalculated, all);
    List.DeleteItem(PutsInCheck, all);
    List.DeleteItem(EvalExtended1, all);
    List.DeleteItem(SearchExtension, all);
    List.DeleteItem(SourcePieces, all);
    List.DeleteItem(EvalExtended2, all);
    List.DeleteItem(EvalExtended3, all);
    List.DeleteItem(BlackMobBonus, all);
    List.DeleteItem(WhiteMobBonus, all);
    List.DeleteItem(AppliedMove, all);
    List.DeleteItem(CapturesDeltaSum, all);
    List.DeleteItem(PosEvalDeltaSum, all);
    List.DeleteItem(SearchExtensionTagged, all);
    List.DeleteItem(Quiescence, all);
    List.DeleteItem(EnPassantTarget, all);
    List.DeleteItem(PassedWhitePawnOnEndgame, all);
    List.DeleteItem(CastlingState, all);
    List.DeleteItem(PawnShelterCapture, all);
    List.DeleteItem(BoardEval, all);
    List.DeleteItem(QuiescentCheckMoveCount, all);
    List.DeleteItem(DepthEvalFactor, all);
    List.DeleteItem(CastlingStateLookup, all);
    List.DeleteItem(CastlingStatePow2, all);
    List.DeleteItem(BlackPawnCount, all);
    List.DeleteItem(WhitePawnCount, all);
    List.DeleteAll(Moves);
    List.DeleteAll(Ply1Scores);
    List.DeleteAll(BoardAttackedByOpponentPieceSnapshot);
    List.DeleteAll(BoardAttackedByOpponentSnapshot);
    List.DeleteAll(BoardAttackedByOwnPieceSnapshot);
    List.DeleteAll(BoardAttackedByOwnSnapshot);
    List.DeleteAll(PV);
}
