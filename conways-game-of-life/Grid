//----- Green flag events ---------------------------------------------------------------------------------------------

WhenGreenFlagClicked()
{
    Pen.Clear();
}


//----- Key pressed events --------------------------------------------------------------------------------------------

WhenKeyPressed(p)
{
    If (IsProfilerEnabled == 0)
    {
        IsProfilerEnabled = 1;
        List.DeleteAll(ProfilerData);
        List.Show(ProfilerData);
    }
    Else
    {
        IsProfilerEnabled = 0;
        List.DeleteAll(ProfilerData);
        List.Hide(ProfilerData);
    }
}


//----- Broadcast received events -------------------------------------------------------------------------------------

WhenBroadcastReceived(clicked)
{
    If ((Clicked == 0) And (Dragging == 0))
    {
        ClickX = (OffsetX + (240 + floor((Sensing.MouseX() / ZoomLevel))));
        ClickY = (OffsetY + (180 - floor((Sensing.MouseY() / ZoomLevel))));
        If (((ClickX > 0) And (ClickX < GridWidth)) And ((ClickY > 0) And (ClickY < GridHeight)))
        {
            ClickIdx = ((ClickY * GridWidth) + ClickX);
            Clicked = 1;
        }
    }
}

WhenBroadcastReceived(startGoL)
{
    GliderGun = 000000000000000000000000100000000000000000000000000000000010100000000000000000000000110000001100000000000000000000000001000100001100000000000011110000000010000010001100000000000011110000000010001011000010100000000000000000000010000010000000100000000000000000000001000100000000000000000000000000000000110000000000000000000000;
    Pulsar = 0011100011100000000000000010000101000011000010100001100001010000100111000111000000000000000001110001110010000101000011000010100001100001010000100000000000000011100011100;
    Command = "";
    GridType = 2;
    CustomPattern = "";
    CustomPatternWidth = 0;
    CustomPatternHeight = 0;
    Status = "Initializing";
    Event.Broadcast("statuschanged");
    Call InitLoopkups;
    Call Init;
    Status = "";
    Event.Broadcast("statuschanged");
    Looks.Say("");
    Call RunMainLoop;
}


//----- Custom blocks -------------------------------------------------------------------------------------------------

Define AddToActiveClusters(string ClusterIdx) (warp=true)
{
    If (ActiveClusterIdxLookup[ClusterIdx] == "")
    {
        List.Add(ActiveClusterIdx, ClusterIdx);
        List.ReplaceItem(ActiveClusterIdxLookup, ClusterIdx, List.Length(ActiveClusterIdx));
    }
}

Define CalcFPS (warp=false)
{
    FpsTime += (Sensing.DaysSince2000() * 86400);
    Fps = Operator.Round((FpsCount / FpsTime));
    FpsTime = (0 - (Sensing.DaysSince2000() * 86400));
}

Define CalcLookup (warp=true)
{
    List.DeleteAll(GenerationLookup);
    ClusterValue = 0;
    Repeat (65536)
    {
        NeighbourCount1 = ((((floor((ClusterValue / 32768)) % 2) + (floor((ClusterValue / 16384)) % 2)) + ((floor((ClusterValue / 8192)) % 2) + (floor((ClusterValue / 2048)) % 2))) + (((floor((ClusterValue / 512)) % 2) + (floor((ClusterValue / 128)) % 2)) + ((floor((ClusterValue / 64)) % 2) + (floor((ClusterValue / 32)) % 2))));
        NeighbourCount2 = ((((floor((ClusterValue / 16384)) % 2) + (floor((ClusterValue / 8192)) % 2)) + ((floor((ClusterValue / 4096)) % 2) + (floor((ClusterValue / 1024)) % 2))) + (((floor((ClusterValue / 256)) % 2) + (floor((ClusterValue / 64)) % 2)) + ((floor((ClusterValue / 32)) % 2) + (floor((ClusterValue / 16)) % 2))));
        NeighbourCount3 = ((((floor((ClusterValue / 2048)) % 2) + (floor((ClusterValue / 1024)) % 2)) + ((floor((ClusterValue / 512)) % 2) + (floor((ClusterValue / 128)) % 2))) + (((floor((ClusterValue / 32)) % 2) + (floor((ClusterValue / 8)) % 2)) + ((floor((ClusterValue / 4)) % 2) + (floor((ClusterValue / 2)) % 2))));
        NeighbourCount4 = ((((floor((ClusterValue / 1024)) % 2) + (floor((ClusterValue / 512)) % 2)) + ((floor((ClusterValue / 256)) % 2) + (floor((ClusterValue / 64)) % 2))) + (((floor((ClusterValue / 16)) % 2) + (floor((ClusterValue / 4)) % 2)) + ((floor((ClusterValue / 2)) % 2) + (floor((ClusterValue / 1)) % 2))));
        NewClusterValue = 0;
        If ((floor((ClusterValue / 1024)) % 2) == 0)
        {
            If (NeighbourCount1 == 3)
            {
                NewClusterValue += 8;
            }
        }
        Else
        {
            If ((NeighbourCount1 == 2) Or (NeighbourCount1 == 3))
            {
                NewClusterValue += 8;
            }
        }
        If ((floor((ClusterValue / 512)) % 2) == 0)
        {
            If (NeighbourCount2 == 3)
            {
                NewClusterValue += 4;
            }
        }
        Else
        {
            If ((NeighbourCount2 == 2) Or (NeighbourCount2 == 3))
            {
                NewClusterValue += 4;
            }
        }
        If ((floor((ClusterValue / 64)) % 2) == 0)
        {
            If (NeighbourCount3 == 3)
            {
                NewClusterValue += 2;
            }
        }
        Else
        {
            If ((NeighbourCount3 == 2) Or (NeighbourCount3 == 3))
            {
                NewClusterValue += 2;
            }
        }
        If ((floor((ClusterValue / 32)) % 2) == 0)
        {
            If (NeighbourCount4 == 3)
            {
                NewClusterValue += 1;
            }
        }
        Else
        {
            If ((NeighbourCount4 == 2) Or (NeighbourCount4 == 3))
            {
                NewClusterValue += 1;
            }
        }
        List.Add(GenerationLookup, NewClusterValue);
        ClusterValue += 1;
    }
}

Define CalcLookupBitOps (warp=true)
{
    List.DeleteAll(CalcBottom);
    List.DeleteAll(CalcCenter);
    List.DeleteAll(CalcLeft);
    List.DeleteAll(CalcLeftBottom);
    List.DeleteAll(CalcLeftTop);
    List.DeleteAll(CalcRight);
    List.DeleteAll(CalcRightBottom);
    List.DeleteAll(CalcRightTop);
    List.DeleteAll(CalcTop);
    ClusterValue = 0;
    Repeat (65536)
    {
        List.Add(CalcLeftTop, ((ClusterValue % 2) * 32768));
        List.Add(CalcTop, ((ClusterValue % 4) * 8192));
        List.Add(CalcRightTop, ((floor((ClusterValue / 2)) % 2) * 4096));
        List.Add(CalcLeft, (((floor((ClusterValue / 4)) % 2) * 2048) + ((ClusterValue % 2) * 128)));
        List.Add(CalcCenter, ((floor((ClusterValue / 4)) * 512) + ((ClusterValue % 4) * 32)));
        List.Add(CalcRight, (((floor((ClusterValue / 8)) % 2) * 256) + ((floor((ClusterValue / 2)) % 2) * 16)));
        List.Add(CalcLeftBottom, ((floor((ClusterValue / 4)) % 2) * 8));
        List.Add(CalcBottom, (floor((ClusterValue / 4)) * 2));
        List.Add(CalcRightBottom, (floor((ClusterValue / 8)) % 2));
        ClusterValue += 1;
    }
}

Define CalcNext (warp=true)
{
    FpsCount = 0;
    CalcTime = (Sensing.DaysSince2000() * 86400);
    Call CalcNextGeneration;
    FpsCount += 1;
    If (List.Length(InvalidatedIdx2) > 0)
    {
        Generations += 1;
    }
    If (FrameSkipping == 1)
    {
        Repeat Until ((Sensing.DaysSince2000() * 86400) > (CalcTime + (1 / 30)))
        {
            Call CalcNextGeneration;
            FpsCount += 1;
            If (List.Length(InvalidatedIdx2) > 0)
            {
                Generations += 1;
            }
        }
    }
}

Define CalcNextGeneration (warp=true)
{
    List.DeleteAll(InvalidatedVal2);
    List.DeleteAll(InvalidatedIdx2);
    Idx = 1;
    Repeat (List.Length(InvalidatedIdx1))
    {
        ClusterIdx = InvalidatedIdx1[Idx];
        ClusterIdx2 = (ClusterIdx - ClustersPerRow);
        ClusterIdx3 = (ClusterIdx + ClustersPerRow);
        ClusterValue = GenerationLookup[((CalcCenter[(Grid[ClusterIdx] + 1)] + (((CalcLeftTop[(Grid[(ClusterIdx2 - 1)] + 1)] + CalcTop[(Grid[ClusterIdx2] + 1)]) + (CalcRightTop[(Grid[(ClusterIdx2 + 1)] + 1)] + CalcLeft[(Grid[(ClusterIdx - 1)] + 1)])) + ((CalcRight[(Grid[(ClusterIdx + 1)] + 1)] + CalcLeftBottom[(Grid[(ClusterIdx3 - 1)] + 1)]) + (CalcBottom[(Grid[ClusterIdx3] + 1)] + CalcRightBottom[(Grid[(ClusterIdx3 + 1)] + 1)])))) + 1)];
        If (MarginType[ClusterIdx] > 0)
        {
            If (MarginType[ClusterIdx] == 1)
            {
                If ((floor((ClusterValue / 8)) % 2) == 1)
                {
                    ClusterValue += -8;
                }
                If ((floor((ClusterValue / 2)) % 2) == 1)
                {
                    ClusterValue += -2;
                }
            }
            Else
            {
                If (MarginType[ClusterIdx] == 2)
                {
                    If ((floor((ClusterValue / 4)) % 2) == 1)
                    {
                        ClusterValue += -4;
                    }
                    If ((floor((ClusterValue / 1)) % 2) == 1)
                    {
                        ClusterValue += -1;
                    }
                }
            }
        }
        If (Not ((Grid[ClusterIdx] == ClusterValue)))
        {
            List.Add(InvalidatedVal2, ClusterValue);
            List.Add(InvalidatedIdx2, ClusterIdx);
            If (GridColor[ClusterIdx] == 0)
            {
                If (Grid[ClusterIdx2] > 0)
                {
                    List.ReplaceItem(GridColor, ClusterIdx, GridColor[ClusterIdx2]);
                }
                Else
                {
                    If (Grid[ClusterIdx3] > 0)
                    {
                        List.ReplaceItem(GridColor, ClusterIdx, GridColor[ClusterIdx3]);
                    }
                    Else
                    {
                        If (Grid[(ClusterIdx + 1)] > 0)
                        {
                            List.ReplaceItem(GridColor, ClusterIdx, GridColor[(ClusterIdx + 1)]);
                        }
                        Else
                        {
                            If (Grid[(ClusterIdx - 1)] > 0)
                            {
                                List.ReplaceItem(GridColor, ClusterIdx, GridColor[(ClusterIdx - 1)]);
                            }
                        }
                    }
                }
            }
        }
        List.ReplaceItem(IsInvalidated1, ClusterIdx, 0);
        Idx += 1;
    }
    List.DeleteAll(InvalidatedIdx1);
    Idx = 1;
    Repeat (List.Length(InvalidatedIdx2))
    {
        ClusterIdx = InvalidatedIdx2[Idx];
        ClusterValue = InvalidatedVal2[Idx];
        If (ClusterValue == 0)
        {
            List.ReplaceItem(ActiveClusterIdx, ActiveClusterIdxLookup[ClusterIdx], ActiveClusterIdx[List.Length(ActiveClusterIdx)]);
            List.ReplaceItem(ActiveClusterIdxLookup, ActiveClusterIdx[List.Length(ActiveClusterIdx)], ActiveClusterIdxLookup[ClusterIdx]);
            List.ReplaceItem(ActiveClusterIdxLookup, ClusterIdx, "");
            List.DeleteItem(ActiveClusterIdx, List.Length(ActiveClusterIdx));
            List.ReplaceItem(GridColor, ClusterIdx, 0);
        }
        Else
        {
            If (Grid[ClusterIdx] == 0)
            {
                List.Add(ActiveClusterIdx, ClusterIdx);
                List.ReplaceItem(ActiveClusterIdxLookup, ClusterIdx, List.Length(ActiveClusterIdx));
            }
        }
        Idx2 = (((ClusterValue * 16) + Grid[ClusterIdx]) + 1);
        CellDiff1 = CellDelta1[Idx2];
        CellDiff2 = CellDelta2[Idx2];
        CellDiff3 = CellDelta3[Idx2];
        CellDiff4 = CellDelta4[Idx2];
        List.ReplaceItem(Grid, ClusterIdx, ClusterValue);
        If (IsInvalidated1[ClusterIdx] == 0)
        {
            List.Add(InvalidatedIdx1, ClusterIdx);
            List.ReplaceItem(IsInvalidated1, ClusterIdx, 1);
        }
        If ((CellDiff1 == 1) Or (CellDiff2 == 1))
        {
            ClusterIdx2 = (ClusterIdx - ClustersPerRow);
            If (IsInvalidated1[ClusterIdx2] == 0)
            {
                List.Add(InvalidatedIdx1, ClusterIdx2);
                List.ReplaceItem(IsInvalidated1, ClusterIdx2, 1);
            }
            If (CellDiff1 == 1)
            {
                If (IsInvalidated1[(ClusterIdx2 - 1)] == 0)
                {
                    List.Add(InvalidatedIdx1, (ClusterIdx2 - 1));
                    List.ReplaceItem(IsInvalidated1, (ClusterIdx2 - 1), 1);
                }
            }
            If (CellDiff2 == 1)
            {
                If (IsInvalidated1[(ClusterIdx2 + 1)] == 0)
                {
                    List.Add(InvalidatedIdx1, (ClusterIdx2 + 1));
                    List.ReplaceItem(IsInvalidated1, (ClusterIdx2 + 1), 1);
                }
            }
        }
        If ((CellDiff1 == 1) Or (CellDiff3 == 1))
        {
            If (IsInvalidated1[(ClusterIdx - 1)] == 0)
            {
                List.Add(InvalidatedIdx1, (ClusterIdx - 1));
                List.ReplaceItem(IsInvalidated1, (ClusterIdx - 1), 1);
            }
            If (CellDiff3 == 1)
            {
                ClusterIdx2 = (ClusterIdx + ClustersPerRow);
                If (IsInvalidated1[(ClusterIdx2 - 1)] == 0)
                {
                    List.Add(InvalidatedIdx1, (ClusterIdx2 - 1));
                    List.ReplaceItem(IsInvalidated1, (ClusterIdx2 - 1), 1);
                }
            }
        }
        If ((CellDiff3 == 1) Or (CellDiff4 == 1))
        {
            ClusterIdx2 = (ClusterIdx + ClustersPerRow);
            If (IsInvalidated1[ClusterIdx2] == 0)
            {
                List.Add(InvalidatedIdx1, ClusterIdx2);
                List.ReplaceItem(IsInvalidated1, ClusterIdx2, 1);
            }
            If (CellDiff4 == 1)
            {
                If (IsInvalidated1[(ClusterIdx2 + 1)] == 0)
                {
                    List.Add(InvalidatedIdx1, (ClusterIdx2 + 1));
                    List.ReplaceItem(IsInvalidated1, (ClusterIdx2 + 1), 1);
                }
            }
        }
        If ((CellDiff2 == 1) Or (CellDiff4 == 1))
        {
            If (IsInvalidated1[(ClusterIdx + 1)] == 0)
            {
                List.Add(InvalidatedIdx1, (ClusterIdx + 1));
                List.ReplaceItem(IsInvalidated1, (ClusterIdx + 1), 1);
            }
        }
        Idx += 1;
    }
}

Define HandleInput (warp=true)
{
    If (Command == "Random")
    {
        Call InitGridData;
        ColorCount = 0;
        CurrentPattern = "";
        Repeat ((GridWidth * GridHeight))
        {
            If (Operator.Random(1 / 12) == 1)
            {
                CurrentPattern = Operator.Join(CurrentPattern, 1);
            }
            Else
            {
                CurrentPattern = Operator.Join(CurrentPattern, 0);
            }
        }
        Call InsertPattern(CurrentPattern)(1)(GridWidth)(GridHeight);
        Command = "";
    }
    If (Command == "Import")
    {
        Call ImportRlePattern(ImportPattern);
        Command = "";
    }
    If (Command == "Clear")
    {
        Call InitGridData;
        Command = "";
        Generations = 0;
        ColorCount = 0;
    }
    If (Command == "SuspendResume")
    {
        If (IsSuspended == 1)
        {
            IsSuspended = 0;
        }
        Else
        {
            IsSuspended = 1;
        }
        Command = "";
    }
    If (Command == "ToggleGrid")
    {
        If (GridType == 1)
        {
            GridType = 2;
            Call Init;
        }
        Else
        {
            GridType = 1;
            Call Init;
        }
        Command = "";
    }
    If (Clicked == 1)
    {
        If (LifeForm == "GliderGun")
        {
            Call InsertPattern(GliderGun)(ClickIdx)(36)(9);
        }
        If (LifeForm == "Pulsar")
        {
            Call InsertPattern(Pulsar)(ClickIdx)(13)(13);
        }
        If (LifeForm == "Spaceship")
        {
            Call InsertPattern(01111111000001000000110000100011000)(ClickIdx)(7)(5);
        }
        If (LifeForm == "Pentomino")
        {
            Call InsertPattern(011110010)(ClickIdx)(3)(3);
        }
        If (LifeForm == "Custom")
        {
            Call InsertPattern(CustomPattern)(ClickIdx)(CustomPatternWidth)(CustomPatternHeight);
        }
        Clicked = 0;
    }
}

Define ImportRlePattern(string RlePattern) (warp=true)
{
    List.DeleteAll(ImportPatternBuffer);
    List.Add(ImportPatternBuffer, "");
    MaxLen = 0;
    Idx = 1;
    Repeat Until ((Idx > Variable.Length(RlePattern)) Or (Operator.LetterOf(RlePattern, Idx) == "!"))
    {
        InsertCellVal = "";
        Counter = 0;
        Repeat Until ((Operator.LetterOf(RlePattern, Idx) < 0) Or (Operator.LetterOf(RlePattern, Idx) > 9))
        {
            Counter = ((Counter * 10) + Operator.LetterOf(RlePattern, Idx));
            Idx += 1;
        }
        If (Counter == 0)
        {
            Counter = 1;
        }
        If ((Operator.LetterOf(RlePattern, Idx) == "b") Or (Operator.LetterOf(RlePattern, Idx) == "o"))
        {
            If (Operator.LetterOf(RlePattern, Idx) == "b")
            {
                InsertCellVal = 0;
            }
            If (Operator.LetterOf(RlePattern, Idx) == "o")
            {
                InsertCellVal = 1;
            }
            Repeat (Counter)
            {
                List.ReplaceItem(ImportPatternBuffer, List.Length(ImportPatternBuffer), Operator.Join(ImportPatternBuffer[List.Length(ImportPatternBuffer)], InsertCellVal));
                If (Variable.Length(ImportPatternBuffer[List.Length(ImportPatternBuffer)]) > MaxLen)
                {
                    MaxLen = Variable.Length(ImportPatternBuffer[List.Length(ImportPatternBuffer)]);
                }
            }
            Idx += 1;
        }
        Else
        {
            If (Operator.LetterOf(RlePattern, Idx) == "$")
            {
                Repeat (Counter)
                {
                    List.Add(ImportPatternBuffer, "");
                }
                Idx += 1;
            }
            Else
            {
                Idx += 1;
            }
        }
    }
    If ((Variable.Length(ImportPatternBuffer[List.Length(ImportPatternBuffer)]) == 0) And (List.Length(ImportPatternBuffer) > 0))
    {
        List.DeleteItem(ImportPatternBuffer, List.Length(ImportPatternBuffer));
    }
    Idx = 1;
    Repeat (List.Length(ImportPatternBuffer))
    {
        Repeat Until (Not ((Variable.Length(ImportPatternBuffer[Idx]) < MaxLen)))
        {
            List.ReplaceItem(ImportPatternBuffer, Idx, Operator.Join(ImportPatternBuffer[Idx], 0));
        }
        Idx += 1;
    }
    CustomPatternWidth = MaxLen;
    CustomPatternHeight = List.Length(ImportPatternBuffer);
    CustomPattern = "";
    Idx = 1;
    Repeat (List.Length(ImportPatternBuffer))
    {
        CustomPattern = Operator.Join(CustomPattern, ImportPatternBuffer[Idx]);
        Idx += 1;
    }
}

Define Init (warp=false)
{
    Pen.Clear();
    List.DeleteAll(Colors);
    List.Add(Colors, 0);
    List.Add(Colors, 14);
    List.Add(Colors, 16);
    List.Add(Colors, 20);
    List.Add(Colors, 30);
    List.Add(Colors, 50);
    List.Add(Colors, 54);
    List.Add(Colors, 84);
    List.DeleteAll(ProfilerData);
    ColorCount = 0;
    MainColor = 0;
    IsSuspended = 0;
    CalcTime = 0;
    Clicked = 0;
    Dragging = 0;
    GridWidth = 890;
    GridHeight = 890;
    OffsetX = 240;
    OffsetY = 180;
    ClustersPerRow = (GridWidth / 2);
    Call InitGridData;
    Call ImportRlePattern("213bo$213b3o$216bo$215b2o$$$$$204b2o5b2o$204b2o5b2o$$208b2o$208b2o$$$$ 231b2o$219bobo9b2o$217bobobo$215b2o11b2o5b2o$217bo10b2o5b2o$384bo$244b 2o137bobo$244b2o124bo3b2o6b2ob2o$213bo147bo7b3ob2ob2o4bo2b2o$213b3o 144b3obo4bo7b2o2bobo$216bo27bo114bo6b4o4b3o2bobobo$215b2o26bobo113bobo 4bob4obo3b3o2bob2obo$242bo3bo114bobo4b2o2bo5bo8bo$242b5o112bo2bo4bo19b 2o$241b2o3b2o111bo$242b5o$243b3o$217b2o2b2o21bo$213b2ob3o$213b2o2b2o4b o$208b2o14b2o$208b2o13b2o$$$205b2o$205b2o39b2o$246bo$208b2o37b3o$208b 2o39bo$$$$212b2o$211bobo$213bo$$$$197b3o$196bo2bo$191b2o3bo3bo$190bobo 2b2obobo$190bo4b2ob2o$28b5o7bo148b2o5b3o$26b2o5b2o4bobo$26bo7bo4bo$26b 2o7bo3bo2bo156b2o$28b2o6bo3b3o155bo2bo$31bo164b5o$31bo4bo13b2o143b2ob 3o52bo$32b2obo14b2o143b3o56b2o$196bobo54b2o$14b3o180b2o$14bobo$13bo3bo $13bo3bo$13bo$13bo4b2o38b2o$13bo6bo37b2o$14bo5bo$14b2o9bo$16bo3bo3b3o$ 17bobo$15bo8b3o$14bobo8b2ob2o$14bo12bo38b2o$15bobo48b2o$16b2o$14b2o$2b 5o7bobo$2o5b2o16bo30b3o$o7bo8bo6bobo$2o7bo3bo11bo28bo5bo$2b2o6bo3bobo 37b7o$5bo18b2o30bo$5bo4bo12bobo30bo3bo$6b2obo45bo$23b3obobo26bo$27b3o 27bo4bo$27b2o28bo4bo220bo$56b2obobo106b2o8bo105b2o$55bobo110b2o6b3o 104b2o$44b2o10bo118bo$21bo3bo19bo2bo4bo106b2o13b2o$19bo2bob3o15bo2b3ob o2bobo106bo$22bobobo15bo2bo4b4o107bobo$10bobo7bo21bo2bo116b2o$4b2o4b3o bob2ob2o24bo6bo$4b2o6bo2b2o3bobo3bo17b2obo121b2o$20bobo29bo116b2o12bo 8b2o$50b2o131b3o6b2o$186bo$164bo20b2o13b2o$163bobo34bo$164bo33bobo$12b 2o184b2o$12b2o16b3o$172b2o17b2o$28bo5bo137b2o17b2o$28b7o$30bo$30bo3bo 162bo$29bo166bobo$20b2o8bo166bo$20b2o9bo4bo$31bo4bo$30b2obobo152b2o$ 29bobo156b2o$30bo$313bo$314b2o$28b2o283b2o$28b2o$$$$$$$$$$$$$$$$$$$$$$ $$284b2o$284b2o$$343bo$287b2o55b2o$287b2o54b2o$$284b2o$284b2o$276b2o$ 277bo$277bobo$278b2o15bo$294b3o$145bo148b3o$145bobo$148b2o6b2o135b4o$ 148b2o4bo3bo134b5o$148b2o3bo5bo134bob2o7b2o19b2o$136b2o7bobo4b2obo3bo 8b2o136bo19bo$135bobo7bo7bo5bo8b2o136bobo8b2o5bobo5bo$135bo18bo3bo148b 2o7bobo5b2o4b3o$125b2ob2o4b2o20b2o157b3o11bo$121b2o2b2obobo15bo167b3o 12b2o$120bo2bo5bo14b2o149b2o18b3o$120bo2bo21b2o148b2o19bobo$120b2obo 193b2o$121b5o166b2o17bobo$122bo3bo165b2o18b2o$124b2o186bo$124bo199b2ob ob2o$116b3o176b2o$105bo12bo10b2o164b2o27bo5bo$105b4o8bo11bo10b2o223b3o 5b3o3b3o$95b2o9b4o10b2o5bobo9b2o10bobo171b2ob2o34bo2bo6b2o2bo2bo$95b2o 9bo2bo9bobo5b2o12bo8bo2bo173bo39bo4bo3bo4bo$100bo5b4o8b3o15b2o11b2o10b 2o155bo13b2o6b2o25bo3b2o3bo4bo$100bo4b4o8b3o16bobo8b2o3bo8b2o153bobo 12bo2bo4bo2bo21bobo3b2obo2bobobo$105bo12b3o18bo9b2o5b2o146b3o4b2o4b2o 11b6o2b6o26bobo2b2o$119bobo14bo2bo10bo2bo4bo144b2obo4b2o18bo2bo4bo2bo 7bo23bo$120b2o17bo11bobo148bo3bo25b2o6b2o6b3o19bob2o$129b2o5bobo166b2o 40bo18bo4b3o$128bobo5b2o168bo40b2o16b3o3b3o$128bo177bo57b2obo$127b2o 235b3o$302bo2bo39bo19b2o$284b2o17bobobo37bo$284b2o20bo37bobo$343b2ob2o $280b2o5b2o7bo45bo5bo26b2o$280b2o5b2o6bo49bo$295b3o44b2o3b2o23bo3bo4b 3o$380bo2bo$376bo6bo$377bo5bo$291b2o50b2o6bo6bo15bo2bo2bobo$292bo49bo 7b2o6b2o14bo2bo$289b3o50b2o5b3o6b3o14b2o$289bo50b3o7b2o6b2o$351bo6bo$$ $$387b2o$387bobo$389bo$348bo40b2o$346bobo32bo$347b2o33b2o$381b2o$$$$ 387b2o$387bobo$389bo$389b2o$$$$$$$387b2o$387bobo$389bo22b2o$369bo19b2o 21b2o$370b2o$369b2o$409b2o$358b2o49b2o$358b2o15bo29b3o$373b3o29bo2bo3b 2o$365b3o4bo6b3o5b2o15bo3bo3b2o$356bo7bo2bo4b2o4bo2bo5bobo14b3o2bo10b 2o$356bobo8bo13bo7bo15b4o11bo$359b2o6bo13bo7b2o27bobo$350bobo6b2o3bobo 11bobo37b2o$351bo4bo2b2o41bobo$357b3o42b2o$358bo44bo$366bo$365b3o$364b 2obo19b2o$364b3o20bobo$365b2o22bo$345bobo41b2o$345b2o$346bo$401b2o$ 341b2o58b2o$340bobo38b3o$340bo39bo2bo20b2o$339b2o42bo20b2o$347b2o34bo$ 347b2o31bobo10b2o$393b2o6b2o$350b2o49b2o$350b2o6b2o$358b2o36b2o$396b2o $347b2o$347b2o6b2o36b2o$355b2o36b2o$$358b2o$358b2o$$$$$$360b2o32b3o$ 359bobo31bobo$361bo31bo2bo$393bo2bo13b2o$394bobo13bobo$393bo2bo15bo$ 341b2o51b2o16b2o$340bobo51bo9b2o$340bo6b3o54b2o$339b2o5bo2bo$349bo5bo 45b2o$345bo2bo6bo45b2o$333b2o11bobo$333b2o12bobo$349bo54b2o$404b2o$ 336b2o$336b2o9b2o$347b2o$333b2o4b3o$333b2o4bo2bo$325b2o11bo2b2o22b3o$ 326bo11b2o24bo2bo$326bobo38bo$327b2o13bo24bo$343b2o19bobo$342b2o$$$ 366bo$365b3o$364b2obo$364b3o$365b2o$$$344b2o$344b2o$$341b2o38b3o$341b 2o37bo2bo$383bo$352b2o29bo$344b2o6b2o26bobo$344b2o$$349b2o37b2o$349b2o 37b2o$$352b2o$352b2o37b2o$391b2o$$388b2o$388b2o$$$$351bo$350b4o$350b4o 31b3o$385bo$335b2o49bo$334bobo13b4o$334bo16b3o$333b2o17bo$341b2o62b2o$ 341b2o55b3o4bobo$397bo2bo6bo$344b2o51bo2bo6b2o$344b2o$397bo$348b2o47bo 3bo$341b2o5b2o48bobo$341b2o56bo$$351b2o$351b2o46b2o$399b2o$348b2o$348b 2o$340b2o14b2o2bo$341bo13b2o$341bobo12b2o$342b2o$356b2o2b2o$355bo$358b 4o$356bo2bo$366bo$365b3o$364b2obo$364b3o$365b2o$$$359b2o$359b2o$$356b 2o23b3o$356b2o22bo2bo$383bo$383bo$359b2o19bobo$359b2o202bo$561b3o$560b o$560b2o$395b2o$395b2o4b3o$348b2o42b2o6b5o$348b2o41b3o5bo3bobo$384bo7b 2o6bo3b2o113bo44b2o5b2o$382b2ob2o8b2o122b3o42b2o5b2o$351b2o42b2o125bo$ 351b2o28bo5bo133b2o44b2o$563bo3b2o$348b2o31b2obob2o68bo105bob2o$348b2o 7bobo96b3o103bo3bo$340b2o14bo4bo97bo102b2o2bo$341bo14bo4bo51b2o43b2o 50b2o5b2o25b2o16b2ob2o$341bobo12b2o55bobo94b2o5b2o25b2o13bo3b2o$342b2o 70b3o140b2o$356b2o2b2o53b2o97b2o24b2o5b2o9b2o$356b2o2b2o53b2o36bo60b2o 24b2o5b2o$356b3obo52bobo31b2o3bo3b3o$357bo25b2o29bo32b2o2bo6bo$358bo 24b2o67bo5bo$453b2ob2o79b2o$411b2o3b2o102b4obo11b2o$379bo31b2o3b2o101b o4b2o$376b4o4bo133b2obo3bo8b2o5b2o$375b4o5bo28b3o104bob3o9b2o5b2o$368b o6bo2bo9b2o23b3o58b2o$359b2o6b3o5b4o9b2o24bo59b2o$359b2o5bo3bo5b4o171b o9bo9bo9bo9bo$365bob3obo7bo11b2o78b2o5b2o71b3o7b3o7b3o7b3o7b3o$356b2o 8b5o20b2o78b2o5b2o74bo9bo9bo9bo9bo185bo$356b2o50bobo54bo87b2o8b2o8b2o 8b2o8b2o185b3o$408bo3bo50bobo319b2o$412bo51b2o316bo2b3o$359b2o32b2o3b 2o8bo4bo368bo5bo$359b2o37b2o12bo10b4o56b4o56b4o42bo13b4o176b2ob2o$408b o3bo9bo3bo55bo3bo55bo3bo41b2o12bo3bo175bo2b2o$408bobo15bo59bo59bo14b4o 23bobo15bo14b4o158b2o$422bo2bo56bo2bo56bo2bo14bo3bo37bo2bo14bo3bo$389b 2o3b2o168bo59bo157b2o$390b5o165bo2bo56bo2bo157b2obo$367b2o21b2ob2o206b 3o178bob2o$367b2o21b2ob2o205bo3bobobo10b4o160bobo$391b3o171b2o33bo7bo 10bo3b2o158bo2bo$565bo35b2o15bo4b2o158bob2o$563bobo49b3o2bo3bo157bo2bo $563b2o41bo8b3obob2o158bo$389bo180bo44b2o3b2o160bo2bo$388bobo178b2o46b ob2o161bo2b2o$388b2obo177bobo209b5o$376b2o10b2ob2o388b3o$376b2o10b2obo 42b2o58b2o5b4o49b2o5b4o49b2o5b4o155bo2bo$388bobo41b2ob2o55b2ob2o3bo3bo 47b2ob2o3bo3bo47b2ob2o3bo3bo157b2o$389bo42b4o56b4o8bo47b4o8bo47b4o8bo$ 433b2o58b2o5bo2bo49b2o5bo2bo49b2o5bo2bo160bo$781bo$780bo3bo$401b2o2b2o 31bobo82b3o255b2ob2o$383b2o5b2o8b3o18b2o5b2o8bobo3bo80bo33b3o38bo183bo $383b2o5b2o15bo13b2o5b2o7b2o85bo6b2o5b2o18b4o4b2o31b3o177b2ob2o$398bob o37bo92b2o5b2o17b2o3bo3b2o30b5o$387b2o10b4obo2bo17b2o13bobobo113bo$ 387b2o11b3ob3o18b2o10bo2bob3o89b2o23bo2b2o$439bo3bo70b2o18b2o$$461b2o 2b2o8b2o5b2o$410b2o36b2o10b3o2b2o8b2o5b2o76bo$410b2o36b2o11b2o2b3o71b 2o18bo38b5o$462bo2b2o11b2o59b2o19bo38b3o15b2o$407b2o5b2o29b2o5b2o24b2o 31b2o2b3o82bo16bo$407b2o5b2o29b2o5b2o53b2o4b2o2bo17b2o5b2o45b3o14bobo 6bobo$507b2o3bo4bo17b2o5b2o7bo37bo16bo2bo5b2o$513bo2bo32b2o39bo18b2o$ 455b2o24b2o5b2o24bo35b2o55bo3b2o40bo$455b2o24b2o5b2o10bo101bo6b2o41b2o $403b2o36b2o56b2o99bobo3bo2bo9bo32bobo$403bo37bo9b2o5b2o25b2o12bobo2b 2o12b2o26b2o51b3o4bobo9b3o$404b3o35b3o6b2o5b2o25b2o17bobo12bo27bo51bo 17bobobo$406bo37bo61bo9b3o25b3o52bo17bobobo$503bob2o9bo27bo73b3o$503b 2o114bo$508b2o$462b2o44b2o$463bo155bo$460b3o42b2o5b2o104b3o$460bo44b2o 5b2o103bobobo$617bobobo14b2o$618b3o15bo$619bo5bobo6bobo$623bo3bo6b2o$ 501b2o120bo$501bo120bo4bo11bo$502b3o118bo13b3o$504bo118bo3bo8bo$625bob o8b2o$$$$$$619b3o9b2o3b2o$619bo11bobobobo$620bo11b5o$633b3o47bo$634bo 47b2o$629b2o51bobo$618b2o8b2o$618b2o10bo$$$636b2o$611bo24bo$610bo3b6o 17b3o$611b2o3bo2bo19bo$618b2o$611bo6bo$612bo4bo$$$$$606bo32b2o$606bobo 16b2o5b2o5b3ob2o$606b2o17b2o5b2o6b2ob3o$639b3ob2o$629b2o9b2o$601b2o26b 2o$600bobo$600bo$599b2o$607b2o43b2o$607b2o43b2o$$610b2o37b2o5b2o55bo$ 610b2o37b2o5b2o54b2o$712bobo$$607b2o$607b2o$645b2o$645bo$646b3o$648bo$ $$$$$$$$$$$$$$$$$$$$743bo$742b2o$742bobo$$$$765b2o$766bo$766bobo10bo$ 767b2o9b4o$777b2obobo3b2o$776b3obo2bo2b2o$777b2obobo$778b4o$779bo$$$$$ 789b2o$789b2o$$$792b2o$792b2o$$789b2o$789b2o$$$773bo$772b2o$772bobo$ 776bo$776bo14b2o$$791b2o$774b3o$774b3o12bobo$775bo6b2o6bo15b2o$782bobo 5bo15bobo$774b2o8bo23bo$759b3o12b2o8b2o22b2o$761bo38b2o$760bo39b2o$$ 765b2o5b2o23b2o$765b2o5b2o23b2o$$768b2o$768b2o30b2o$800b2o$$$701bo44bo $699b3o42b2obo4b2o$698bo45b2obo3bo2b2o$691bo6b2o41b2ob3o3b3o2bo$690bob o48bobobo4bo4bo$691bo50b4o4b5o$743b2o6b2o$$703b2o$695b2o6b2o47b2o$695b 2o56bo$750b3o$686b2o62bo$686b2o$$701b2o$701bobo$703bo$703b2o$$$$$712b 2o$712bo$710bobo$710b2o$$695b2o$695b2o$$704b2o$637b2o65b2o6b2o$637b2o 73b2o$$$700bo$699bobo$700bo6b2o$620b2o85bo$620b2o86b3o$710bo$637b3o$ 618bo17bo3bo$619bo15bo5bo$619bo15bo5bo$638bo$636bo3bo$617b2o3b2o13b3o$ 620bo17bo$617bo5bo$618b2ob2o$619bobo17b3o$620bo18b3o$620bo17bo3bo$632b obo$632b2o3b2o3b2o$633bo$$$622bobo$623b2o$617b3o3bo$616bo3bo$615bo5bo 15b2o$615b2obob2o16bo$635b3o$635bo$$$$615b2o8bo8bo$616bo6b3o7bobo$613b 3o6bo11b2o$613bo8b2o$629bo4b2o$628bobo3b2o$627b2obo$630b4o$629b2o3bo$ 617b2o3b2o6b2o2bo$617bobobobo7b3o$618b5o$619b3o3b2o$620bo3bobo$626bo$$ $$$$$621b3o$620b2ob2o$620b2ob2o$620b5o$619b2o3b2o$$$$$620b2o$$$$622b2o $622b2o$$$$$$$$$$$$$$$$$$$$$$$$$$$$727b2o$727b2o$$$$714b2o$713bo$718bo b2o$713bo6bo14b2o$720bo2bo11b2o$712b4o4bo2bo$711bobo2bob3o2bo$712bo4bo 2bo$709bo10b2o$708bobo$704bobob2o$703bo4bo34b2o$703bo4bo34b2o$709bo$ 710bo$705bo3bo$709bo$705b7o$705bo5bo$$707b3o36b2o$746bo2bo$746bo3bo$ 747b3o$$$688b2o54bobo$687bo55bo3bo$692bob2o52b2o$687bo6bo48bo5bo$694bo 2bo45bo6bo$686b4o4bo2bo46b2o4bo$685bobo2bob3o2bo52bo$681b2o3bo4bo2bo 20b2o12bo16bo3bo$681b2o11b2o18b2o13bo16bo3bo$714b3o11bo18bobo$705bo2b 2o12bo6b2obo14b3o$709b2o5bob2obobo5b2ob2o$708b2o6bo2bo2bo7bobo$716bobo $704b2o2b2o$689b2o19bo$689b2o13b4o24bob2o$706bo2bo21bo4bo$736bo$706bo 15bo3b2o3bo6b2o$705b2o13bo3bobo2bo2bo7b2o$705bo19bobo2bo2bo7bo$706bo 13bo3b2o2b2o3b2o5b2o$697b2o22bo13b5o$697b2o6b3o$706bo$706b2o10bobo$ 717bo3bo$722b2o$717bo5bo$717bo6bo$705b2o11b2o4bo$705b2o17bo$720bo3bo$ 720bo3bo$721bobo$721b3o!");
    Call InsertPattern(CustomPattern)(((GridWidth * 20) + 50))(CustomPatternWidth)(CustomPatternHeight);
}

Define InitGridData (warp=true)
{
    List.DeleteAll(ActiveClusterIdx);
    List.DeleteAll(ActiveClusterIdxLookup);
    List.DeleteAll(InvalidatedIdx1);
    List.DeleteAll(InvalidatedIdx2);
    List.DeleteAll(Grid);
    List.DeleteAll(GridColor);
    List.DeleteAll(CellIdxToClusterIdx);
    List.DeleteAll(MarginType);
    List.DeleteAll(IsInvalidated1);
    List.DeleteAll(ClusterIdxToX);
    List.DeleteAll(ClusterIdxToY);
    List.DeleteAll(ImportPatternBuffer);
    If (1 == 0)
    {
        Repeat (GridHeight)
        {
            Repeat (GridWidth)
            {
                List.Add(CellIdxToClusterIdx, 0);
            }
        }
    }
    Idx = 1;
    Counter = 1;
    Repeat ((GridHeight / 2))
    {
        Repeat ((GridWidth / 2))
        {
            List.Add(Grid, 0);
            List.Add(ActiveClusterIdxLookup, "");
            List.Add(GridColor, 0);
            List.Add(IsInvalidated1, 0);
            List.Add(ClusterIdxToX, (((Counter - 1) * 2) % GridWidth));
            List.Add(ClusterIdxToY, (floor((((Counter - 1) * 2) / GridWidth)) * 2));
            If (1 == 0)
            {
                List.ReplaceItem(CellIdxToClusterIdx, Idx, Counter);
                List.ReplaceItem(CellIdxToClusterIdx, (Idx + 1), Counter);
                List.ReplaceItem(CellIdxToClusterIdx, (Idx + GridWidth), Counter);
                List.ReplaceItem(CellIdxToClusterIdx, (Idx + (GridWidth + 1)), Counter);
            }
            If (((((Counter - 1) * 2) + 1) % GridWidth) == 1)
            {
                List.Add(MarginType, 1);
            }
            Else
            {
                If (((((Counter - 1) * 2) + 1) % GridWidth) == 0)
                {
                    List.Add(MarginType, 2);
                }
                Else
                {
                    List.Add(MarginType, 0);
                }
            }
            Idx += 2;
            Counter += 1;
        }
        Idx += GridWidth;
    }
    List.DeleteAll(CellDelta1);
    List.DeleteAll(CellDelta2);
    List.DeleteAll(CellDelta3);
    List.DeleteAll(CellDelta4);
    Idx = 0;
    Repeat (16)
    {
        Idx2 = 0;
        Repeat (16)
        {
            List.Add(CellDelta1, abs((floor((Idx / 8)) - floor((Idx2 / 8)))));
            List.Add(CellDelta2, abs(((floor((Idx / 4)) % 2) - (floor((Idx2 / 4)) % 2))));
            List.Add(CellDelta3, abs(((floor((Idx / 2)) % 2) - (floor((Idx2 / 2)) % 2))));
            List.Add(CellDelta4, abs(((Idx % 2) - (Idx2 % 2))));
            Idx2 += 1;
        }
        Idx += 1;
    }
}

Define InitLoopkups (warp=true)
{
    Call CalcLookup;
    Call CalcLookupBitOps;
}

Define InsertPattern(string Pattern)(string Position)(string InsertWidth)(string InsertHeight) (warp=true)
{
    InsertIdx = 1;
    InsertCellIdx = Position;
    InsertCellVal = Colors[Operator.Random(1 / List.Length(Colors))];
    ColorCount += 1;
    If (ColorCount == 1)
    {
        MainColor = InsertCellVal;
    }
    Repeat (InsertHeight)
    {
        Repeat (InsertWidth)
        {
            If (Operator.LetterOf(Pattern, InsertIdx) == 1)
            {
                Call SetCellValueOld(InsertCellIdx)(1);
                List.ReplaceItem(GridColor, (((floor(((InsertCellIdx - 1) / (GridWidth * 2))) * (GridWidth / 2)) + floor((((InsertCellIdx - 1) % GridWidth) / 2))) + 1), InsertCellVal);
            }
            InsertIdx += 1;
            InsertCellIdx += 1;
        }
        InsertCellIdx += (GridWidth - InsertWidth);
    }
}

Define InvalidateCellOld(string CellIdx) (warp=true)
{
    If ((CellIdx > 0) And (CellIdx < ((GridWidth * GridHeight) + 1)))
    {
        Call InvalidateClusterOld((((floor(((CellIdx - 1) / (GridWidth * 2))) * (GridWidth / 2)) + floor((((CellIdx - 1) % GridWidth) / 2))) + 1));
    }
}

Define InvalidateClusterOld(string ClusterIdx) (warp=false)
{
    If (IsInvalidated1[ClusterIdx] == 0)
    {
        List.Add(InvalidatedIdx1, ClusterIdx);
        List.ReplaceItem(IsInvalidated1, ClusterIdx, 1);
    }
}

Define OnCellChangedOld(string CellIdx)(string Value) (warp=true)
{
    Call InvalidateCellOld(((CellIdx - GridWidth) - 1));
    Call InvalidateCellOld((CellIdx - GridWidth));
    Call InvalidateCellOld(((CellIdx - GridWidth) + 1));
    Call InvalidateCellOld((CellIdx - 1));
    Call InvalidateCellOld((CellIdx + 1));
    Call InvalidateCellOld(((CellIdx + GridWidth) - 1));
    Call InvalidateCellOld((CellIdx + GridWidth));
    Call InvalidateCellOld(((CellIdx + GridWidth) + 1));
    ClusterIdx2 = (((floor(((CellIdx - 1) / (GridWidth * 2))) * (GridWidth / 2)) + floor((((CellIdx - 1) % GridWidth) / 2))) + 1);
    If (Value > 0)
    {
        Call AddToActiveClusters(ClusterIdx2);
    }
    Else
    {
        Call RemoveFromActiveClusters(ClusterIdx2);
    }
}

Define Paint (warp=true)
{
    Pen.Clear();
    Pen.SetPenColorToColor(#272727);
    Pen.SetPenSizeTo(1);
    Pen.Clear();
    Motion.GoToXY(((-240 + (0 - OffsetX)) * ZoomLevel), ((180 - (0 - OffsetY)) * ZoomLevel));
    Pen.Down();
    Motion.SetX(((-240 + (GridWidth - OffsetX)) * ZoomLevel));
    Motion.SetY(((180 - (GridHeight - OffsetY)) * ZoomLevel));
    Motion.SetX(((-240 + (0 - OffsetX)) * ZoomLevel));
    Motion.SetY(((180 - (0 - OffsetY)) * ZoomLevel));
    Pen.Clear();
    Pen.SetPenSizeTo(ZoomLevel);
    Pen.SetPenTo(brightness, 100);
    Pen.SetPenTo(saturation, 100);
    Pen.SetPenTo(color, MainColor);
    Idx = 1;
    Repeat (List.Length(ActiveClusterIdx))
    {
        ClusterIdx = ActiveClusterIdx[Idx];
        ClusterY = ((180 - (ClusterIdxToY[ClusterIdx] - OffsetY)) * ZoomLevel);
        If (abs(ClusterY) < 180)
        {
            ClusterX = ((-240 + (ClusterIdxToX[ClusterIdx] - OffsetX)) * ZoomLevel);
            If (abs(ClusterX) < 240)
            {
                ClusterValue = Grid[ClusterIdx];
                If (ColorCount > 1)
                {
                    Pen.SetPenTo(color, GridColor[ClusterIdx]);
                }
                Pen.Clear();
                Motion.GoToXY(ClusterX, ClusterY);
                If (ClusterValue > 7)
                {
                    Pen.Down();
                    Pen.Clear();
                }
                If ((ClusterValue % 8) > 3)
                {
                    Motion.ChangeXBy(ZoomLevel);
                    Pen.Down();
                    Pen.Clear();
                    Motion.ChangeXBy((0 - ZoomLevel));
                }
                If ((ClusterValue % 4) > 1)
                {
                    Motion.ChangeYBy((0 - ZoomLevel));
                    Pen.Down();
                    Pen.Clear();
                    Motion.ChangeYBy(ZoomLevel);
                }
                If ((ClusterValue % 2) == 1)
                {
                    Motion.ChangeXBy(ZoomLevel);
                    Motion.ChangeYBy((0 - ZoomLevel));
                    Pen.Down();
                }
            }
        }
        Idx += 1;
    }
}

Define RemoveFromActiveClusters(string ClusterIdx) (warp=false)
{
    If (Not ((ActiveClusterIdxLookup[ClusterIdx] == "")))
    {
        If (List.Length(ActiveClusterIdx) > 1)
        {
            List.ReplaceItem(ActiveClusterIdx, ActiveClusterIdxLookup[ClusterIdx], ActiveClusterIdx[List.Length(ActiveClusterIdx)]);
            List.ReplaceItem(ActiveClusterIdxLookup, ActiveClusterIdx[List.Length(ActiveClusterIdx)], ActiveClusterIdxLookup[ClusterIdx]);
            List.ReplaceItem(ActiveClusterIdxLookup, ClusterIdx, "");
            List.DeleteItem(ActiveClusterIdx, List.Length(ActiveClusterIdx));
        }
        Else
        {
            List.ReplaceItem(ActiveClusterIdxLookup, ClusterIdx, "");
            List.DeleteItem(ActiveClusterIdx, 1);
        }
    }
}

Define RunMainLoop (warp=false)
{
    Forever
    {
        Call HandleInput;
        If (IsSuspended == 0)
        {
            Call CalcNext;
            Call Paint;
            Call CalcFPS;
            If (Speed < 100)
            {
                Control.Wait(((100 - Speed) / 100));
            }
        }
        Else
        {
            Call Paint;
            Control.Wait(0.1);
        }
        If (Clicked == 0)
        {
            Call Scroll;
        }
    }
}

Define Scroll (warp=true)
{
    If (((Sensing.MouseX() > -240) And (Sensing.MouseX() < 240)) And ((Sensing.MouseY() > -180) And (Sensing.MouseY() < 180)))
    {
        If (Sensing.MouseX() < -50)
        {
            OffsetX += floor((((Sensing.MouseX() + 50) / 10) / ZoomLevel));
        }
        Else
        {
            If (Sensing.MouseX() > 50)
            {
                OffsetX += ceiling((((Sensing.MouseX() - 50) / 10) / ZoomLevel));
            }
        }
        If (Sensing.MouseY() < -50)
        {
            OffsetY += ceiling((((-50 - Sensing.MouseY()) / 10) / ZoomLevel));
        }
        Else
        {
            If (Sensing.MouseY() > 50)
            {
                OffsetY += floor((((50 - Sensing.MouseY()) / 10) / ZoomLevel));
            }
        }
    }
    If (OffsetX < -240)
    {
        OffsetX = -240;
    }
    Else
    {
        If (OffsetX > (GridWidth - 240))
        {
            OffsetX = (GridWidth - 240);
        }
    }
    If (OffsetY < -180)
    {
        OffsetY = -180;
    }
    Else
    {
        If (OffsetY > (GridHeight - 180))
        {
            OffsetY = (GridHeight - 180);
        }
    }
    OffsetX = floor(OffsetX);
    OffsetY = floor(OffsetY);
}

Define SetCellValueOld(string CellIdx)(string Value) (warp=true)
{
    ClusterIdx = (((floor(((CellIdx - 1) / (GridWidth * 2))) * (GridWidth / 2)) + floor((((CellIdx - 1) % GridWidth) / 2))) + 1);
    ClusterValue = Grid[ClusterIdx];
    If ((CellIdx % 2) == 1)
    {
        If (((CellIdx - 1) % (GridWidth * 2)) < GridWidth)
        {
            OldValue = (floor((ClusterValue / 8)) % 2);
            If (Not ((Value == OldValue)))
            {
                ClusterValue += ((Value - OldValue) * 8);
                List.ReplaceItem(Grid, ClusterIdx, ClusterValue);
                Call OnCellChangedOld(CellIdx)(Value);
            }
        }
        Else
        {
            OldValue = (floor((ClusterValue / 2)) % 2);
            If (Not ((Value == OldValue)))
            {
                ClusterValue += ((Value - OldValue) * 2);
                List.ReplaceItem(Grid, ClusterIdx, ClusterValue);
                Call OnCellChangedOld(CellIdx)(Value);
            }
        }
    }
    Else
    {
        If (((CellIdx - 1) % (GridWidth * 2)) < GridWidth)
        {
            OldValue = (floor((ClusterValue / 4)) % 2);
            If (Not ((Value == OldValue)))
            {
                ClusterValue += ((Value - OldValue) * 4);
                List.ReplaceItem(Grid, ClusterIdx, ClusterValue);
                Call OnCellChangedOld(CellIdx)(Value);
            }
        }
        Else
        {
            OldValue = (floor((ClusterValue / 1)) % 2);
            If (Not ((Value == OldValue)))
            {
                ClusterValue += ((Value - OldValue) * 1);
                List.ReplaceItem(Grid, ClusterIdx, ClusterValue);
                Call OnCellChangedOld(CellIdx)(Value);
            }
        }
    }
}

Define _ClearAll (warp=true)
{
    List.DeleteAll(ActiveClusterIdx);
    List.DeleteAll(ActiveClusterIdxLookup);
    List.DeleteAll(InvalidatedIdx1);
    List.DeleteAll(InvalidatedIdx2);
    List.DeleteAll(Grid);
    List.DeleteAll(GridColor);
    List.DeleteAll(GenerationLookup);
    List.DeleteAll(CalcBottom);
    List.DeleteAll(CalcCenter);
    List.DeleteAll(CalcLeft);
    List.DeleteAll(CalcLeftBottom);
    List.DeleteAll(CalcLeftTop);
    List.DeleteAll(CalcRight);
    List.DeleteAll(CalcRightBottom);
    List.DeleteAll(CalcRightTop);
    List.DeleteAll(CalcTop);
    List.DeleteAll(MarginType);
    List.DeleteAll(IsInvalidated1);
    List.DeleteAll(ClusterIdxToX);
    List.DeleteAll(ClusterIdxToY);
    List.DeleteAll(ImportPatternBuffer);
}

Define _OnMethodEnter(string Id) (warp=true)
{
    If (IsProfilerEnabled == 1)
    {
        Repeat Until (Not ((List.Length(ProfilerData) < Id)))
        {
            List.Add(ProfilerData, 0);
        }
        List.ReplaceItem(ProfilerData, Id, (ProfilerData[Id] - Sensing.Timer()));
    }
}

Define _OnMethodExit(string Id) (warp=true)
{
    If (IsProfilerEnabled == 1)
    {
        Repeat Until (Not ((List.Length(ProfilerData) < Id)))
        {
            List.Add(ProfilerData, 0);
        }
        List.ReplaceItem(ProfilerData, Id, (ProfilerData[Id] + Sensing.Timer()));
    }
}
