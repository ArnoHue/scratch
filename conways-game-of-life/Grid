
define _OnMethodEnter %s
if <(IsProfilerEnabled) = (1)> then 
repeat until <not <(length of [_ProfilerData v]) < (argument_reporter_string_number)>> 
add [0] to [_ProfilerData v]
end
replace item (argument_reporter_string_number) of [_ProfilerData v] with ((item (argument_reporter_string_number) of [_ProfilerData v]) - (timer))
end

define _OnMethodExit %s
if <(IsProfilerEnabled) = (1)> then 
repeat until <not <(length of [_ProfilerData v]) < (argument_reporter_string_number)>> 
add [0] to [_ProfilerData v]
end
replace item (argument_reporter_string_number) of [_ProfilerData v] with ((item (argument_reporter_string_number) of [_ProfilerData v]) + (timer))
end

when [p v] key pressed
if <(IsProfilerEnabled) = (0)> then 
set [IsProfilerEnabled v] to [1]
delete all of [_ProfilerData v]
show list [_ProfilerData v]
 else 
set [IsProfilerEnabled v] to [0]
delete all of [_ProfilerData v]
hide list [_ProfilerData v]
end

when gf clicked
set [GliderGun v] to [000000000000000000000000100000000000000000000000000000000010100000000000000000000000110000001100000000000000000000000001000100001100000000000011110000000010000010001100000000000011110000000010001011000010100000000000000000000010000010000000100000000000000000000001000100000000000000000000000000000000110000000000000000000000]
set [Pulsar v] to [0011100011100000000000000010000101000011000010100001100001010000100111000111000000000000000001110001110010000101000011000010100001100001010000100000000000000011100011100]
set [Command v] to []
set [GridType v] to [2]
set [CustomPattern v] to []
set [CustomPatternWidth v] to [0]
set [CustomPatternHeight v] to [0]
InitLoopkups
Init
RunMainLoop

define InsertPattern %s %s %s %s
set [InsertIdx v] to [1]
set [InsertCellIdx v] to (argument_reporter_string_number)
set [InsertCellVal v] to (pick random (1) to (100))
repeat (argument_reporter_string_number) 
repeat (argument_reporter_string_number) 
if <(letter (InsertIdx) of (argument_reporter_string_number)) = (1)> then 
SetCellValue %s %s
replace item (item (InsertCellIdx) of [CellIdxToClusterIdx v]) of [GridColor v] with [InsertCellVal]
 else 
if <(1) = (0)> then 
SetCellValue %s %s
end
end
change [InsertIdx v] by (1)
change [InsertCellIdx v] by (1)
end
change [InsertCellIdx v] by ((GridWidth) - (argument_reporter_string_number))
end

define CalcNextGeneration
delete all of [ClusterVal v]
delete all of [InvalidatedIdx2 v]
set [Idx v] to [1]
repeat (length of [InvalidatedIdx1 v]) 
set [ClusterIdx v] to (item (Idx) of [InvalidatedIdx1 v])
if <<(ClusterIdx) > (0)> and <not <(ClusterIdx) > (ClusterCount)>>> then 
set [ClusterValue v] to (item (((item ((item (ClusterIdx) of [Grid v]) + (1)) of [CalcCenter v]) + ((((item ((item (((ClusterIdx) - (ClustersPerRow)) - (1)) of [Grid v]) + (1)) of [CalcLeftTop v]) + (item ((item ((ClusterIdx) - (ClustersPerRow)) of [Grid v]) + (1)) of [CalcTop v])) + ((item ((item (((ClusterIdx) - (ClustersPerRow)) + (1)) of [Grid v]) + (1)) of [CalcRightTop v]) + (item ((item ((ClusterIdx) - (1)) of [Grid v]) + (1)) of [CalcLeft v]))) + (((item ((item ((ClusterIdx) + (1)) of [Grid v]) + (1)) of [CalcRight v]) + (item ((item (((ClusterIdx) + (ClustersPerRow)) - (1)) of [Grid v]) + (1)) of [CalcLeftBottom v])) + ((item ((item ((ClusterIdx) + (ClustersPerRow)) of [Grid v]) + (1)) of [CalcBottom v]) + (item ((item (((ClusterIdx) + (ClustersPerRow)) + (1)) of [Grid v]) + (1)) of [CalcRightBottom v]))))) + (1)) of [Lookup0 v])
if <(item (ClusterIdx) of [MarginType v]) > (0)> then 
if <(item (ClusterIdx) of [MarginType v]) = (1)> then 
if <(([floor v] of ((ClusterValue) / (8)) ::operators) mod (2)) = (1)> then 
change [ClusterValue v] by (-8)
end
if <(([floor v] of ((ClusterValue) / (2)) ::operators) mod (2)) = (1)> then 
change [ClusterValue v] by (-2)
end
 else 
if <(item (ClusterIdx) of [MarginType v]) = (2)> then 
if <(([floor v] of ((ClusterValue) / (4)) ::operators) mod (2)) = (1)> then 
change [ClusterValue v] by (-4)
end
if <(([floor v] of ((ClusterValue) / (1)) ::operators) mod (2)) = (1)> then 
change [ClusterValue v] by (-1)
end
end
end
end
if <not <(item (ClusterIdx) of [Grid v]) = (ClusterValue)>> then 
add [ClusterValue] to [ClusterVal v]
add [ClusterIdx] to [InvalidatedIdx2 v]
end
if <<(item (ClusterIdx) of [Grid v]) = (0)> and <(item (ClusterIdx) of [GridColor v]) > (0)>> then 
replace item (ClusterIdx) of [GridColor v] with [0]
end
replace item (ClusterIdx) of [IsInvalidated1 v] with [0]
end
change [Idx v] by (1)
end
delete all of [InvalidatedIdx1 v]
set [Idx v] to [1]
repeat (length of [InvalidatedIdx2 v]) 
set [ClusterIdx v] to (item (Idx) of [InvalidatedIdx2 v])
set [ClusterValue v] to (item (Idx) of [ClusterVal v])
if <<(ClusterValue) > (0)> and <(item (ClusterIdx) of [GridColor v]) = (0)>> then 
MergeColor %s
end
SetClusterValue %s %s %s
change [Idx v] by (1)
end

define Paint
pen_clear
if <(OffsetX) > (OffsetY)> then 
pen_setPenSizeTo
 else 
pen_setPenSizeTo
end
set [Idx v] to [1]
repeat (length of [ActiveClusterIdx v]) 
set [ClusterIdx v] to (item (Idx) of [ActiveClusterIdx v])
set [ClusterValue v] to (item (ClusterIdx) of [Grid v])
set [ClusterX v] to (item (ClusterIdx) of [ClusterIdxToX v])
set [ClusterY v] to (item (ClusterIdx) of [ClusterIdxToY v])
pen_setPenColorParamTo
if <(ClusterValue) > (7)> then 
go to x: (ClusterX) y: (ClusterY)
pen_penDown
pen_penUp
end
if <((ClusterValue) mod (8)) > (3)> then 
go to x: ((ClusterX) + (OffsetX)) y: (ClusterY)
pen_penDown
pen_penUp
end
if <((ClusterValue) mod (4)) > (1)> then 
go to x: (ClusterX) y: ((ClusterY) - (OffsetY))
pen_penDown
pen_penUp
end
if <((ClusterValue) mod (2)) = (1)> then 
go to x: ((ClusterX) + (OffsetX)) y: ((ClusterY) - (OffsetY))
pen_penDown
pen_penUp
end
change [Idx v] by (1)
end

when i receive [clicked v]
if <(Clicked) = (0)> then 
set [ClickIdx v] to ((GridWidth) * (round (((GridHeight) * ((180) - (mouse y))) / (360))))
set [ClickIdx v] to ((ClickIdx) + (round (((GridWidth) * ((240) + (mouse x))) / (480))))
set [Clicked v] to [1]
end

define InitGridData
delete all of [ActiveClusterIdx v]
delete all of [InvalidatedIdx1 v]
delete all of [InvalidatedIdx2 v]
delete all of [Grid v]
delete all of [GridColor v]
delete all of [CellIdxToClusterIdx v]
delete all of [MarginType v]
delete all of [IsInvalidated1 v]
delete all of [ClusterIdxToX v]
delete all of [ClusterIdxToY v]
delete all of [ImportPatternBuffer v]
repeat (GridHeight) 
repeat (GridWidth) 
add [0] to [CellIdxToClusterIdx v]
end
end
set [Idx v] to [1]
set [Counter v] to [1]
repeat ((GridHeight) / (2)) 
repeat ((GridWidth) / (2)) 
add [0] to [Grid v]
add [0] to [GridColor v]
add [0] to [IsInvalidated1 v]
add ((-240) + (((((Counter) * (2)) - (2)) mod (GridWidth)) * (OffsetX))) to [ClusterIdxToX v]
add ((180) - (([floor v] of ((((Counter) * (2)) - (2)) / (GridWidth)) ::operators) * ((OffsetY) * (2)))) to [ClusterIdxToY v]
replace item (Idx) of [CellIdxToClusterIdx v] with [Counter]
replace item ((Idx) + (1)) of [CellIdxToClusterIdx v] with [Counter]
replace item ((Idx) + (GridWidth)) of [CellIdxToClusterIdx v] with [Counter]
replace item ((Idx) + ((GridWidth) + (1))) of [CellIdxToClusterIdx v] with [Counter]
if <(((((Counter) - (1)) * (2)) + (1)) mod (GridWidth)) = (1)> then 
add [1] to [MarginType v]
 else 
if <(((((Counter) - (1)) * (2)) + (1)) mod (GridWidth)) = (0)> then 
add [2] to [MarginType v]
 else 
add [0] to [MarginType v]
end
end
change [Idx v] by (2)
change [Counter v] by (1)
end
change [Idx v] by (GridWidth)
end
delete all of [CellDelta1 v]
delete all of [CellDelta2 v]
delete all of [CellDelta3 v]
delete all of [CellDelta4 v]
set [Idx v] to [0]
repeat (16) 
set [Idx2 v] to [0]
repeat (16) 
add ([abs v] of (([floor v] of ((Idx) / (8)) ::operators) - ([floor v] of ((Idx2) / (8)) ::operators)) ::operators) to [CellDelta1 v]
add ([abs v] of ((([floor v] of ((Idx) / (4)) ::operators) mod (2)) - (([floor v] of ((Idx2) / (4)) ::operators) mod (2))) ::operators) to [CellDelta2 v]
add ([abs v] of ((([floor v] of ((Idx) / (2)) ::operators) mod (2)) - (([floor v] of ((Idx2) / (2)) ::operators) mod (2))) ::operators) to [CellDelta3 v]
add ([abs v] of (((Idx) mod (2)) - ((Idx2) mod (2))) ::operators) to [CellDelta4 v]
change [Idx2 v] by (1)
end
change [Idx v] by (1)
end

define OnCellChanged %s %s
InvalidateCell %s
InvalidateCell %s
InvalidateCell %s
InvalidateCell %s
InvalidateCell %s
InvalidateCell %s
InvalidateCell %s
InvalidateCell %s
if <(argument_reporter_string_number) > (0)> then 
if <not <[ActiveClusterIdx v] contains (item (argument_reporter_string_number) of [CellIdxToClusterIdx v]) ? ::lists>> then 
add (item (argument_reporter_string_number) of [CellIdxToClusterIdx v]) to [ActiveClusterIdx v]
end
 else 
delete (item # of (item (argument_reporter_string_number) of [CellIdxToClusterIdx v]) in [ActiveClusterIdx v]) of [ActiveClusterIdx v]
end

define SetCellValue %s %s
set [ClusterIdx v] to (item (argument_reporter_string_number) of [CellIdxToClusterIdx v])
set [ClusterValue v] to (item (ClusterIdx) of [Grid v])
if <((argument_reporter_string_number) mod (2)) = (1)> then 
if <(((argument_reporter_string_number) - (1)) mod ((GridWidth) * (2))) < (GridWidth)> then 
set [OldValue v] to (([floor v] of ((ClusterValue) / (8)) ::operators) mod (2))
if <not <(argument_reporter_string_number) = (OldValue)>> then 
change [ClusterValue v] by (((argument_reporter_string_number) - (OldValue)) * (8))
replace item (ClusterIdx) of [Grid v] with [ClusterValue]
OnCellChanged %s %s
end
 else 
set [OldValue v] to (([floor v] of ((ClusterValue) / (2)) ::operators) mod (2))
if <not <(argument_reporter_string_number) = (OldValue)>> then 
change [ClusterValue v] by (((argument_reporter_string_number) - (OldValue)) * (2))
replace item (ClusterIdx) of [Grid v] with [ClusterValue]
OnCellChanged %s %s
end
end
 else 
if <(((argument_reporter_string_number) - (1)) mod ((GridWidth) * (2))) < (GridWidth)> then 
set [OldValue v] to (([floor v] of ((ClusterValue) / (4)) ::operators) mod (2))
if <not <(argument_reporter_string_number) = (OldValue)>> then 
change [ClusterValue v] by (((argument_reporter_string_number) - (OldValue)) * (4))
replace item (ClusterIdx) of [Grid v] with [ClusterValue]
OnCellChanged %s %s
end
 else 
set [OldValue v] to (([floor v] of ((ClusterValue) / (1)) ::operators) mod (2))
if <not <(argument_reporter_string_number) = (OldValue)>> then 
change [ClusterValue v] by (((argument_reporter_string_number) - (OldValue)) * (1))
replace item (ClusterIdx) of [Grid v] with [ClusterValue]
OnCellChanged %s %s
end
end
end

define _ClearAll
delete all of [ActiveClusterIdx v]
delete all of [InvalidatedIdx1 v]
delete all of [InvalidatedIdx2 v]
delete all of [Grid v]
delete all of [GridColor v]
delete all of [Lookup0 v]
delete all of [Lookup1 v]
delete all of [CalcBottom v]
delete all of [CalcCenter v]
delete all of [CalcLeft v]
delete all of [CalcLeftBottom v]
delete all of [CalcLeftTop v]
delete all of [CalcRight v]
delete all of [CalcRightBottom v]
delete all of [CalcRightTop v]
delete all of [CalcTop v]
delete all of [MarginType v]
delete all of [IsInvalidated1 v]
delete all of [ClusterIdxToX v]
delete all of [ClusterIdxToY v]
delete all of [ImportPatternBuffer v]

define InvalidateCell %s
if <<(argument_reporter_string_number) > (0)> and <(argument_reporter_string_number) < (((GridWidth) * (GridHeight)) + (1))>> then 
InvalidateCluster %s
end

define CalcLookup
delete all of [Lookup0 v]
delete all of [Lookup1 v]
set [ClusterValue v] to [0]
repeat (65536) 
set [NeighbourCount1 v] to ((((([floor v] of ((ClusterValue) / (32768)) ::operators) mod (2)) + (([floor v] of ((ClusterValue) / (16384)) ::operators) mod (2))) + ((([floor v] of ((ClusterValue) / (8192)) ::operators) mod (2)) + (([floor v] of ((ClusterValue) / (2048)) ::operators) mod (2)))) + (((([floor v] of ((ClusterValue) / (512)) ::operators) mod (2)) + (([floor v] of ((ClusterValue) / (128)) ::operators) mod (2))) + ((([floor v] of ((ClusterValue) / (64)) ::operators) mod (2)) + (([floor v] of ((ClusterValue) / (32)) ::operators) mod (2)))))
set [NeighbourCount2 v] to ((((([floor v] of ((ClusterValue) / (16384)) ::operators) mod (2)) + (([floor v] of ((ClusterValue) / (8192)) ::operators) mod (2))) + ((([floor v] of ((ClusterValue) / (4096)) ::operators) mod (2)) + (([floor v] of ((ClusterValue) / (1024)) ::operators) mod (2)))) + (((([floor v] of ((ClusterValue) / (256)) ::operators) mod (2)) + (([floor v] of ((ClusterValue) / (64)) ::operators) mod (2))) + ((([floor v] of ((ClusterValue) / (32)) ::operators) mod (2)) + (([floor v] of ((ClusterValue) / (16)) ::operators) mod (2)))))
set [NeighbourCount3 v] to ((((([floor v] of ((ClusterValue) / (2048)) ::operators) mod (2)) + (([floor v] of ((ClusterValue) / (1024)) ::operators) mod (2))) + ((([floor v] of ((ClusterValue) / (512)) ::operators) mod (2)) + (([floor v] of ((ClusterValue) / (128)) ::operators) mod (2)))) + (((([floor v] of ((ClusterValue) / (32)) ::operators) mod (2)) + (([floor v] of ((ClusterValue) / (8)) ::operators) mod (2))) + ((([floor v] of ((ClusterValue) / (4)) ::operators) mod (2)) + (([floor v] of ((ClusterValue) / (2)) ::operators) mod (2)))))
set [NeighbourCount4 v] to ((((([floor v] of ((ClusterValue) / (1024)) ::operators) mod (2)) + (([floor v] of ((ClusterValue) / (512)) ::operators) mod (2))) + ((([floor v] of ((ClusterValue) / (256)) ::operators) mod (2)) + (([floor v] of ((ClusterValue) / (64)) ::operators) mod (2)))) + (((([floor v] of ((ClusterValue) / (16)) ::operators) mod (2)) + (([floor v] of ((ClusterValue) / (4)) ::operators) mod (2))) + ((([floor v] of ((ClusterValue) / (2)) ::operators) mod (2)) + (([floor v] of ((ClusterValue) / (1)) ::operators) mod (2)))))
set [NewClusterValue v] to [0]
if <(([floor v] of ((ClusterValue) / (1024)) ::operators) mod (2)) = (0)> then 
if <(NeighbourCount1) = (3)> then 
change [NewClusterValue v] by (8)
end
 else 
if <<(NeighbourCount1) = (2)> or <(NeighbourCount1) = (3)>> then 
change [NewClusterValue v] by (8)
end
end
if <(([floor v] of ((ClusterValue) / (512)) ::operators) mod (2)) = (0)> then 
if <(NeighbourCount2) = (3)> then 
change [NewClusterValue v] by (4)
end
 else 
if <<(NeighbourCount2) = (2)> or <(NeighbourCount2) = (3)>> then 
change [NewClusterValue v] by (4)
end
end
if <(([floor v] of ((ClusterValue) / (64)) ::operators) mod (2)) = (0)> then 
if <(NeighbourCount3) = (3)> then 
change [NewClusterValue v] by (2)
end
 else 
if <<(NeighbourCount3) = (2)> or <(NeighbourCount3) = (3)>> then 
change [NewClusterValue v] by (2)
end
end
if <(([floor v] of ((ClusterValue) / (32)) ::operators) mod (2)) = (0)> then 
if <(NeighbourCount4) = (3)> then 
change [NewClusterValue v] by (1)
end
 else 
if <<(NeighbourCount4) = (2)> or <(NeighbourCount4) = (3)>> then 
change [NewClusterValue v] by (1)
end
end
add [NewClusterValue] to [Lookup0 v]
change [ClusterValue v] by (1)
end

define InvalidateCluster %s
if <(item (argument_reporter_string_number) of [IsInvalidated1 v]) = (0)> then 
add (argument_reporter_string_number) to [InvalidatedIdx1 v]
replace item (argument_reporter_string_number) of [IsInvalidated1 v] with [1]
end

define SetClusterValue %s %s %s
if <(argument_reporter_string_number) > (0)> then 
if <(argument_reporter_string_number) = (0)> then 
add (argument_reporter_string_number) to [ActiveClusterIdx v]
end
 else 
delete (item # of (argument_reporter_string_number) in [ActiveClusterIdx v]) of [ActiveClusterIdx v]
end
replace item (argument_reporter_string_number) of [Grid v] with (argument_reporter_string_number)
set [Idx2 v] to ((((argument_reporter_string_number) * (16)) + (argument_reporter_string_number)) + (1))
set [CellDiff1 v] to (item (Idx2) of [CellDelta1 v])
set [CellDiff2 v] to (item (Idx2) of [CellDelta2 v])
set [CellDiff3 v] to (item (Idx2) of [CellDelta3 v])
set [CellDiff4 v] to (item (Idx2) of [CellDelta4 v])
InvalidateCluster %s
if <<(CellDiff1) = (1)> or <(CellDiff2) = (1)>> then 
InvalidateCluster %s
if <(CellDiff1) = (1)> then 
InvalidateCluster %s
end
if <(CellDiff2) = (1)> then 
InvalidateCluster %s
end
end
if <<(CellDiff1) = (1)> or <(CellDiff3) = (1)>> then 
InvalidateCluster %s
if <(CellDiff3) = (1)> then 
InvalidateCluster %s
end
end
if <<(CellDiff3) = (1)> or <(CellDiff4) = (1)>> then 
InvalidateCluster %s
if <(CellDiff4) = (1)> then 
InvalidateCluster %s
end
end
if <<(CellDiff2) = (1)> or <(CellDiff4) = (1)>> then 
InvalidateCluster %s
end

define MergeColor %s
set [Color v] to (item ((argument_reporter_string_number) - (ClustersPerRow)) of [GridColor v])
if <(Color) > (0)> then 
replace item (argument_reporter_string_number) of [GridColor v] with [Color]
stop [this script v]
end
set [Color v] to (item ((argument_reporter_string_number) + (ClustersPerRow)) of [GridColor v])
if <(Color) > (0)> then 
replace item (argument_reporter_string_number) of [GridColor v] with [Color]
stop [this script v]
end
set [Color v] to (item ((argument_reporter_string_number) + (1)) of [GridColor v])
if <(Color) > (0)> then 
replace item (argument_reporter_string_number) of [GridColor v] with [Color]
stop [this script v]
end
set [Color v] to (item ((argument_reporter_string_number) - (1)) of [GridColor v])
if <(Color) > (0)> then 
replace item (argument_reporter_string_number) of [GridColor v] with [Color]
stop [this script v]
end

define HandleInput
if <(Command) = (Random)> then 
InitGridData
set [CurrentPattern v] to []
repeat ((GridWidth) * (GridHeight)) 
if <(pick random (1) to (12)) = (1)> then 
set [CurrentPattern v] to (join [CurrentPattern] [1])
 else 
set [CurrentPattern v] to (join [CurrentPattern] [0])
end
end
InsertPattern %s %s %s %s
set [Command v] to []
end
if <(Command) = (Import)> then 
ImportRlePattern %s
set [Command v] to []
end
if <(Command) = (Clear)> then 
InitGridData
set [Command v] to []
end
if <(Command) = (SuspendResume)> then 
if <(IsSuspended) = (1)> then 
set [IsSuspended v] to [0]
 else 
set [IsSuspended v] to [1]
end
set [Command v] to []
end
if <(Command) = (ToggleGrid)> then 
if <(GridType) = (1)> then 
set [GridType v] to [2]
Init
set [FrameSkipping v] to [0]
 else 
set [GridType v] to [1]
Init
set [FrameSkipping v] to [0]
end
set [Command v] to []
end
if <(Clicked) = (1)> then 
if <(LifeForm) = (GliderGun)> then 
InsertPattern %s %s %s %s
end
if <(LifeForm) = (Pulsar)> then 
InsertPattern %s %s %s %s
end
if <(LifeForm) = (Spaceship)> then 
InsertPattern %s %s %s %s
end
if <(LifeForm) = (Pentomino)> then 
InsertPattern %s %s %s %s
end
if <(LifeForm) = (Custom)> then 
InsertPattern %s %s %s %s
end
set [Clicked v] to [0]
end

define CalcFPS
change [FpsTime v] by (timer)
set [Fps v] to (round ((FpsCount) / (FpsTime)))
set [FpsTime v] to ((0) - (timer))

define Init
pen_clear
delete all of [_ProfilerData v]
set [IsSuspended v] to [0]
set [CalcTime v] to [0]
set [Clicked v] to [0]
set [GridWidth v] to ((240) * (GridType))
set [GridHeight v] to ((180) * (GridType))
set [OffsetX v] to ((480) / (GridWidth))
set [OffsetY v] to ((360) / (GridHeight))
set [ClustersPerRow v] to ((GridWidth) / (2))
set [ClusterCount v] to (((GridWidth) * (GridHeight)) / (4))
InitGridData
ImportRlePattern %s
InsertPattern %s %s %s %s
InsertPattern %s %s %s %s

define RunMainLoop
forever 
HandleInput
if <(IsSuspended) = (0)> then 
Paint
wait (0.1) seconds
 else 
CalcNext
Paint
CalcFPS
if <(Speed) < (100)> then 
wait (((100) - (Speed)) / (100)) seconds
end
end
end

define CalcNext
set [FpsCount v] to [0]
if <(FrameSkipping) = (0)> then 
CalcNextGeneration
change [FpsCount v] by (1)
 else 
repeat ((1) + ([ceiling v] of ((FrameSkipping) / (10)) ::operators)) 
CalcNextGeneration
change [FpsCount v] by (1)
end
end

define CalcLookupBitOps
delete all of [CalcBottom v]
delete all of [CalcCenter v]
delete all of [CalcLeft v]
delete all of [CalcLeftBottom v]
delete all of [CalcLeftTop v]
delete all of [CalcRight v]
delete all of [CalcRightBottom v]
delete all of [CalcRightTop v]
delete all of [CalcTop v]
set [ClusterValue v] to [0]
repeat (65536) 
add (((ClusterValue) mod (2)) * (32768)) to [CalcLeftTop v]
add (((ClusterValue) mod (4)) * (8192)) to [CalcTop v]
add ((([floor v] of ((ClusterValue) / (2)) ::operators) mod (2)) * (4096)) to [CalcRightTop v]
add (((([floor v] of ((ClusterValue) / (4)) ::operators) mod (2)) * (2048)) + (((ClusterValue) mod (2)) * (128))) to [CalcLeft v]
add ((([floor v] of ((ClusterValue) / (4)) ::operators) * (512)) + (((ClusterValue) mod (4)) * (32))) to [CalcCenter v]
add (((([floor v] of ((ClusterValue) / (8)) ::operators) mod (2)) * (256)) + ((([floor v] of ((ClusterValue) / (2)) ::operators) mod (2)) * (16))) to [CalcRight v]
add ((([floor v] of ((ClusterValue) / (4)) ::operators) mod (2)) * (8)) to [CalcLeftBottom v]
add (([floor v] of ((ClusterValue) / (4)) ::operators) * (2)) to [CalcBottom v]
add (([floor v] of ((ClusterValue) / (8)) ::operators) mod (2)) to [CalcRightBottom v]
change [ClusterValue v] by (1)
end

define ImportRlePattern %s
delete all of [ImportPatternBuffer v]
add [] to [ImportPatternBuffer v]
set [MaxLen v] to [0]
set [Idx v] to [1]
repeat until <<(Idx) > (length of (argument_reporter_string_number))> or <(letter (Idx) of (argument_reporter_string_number)) = (!)>> 
set [InsertCellVal v] to []
set [Counter v] to [0]
repeat until <<(letter (Idx) of (argument_reporter_string_number)) < (0)> or <(letter (Idx) of (argument_reporter_string_number)) > (9)>> 
set [Counter v] to (((Counter) * (10)) + (letter (Idx) of (argument_reporter_string_number)))
change [Idx v] by (1)
end
if <(Counter) = (0)> then 
set [Counter v] to [1]
end
if <<(letter (Idx) of (argument_reporter_string_number)) = (b)> or <(letter (Idx) of (argument_reporter_string_number)) = (o)>> then 
if <(letter (Idx) of (argument_reporter_string_number)) = (b)> then 
set [InsertCellVal v] to [0]
end
if <(letter (Idx) of (argument_reporter_string_number)) = (o)> then 
set [InsertCellVal v] to [1]
end
repeat (Counter) 
replace item (length of [ImportPatternBuffer v]) of [ImportPatternBuffer v] with (join (item (length of [ImportPatternBuffer v]) of [ImportPatternBuffer v]) [InsertCellVal])
if <(length of (item (length of [ImportPatternBuffer v]) of [ImportPatternBuffer v])) > (MaxLen)> then 
set [MaxLen v] to (length of (item (length of [ImportPatternBuffer v]) of [ImportPatternBuffer v]))
end
end
change [Idx v] by (1)
 else 
if <(letter (Idx) of (argument_reporter_string_number)) = ($)> then 
repeat (Counter) 
add [] to [ImportPatternBuffer v]
end
change [Idx v] by (1)
 else 
change [Idx v] by (1)
end
end
end
if <<(length of (item (length of [ImportPatternBuffer v]) of [ImportPatternBuffer v])) = (0)> and <(length of [ImportPatternBuffer v]) > (0)>> then 
delete (length of [ImportPatternBuffer v]) of [ImportPatternBuffer v]
end
set [Idx v] to [1]
repeat (length of [ImportPatternBuffer v]) 
repeat until <not <(length of (item (Idx) of [ImportPatternBuffer v])) < (MaxLen)>> 
replace item (Idx) of [ImportPatternBuffer v] with (join (item (Idx) of [ImportPatternBuffer v]) [0])
end
change [Idx v] by (1)
end
set [CustomPatternWidth v] to [MaxLen]
set [CustomPatternHeight v] to (length of [ImportPatternBuffer v])
set [CustomPattern v] to []
set [Idx v] to [1]
repeat (length of [ImportPatternBuffer v]) 
set [CustomPattern v] to (join [CustomPattern] (item (Idx) of [ImportPatternBuffer v]))
change [Idx v] by (1)
end

define InitLoopkups
set [Status v] to [Initializing]
broadcast (1 v)
CalcLookup
CalcLookupBitOps
set [Status v] to []
broadcast (1 v)
